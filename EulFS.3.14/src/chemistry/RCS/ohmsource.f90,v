head	1.4;
access;
symbols
	release3_14_0:1.4
	release3_13_0:1.4
	release3_12_0:1.4
	release3_11_0:1.4
	release3_10_0:1.4
	release3_8_0:1.4
	release3_7_1:1.4
	release3_7_0:1.4
	release3_4_5:1.4
	release3_4_4:1.4
	release3_4_3:1.3
	release3_4_2:1.3
	release3_4_1:1.3;
locks; strict;
comment	@# @;


1.4
date	2014.04.10.09.14.21;	author tesistim;	state Exp;
branches;
next	1.3;

1.3
date	2013.06.08.10.18.19;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	2013.06.08.09.30.51;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.08.07.18.26;	author abonfi;	state Exp;
branches;
next	;


desc
@compute the non-dimensional heat source due to joule effect
@


1.4
log
@Ohm heating is now made non-dimensional in the right way
@
text
@!**********************************************************************************
!  PURPOSE:  To compute the adimensional heat source due to joule effect.
!
!  $Id: ohmsource.f90,v 1.3 2013/06/08 10:18:19 abonfi Exp $
!
!*****************************************************************************************

       double precision function ohmheat(zroe,pstar,esqr,NDIM,NOFVAR)

       implicit none

       ! Variables   

       include 'paramt.h' 
       include 'plasma.h'
       include 'chem.h'
       include 'paramchem.h'
       include 'constants.h'
       include 'commonv.inc'
       include 'commonchem.inc'
       include 'streamplasma.com'
       include 'electric.com'

      integer i,j,isp,ir,NDIM,NOFVAR
      double precision zroe(MAXNOFVAR),pstar,press,sqrtr,rho_R,rho_Rstar
      double precision T,rho,rhostar(NSP),rhos(NSP),mols(NSP),chis(NSP)
      double precision Tstar,esqr,sigma,ohmheat2
      double precision elnorm,elnormsqrt,nmol
      double precision ddot
      logical verbose
!      parameter(verbose=.TRUE.)
     parameter(verbose=.FALSE.)
    
!      Z_rho (sqrt(rho))  
       sqrtr = ZERO
       do isp = 1,NSP
           sqrtr = sqrtr + zroe(isp) 
       enddo   
  
!     Chemical species densities (kg/m^3)  
      do i = 1,NSP
          rhostar(i) = sqrtr * zroe(i)
          rhos(i) = rhostar(i) * RREFP   !(kg/m^3)
      enddo

!      Pressure
       press = pstar * PREFP                    !(Pa)
       
!      \rho* R* = \sum(rhoi* Ri*) 
       rho_Rstar = ZERO 
       do i = 1,NSP
           rho_Rstar = rho_Rstar + rhostar(i) * RSTARP(i)
       enddo 
!
!      Temperature
       Tstar = pstar/rho_Rstar 
       T = Tstar * TREFP                           !(K)
!
!      Molar density (mol/cm^3)     
       nmol=ZERO
       do i = 1 , NSP
           mols(i) = rhos(i)/Ms(i)     !(kmol/m^3)
           nmol = nmol + mols(i)
       enddo
!      kmol/m^3 -> mol/cm^3
!       mols = mols * 1.0d-3 
!
!      Molar fractions         
       do i = 1,NSP
          chis(i) = mols(i)/nmol
          if(verbose)write(6,*)'chi(',i,')=,',chis(i) 
       enddo 
       
!     Scalar product of electric field
      if(verbose)write(6,*)'Elect field^2 ADIM=',esqr

      elnormsqrt = esqr*PHIREF*PHIREF/(LREFP*LREFP)  !Dimensional electric field squared norm (V^2/m^2)              
      if(verbose)write(6,*)'Elect field^2 DIM=',elnormsqrt

!     Electric field norm
      elnorm = sqrt(elnormsqrt)   ! (V/m)                    
      if(verbose)write(6,*)'Elect field DIM=',elnorm

!     Electrical conductivity 
      if(verbose)then
       write(6,*)'Temperature=',T
      endif
      call electcond(T,chis,elnorm,sigma)  !(1/(Ohm m))      
      if(verbose)then
       write(6,*)'sigma DIM (OHM/M)=',sigma
       write(6,*)'Temperature=',T
      endif
  
!pepe elnorm = PHIREF/1.d-1
!pepe elnormsqrt = elnorm*elnorm
!
!     Ohmic source term
      Ohmheat = sigma*elnormsqrt           !(J/(m^3 s)
      ohmheat2 = sigma*esqr
     
      if(verbose)write(6,*)'OHMHEAT DIM=',Ohmheat
!
!     Non-dimensional ohmic source term
      Ohmheat = Ohmheat * LREFP / (RREFP*UREFP**3) 
      ohmheat2 = ohmheat2 * PHIREF**2/(LREFP*RREFP*UREFP**3)

      if(verbose)then
         write(6,*)'OHMHEAT ADIM=',Ohmheat
         write(6,*)'OHMHEAT2 ADIM=',ohmheat2
         pause    
      endif
  
      return
      end
@


1.3
log
@wrong comment
@
text
@d4 1
a4 1
!  $Id: ohmsource.f90,v 1.2 2013/06/08 09:30:51 abonfi Exp abonfi $
d27 1
a27 1
      double precision Tstar,esqr,sigma
d31 2
a32 2
!     parameter(verbose=.TRUE.)
      parameter(verbose=.FALSE.)
d85 3
d99 1
d105 1
d109 1
@


1.2
log
@converted into a function; now works with the true
electric field, obtained from the potential
@
text
@d4 1
a4 1
!  $Id: ohmsource.f90,v 1.1 2013/06/08 07:18:26 abonfi Exp abonfi $
d91 2
a92 2
cpepe elnorm = PHIREF/1.d-1
cpepe elnormsqrt = elnorm*elnorm
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
!  $Id:$
d8 1
a8 1
       subroutine ohmsource(zroe,pstar,elfield,NDIM,NOFVAR,Ohmheat)
d27 1
a27 1
      double precision Tstar,elfield(NDIM,NDIM),Ohmheat,sigma
d30 3
d71 1
a71 1
!       write(6,*)'chi(',i,')=,',chis(i) 
d75 1
a75 3
      elnormsqrt = ddot(NDIM,elfield,NOFVAR,elfield,NOFVAR)     
!      write(6,*)'Elect field vector ADIM=',elfield
!      write(6,*)'Elect field^2 ADIM=',elnormsqrt
d77 2
a78 2
      elnormsqrt = elnormsqrt*PHIREF*PHIREF/(LREFP*LREFP)  !Dimensional electric field squared norm (V^2/m^2)              
!      write(6,*)'Elect field^2 DIM=',elnormsqrt
d82 1
d86 4
a89 2
!      write(6,*)'sigma DIM (OHM/M)=',sigma
!      write(6,*)'Temperature=',T
d91 2
a92 2
      elnorm = PHIREF/1.d-1
      elnormsqrt = elnorm*elnorm
d97 1
a97 1
!      write(6,*)'OHMHEAT DIM=',Ohmheat
d99 1
a99 1
!     Adimensional ohmic source term
d102 4
a105 2
!      write(6,*)'OHMHEAT ADIM=',Ohmheat
!      pause    
@
