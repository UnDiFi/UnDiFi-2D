head	1.4;
access;
symbols
	release3_14_0:1.4
	release3_13_0:1.4
	release3_12_0:1.4
	release3_11_0:1.4
	release3_10_0:1.4
	release3_8_0:1.4
	release3_7_1:1.4
	release3_7_0:1.4
	release3_4_5:1.4
	release3_4_4:1.4
	release3_4_3:1.4
	release3_4_2:1.3;
locks; strict;
comment	@c @;


1.4
date	2013.09.17.10.06.31;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	2013.07.15.16.33.42;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	2013.06.25.07.36.07;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2013.06.24.14.26.54;	author abonfi;	state Exp;
branches;
next	;


desc
@Computes the current through a boundary patch
@


1.4
log
@VOLUME is now an array
@
text
@      SUBROUTINE CURRENTFLUX(ICELNOD,ICELFAC,NOFVERT,NELEM,IBNDFAC,
     &NBFAC,FACNOR,XYZDOT,ZROE,NDIM,NOFVAR,NP,VOL,TIME)
C
      IMPLICIT NONE
C
C     $Id: currentflux.F,v 1.3 2013/07/15 16:33:42 abonfi Exp abonfi $
C
C     Here we compute the 
C
      INTEGER NOFVERT,NELEM,NBFAC,NDIM,NOFVAR,NP
      INTEGER ICELNOD(*),ICELFAC(*),IBNDFAC(3,NBFAC)
      DOUBLE PRECISION FACNOR(*),VOL(*),XYZDOT(*),ZROE(*)
      DOUBLE PRECISION TIME
C

      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
      include 'bnd.h'
      include 'plasma.h'
      include 'bnd.com'
      include 'streamplasma.com'
      include 'electric.com'
      INCLUDE 'io.com'
      INCLUDE 'time.com'
      INCLUDE 'three.com'
C
#ifdef MPI
      integer istatus(MPI_STATUS_SIZE)
      integer isum,source,dest,total,NPES,tag
#endif
C
      INTEGER ICN(MAXNOFVERT)
      DOUBLE PRECISION VCZ(MAXNOFVAR*MAXNOFVERT*MAXTIMLEVS)
      DOUBLE PRECISION VCB(3*MAXNOFVERT) 
      DOUBLE PRECISION VCN(3*MAXNOFVERT) 
      DOUBLE PRECISION WKSP(0:NCOLOR) 
C
      INTEGER IELEM,IBFAC
      DOUBLE PRECISION VOLUME(MAXTIMLEVS+1),ESQR,HELP,SIGMA,PRESS
      INTEGER IBC,IVERT
C
      INTEGER MY_PE
      COMMON/MPICOM/MY_PE
C
      DOUBLE PRECISION PRESS4Ar,DDOT,GETSIGMA
C
      CALL DINIT(NCOLOR+1,ZERO,CFLUX,1)
C
      DO IBFAC = 1,NBFAC
         IELEM = IBNDFAC(1,IBFAC)
         IVERT = IBNDFAC(2,IBFAC)
         IBC   = IBNDFAC(3,IBFAC)

         CALL CELPTR(IELEM,NELEM,ICELNOD,ICELFAC,VOL,ZROE,FACNOR,
     2               XYZDOT,NDIM,NOFVERT,NOFVAR,NP,ICN,VCZ,VCN,VCB,
     3               VOLUME)

         CALL LINEARIZE(IELEM,LALE,VCN,VCB,NDIM,NOFVERT,
     +VCZ,NOFVAR,VOLUME(1))
C
         PRESS = PRESS4Ar(NDIM,ZAVG)
         ESQR = DDOT(NDIM,GRAD_PARM(NOFVAR,1),NOFVAR,
     &                    GRAD_PARM(NOFVAR,1),NOFVAR)
         SIGMA = GETSIGMA(ZAVG,PRESS,ESQR)
         HELP = DDOT(NDIM,GRAD_PARM(NOFVAR,1),NOFVAR,
     &          VCN((IVERT-1)*NDIM+1),1)
         HELP = HELP * PHIREF/LREFP

         CFLUX(IBC) = CFLUX(IBC) - HELP
         
      ENDDO
C
#ifdef MPI
      CALL MPI_COMM_SIZE(PETSC_COMM_WORLD, NPES, ifail)
      TAG = 50
      DEST = 0
      if (MY_PE .EQ. 0) then
          do source = 1, NPES-1
              call MPI_RECV(WKSP,NCOLOR+1,MPI_DOUBLE_PRECISION,source,
     +               tag, PETSC_COMM_WORLD, istatus, ifail)
              DO IBC = 0,NCOLOR
                 CFLUX(IBC) = CFLUX(IBC) + WKSP(IBC)
              ENDDO
          enddo
      else
          call MPI_SEND(CFLUX, NCOLOR+1, MPI_DOUBLE_PRECISION, dest,
     +          tag, PETSC_COMM_WORLD, ifail)
      endif
#endif
C
      IF(MY_PE.EQ.0)THEN
         write(IWEFLX,FMT=100)TIME,(CFLUX(IBC),IBC=1,10)
      ENDIF
  100 FORMAT(F12.6,10(1X,F12.6))
      RETURN
      END
@


1.3
log
@fixed a bug which provoked a segmentation fault
@
text
@d6 1
a6 1
C     $Id: currentflux.F,v 1.2 2013/06/25 07:36:07 abonfi Exp abonfi $
d39 1
a39 1
      DOUBLE PRECISION VOLUME,ESQR,HELP,SIGMA,PRESS
d59 1
a59 1
     +VCZ,NOFVAR,VOLUME)
@


1.2
log
@compute the current flux through a boundary patch
@
text
@d6 1
a6 1
C     $Id: currentflux.f,v 1.1 2013/06/24 14:26:54 abonfi Exp abonfi $
a19 4
!     include 'chem.h'
!     include 'paramchem.h'
!     include 'commonv.inc'
!     include 'commonchem.inc'
a22 2
!     INCLUDE 'conv.com'
!     INCLUDE 'flags.com'
a25 1
!     INCLUDE 'four.com'
d33 1
a33 1
      DOUBLE PRECISION VCZ(MAXNOFVAR*MAXNOFVERT) 
@


1.1
log
@Initial revision
@
text
@d1 2
a2 8
      SUBROUTINE CURRENTFLUX(IBNDFAC,NBFAC,ICELNOD,ICELFAC,VFACNOR,
     2                       XYZDOT,VOL,ZROE,NELEM,NPOIN,NGHOST,NPNOD,
     4                       NDIM,NOFVERT,NOFVAR,TIME)
!            CALL CURRENTFLUX(ISTAK(LBNDFAC),NBFAC,ISTAK(LCELNOD),
!    2                        ISTAK(LCELFAC),DSTAK(LFACNOR),
!    3                        DSTAK(LXYZDOT),DSTAK(LVOL),DSTAK(LZROE),
!    3                        NELEM,NPOIN,NGHOST,NPNOD,NDIM,NOFVERT,
!    4                        NOFVAR,TIME)
d6 1
a6 1
C     $Id: chkint.f,v 1.1 2013/03/28 10:15:39 abonfi Exp $
d10 5
d20 5
a24 4
      include 'chem.h'
      include 'paramchem.h'
      include 'commonv.inc'
      include 'commonchem.inc'
d27 2
a28 2
      INCLUDE 'conv.com'
      INCLUDE 'flags.com'
a29 1
      INCLUDE 'nloc.com'
d32 1
a32 1
      INCLUDE 'four.com'
d34 4
d39 9
a47 26
      INTEGER NPOIN,NGHOST,NPNOD,NDIM,NOFVERT,NOFVAR,NELEM,NBFAC
      INTEGER ICELNOD(NOFVERT,NELEM),ICELFAC(NOFVERT,NELEM),
     2        IBNDFAC(3,NBFAC)
      DOUBLE PRECISION TIME
      DOUBLE PRECISION VFACNOR(NDIM,*),VOL(NELEM), ZROE(NOFVAR,*),
     2                 XYZDOT(NDIM,*)
C
C     On entry:
C     --------
C
C     NDIM    dimension of the space (2 or 3)
C     NOFVERT number of vertices per element (=NDIM+1, since
C             only triangles or tetrahedra are allowed)
C     NOFVAR  number of variables (degrees of freedom)
C             in each meshpoint
C     NELEM   no. of processor owned elements (triangles/tetrahedra);
C             global number of elements in the uni-processor case
C
C
C     ICELNOD(1:NOFVERT,1:NELEM)
C            Cell to Node pointer : ICELNOD(i,ielem) gives the
C            global node number of the i-th vertex of the ielem-th cell
C
C
C     FACNOR(1:NDIM,1:NFACE)  cartesian components
C                             of the NFACE faces/edges
d52 1
d54 1
a54 48
      INTEGER IVAR,I,J,IELEM,NP,IVERT,IBC,k
      INTEGER IFAIL
      DOUBLE PRECISION PRESS,ESQR
C
C     ICN stores the vertices of the current element (0-based indexing)
C     ..
C     .. Local Arrays ..
      INTEGER ICN(MAXNOFVERT)
      DOUBLE PRECISION VCN(3*MAXNOFVERT)
      DOUBLE PRECISION VCZ(MAXNOFVAR*MAXNOFVERT),VCB(3*MAXNOFVERT)
!     DOUBLE PRECISION CFLUX(0:NCOLOR)
C
      DOUBLE PRECISION HELP,CNST,SIGMA,PSTAR,VOLUME
      DOUBLE PRECISION PRESS4AR,GETSIGMA,DDOT
C
C     Some initializations ....
C
      NP = NPOIN + NGHOST + NPNOD
C
C     set work array equal to zero
C
!     CALL DINIT(NCOLOR+1,ZERO,CFLUX(0),1)
C
      CNST = PHIREF/LREFP
      write(6,*)' within currentlfux'
C
      DO 2000 I = 1,NBFAC
C
         IELEM = IBNDFAC(1,I)
         IVERT = IBNDFAC(2,I)
         IBC   = IBNDFAC(3,I)
         write(6,*)i,ibc,ielem,ivert,lale !press,sigma,help
         write(6,*)'ndim = ',ndim
         write(6,*)'nofvert = ',nofvert
         write(6,*)'nofvar = ',nofvar
         write(6,*)'np = ',np
         write(6,*)'vol = ',vol(ielem)
         write(6,*)'icelnod = ',(icelnod(j,ielem),j=1,nofvert)
         write(6,*)'icelnod = ',(icelnod(j,ielem+nelem),j=1,nofvert)
         write(6,*)'icelfac = ',(icelfac(j,ielem),j=1,nofvert)
         do j = 1,nofvert
            icn(j) = icelnod(j,ielem)
         enddo
!        write(6,*)'vfacnor = ',(vfacnor(j,1),j=1,ndim)
         do k = 1,nofvert
         write(6,*)'zroe = ',(zroe(j,icn(k)),j=1,nofvar)
         enddo
         write(6,*)'ntimlevs = ',ntimlevs
d56 6
a61 1
         CALL CELPTR(IELEM,NELEM,ICELNOD,ICELFAC,VOL,ZROE,VFACNOR,
d64 3
a66 4
!        write(6,*)'beyond celptr',(icn(j),j=1,nofvert),volume
!     SUBROUTINE CELPTR(IELEM,NELEM,ICELNOD,ICELFAC,VOL,ZROE,FACNOR,
!    2                  XYZDOT,NDIM,NOFVERT,NOFVAR,LDA,ICN,VCZ,VCN,VCB,
!    3                  VOLUME)
d68 34
a101 21
!        CALL LINEARIZE(IELEM,LALE,VCN,VCB,NDIM,NOFVERT,
!    +               VCZ,NOFVAR,VOLUME)
C
!        PRESS = PRESS4AR(NDIM,ZAVG) 
!        ESQR = DDOT(NDIM,GRAD_PARM(NOFVAR,1),NOFVAR,
!    &                    GRAD_PARM(NOFVAR,1),NOFVAR) 
!        SIGMA = GETSIGMA(ZAVG,PSTAR,ESQR,NDIM,NOFVAR)  ! this is dimensional
C
C        take the dot product of the electric field times the normal
C
!        HELP = DDOT(NDIM,GRAD_PARM(NOFVAR,1),NOFVAR,
!    &               VCN((IVERT-1)*NDIM+1),1)
!        write(6,*)i,press,sigma,help
C
!        CFLUX(IBC) = CFLUX(IBC) - SIGMA*HELP*CNST
C
C     add cell integral to the global one
C
C
 2000 CONTINUE ! end loop over boundary faces
!     WRITE(6,*)ITIM,ITER,TIME,(CFLUX(J),J=0,10)
@
