head	1.9;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.9
	release3_13_0:1.9
	release3_12_0:1.9
	release3_11_0:1.9
	release3_10_0:1.9
	release3_8_0:1.9
	release3_7_1:1.9
	release3_7_0:1.9
	release3_4_5:1.9
	release3_4_4:1.9
	release3_4_3:1.9
	release3_4_2:1.7
	release3_4_1:1.7
	release3_4_0:1.7
	release3_3_5:1.7
	release3_3_4:1.7
	release3_3_3:1.7
	release3_3_2:1.7
	release3_3_1:1.7
	release3_3_0:1.7;
locks; strict;
comment	@c @;


1.9
date	2013.09.23.11.23.35;	author abonfi;	state Exp;
branches;
next	1.8;

1.8
date	2013.09.19.08.05.43;	author abonfi;	state Exp;
branches;
next	1.7;

1.7
date	2011.09.16.07.46.35;	author abonfi;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.03.08.05.45;	author abonfi;	state Exp;
branches;
next	1.5;

1.5
date	2008.04.19.07.41.14;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2000.11.22.16.28.39;	author aldo;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.22.12.06.45;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	98.02.07.10.24.20;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	97.11.29.11.09.30;	author aldo;	state Exp;
branches;
next	;


desc
@Subroutine for computing the advection fvector for scalar problems
@


1.9
log
@fixed an error with the Doxygen documentation
@
text
@!> \par Purpose
!>
!> This subroutine returns
!> the cell averaged advection speed \f$\hat{\lambda}\f$
!> and the integral over the cell of the source term, i.e. \f$\int_{T_e}f\,\mathrm{d}V\f$
!>
!> different cases are available, depending on \c NDIM and the value of \c ICASE which is set
!> through the runtime option:
!> \verbatim
!> -testcase ICASE
!> \endverbatim
!>
!> 1. \c NDIM=2 and \c ICASE=1 : \f$ \lambda = 2 \mathbf{e}_x + \mathbf{e}_y \quad\quad f = 0\f$.
!> 2. \c NDIM=2 and \c ICASE=2 : \f$ \lambda = \frac{1}{d+1}\left( \sum_{j=1}^{d+1} u_j \right) \mathbf{e}_x + \mathbf{e}_y \quad\quad f = 0\f$.
!> 3. \c NDIM=2 and \c ICASE=3 : \f$ \lambda = 2 \mathbf{e}_x + \mathbf{e}_y \quad\quad f = 0\f$.
!> 4. \c NDIM=2 and \c ICASE=4 : \f$ \lambda = 2 \mathbf{e}_x + \mathbf{e}_y \quad\quad f = 4x -2y\f$.
!> 5. \c NDIM=2 and \c ICASE=5 : \f$ \lambda = 2 \mathbf{e}_x + \mathbf{e}_y \quad\quad f = xye^{\left(x+y\right)}\f$.
!> 6. \c NDIM=2 and \c ICASE=7 : \f$ \lambda = \cos\delta \mathbf{e}_x + \sin\delta \mathbf{e}_y \quad\quad f(x,y) = -\left(x\cos\delta+x\sin\delta\right)\f$.
!> 7. \c NDIM=2 and \c ICASE=8 : \f$ \lambda = \mathbf{e}_x + 2 \mathbf{e}_y \quad\quad f = 0\f$.
!> 8. \c NDIM=2 and \c ICASE=6 : \f$ \lambda = 2\pi y \mathbf{e}_x - 2\pi x \mathbf{e}_y \quad\quad f = 0\f$. This is for the rotating hump testcase, see [De Palma et al. Journal of Computational Physics 208 (2005) 1â€“3](http://dx.doi.org/doi:10.1016/j.jcp.2004.11.023)
!> 9. \c NDIM=2 and \c ICASE=9 : \f$ \lambda = \mathbf{e}_x \quad\quad f = 0\f$.
!> 10. \c NDIM=3 and \c ICASE=1 : \f$ \lambda = 0.75 \mathbf{e}_x + 0.875 \mathbf{e}_y + 1. \mathbf{e}_z \quad\quad f = 0\f$.
!> 11. \c NDIM=3 and \c ICASE=2 : \f$ \lambda = x \mathbf{e}_x + 0.2 \mathbf{e}_y + y \mathbf{e}_z \quad\quad f = 0\f$.
!>
!> @@param[in] IELEM is the current simplicial cell
!> @@param[out] X is the cell averaged convection speed \f$\hat{\lambda}\f$ is the current simplicial cell
!> @@param[in] XYZ are the \c NDIM Cartesian coordinates of the \c NOFVERT vertices of cell \c IELEM
!> @@param[in] U are the \c NOFVERT values of the dependent variable within the \c NOFVERT vertices of cell \c IELEM
!> @@param[in] NDIM nof dimensions of the space
!> @@param[in] NOFVERT \c =NDIM nof vertices of the current simplex
!> @@param[out] FSOU is the integral of the source term, i.e. \f$\int_{T_e}f\,\mathrm{d}V\f$
!>
!> \author $Author: abonfi $
!> \version $Revision: 1.8 $
!> \date $Date: 2013/09/19 08:05:43 $
!>
!>
!>
!>
!>
      SUBROUTINE ADVECT(IELEM,X,XYZ,U,NDIM,NOFVERT,FSOU)
c
c     $Id: advect.f,v 1.8 2013/09/19 08:05:43 abonfi Exp abonfi $
c
      IMPLICIT NONE
c
c
      INCLUDE 'constants.h'
      INCLUDE 'scalar.com'
      INCLUDE 'visco.com'
C
C
C
C
C     .. Scalar Arguments ..
      DOUBLE PRECISION FSOU
      INTEGER IELEM,NDIM,NOFVERT
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION U(NOFVERT),X(NDIM),XYZ(NDIM,NOFVERT)
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION DELTA,SUMY,SUMX
      INTEGER IVERT,IERR,IOPT
      CHARACTER*30 ERRMSG
C     ..
C     .. External Functions ..
      DOUBLE PRECISION FUNSOU1,FUNSOU2
      EXTERNAL FUNSOU1,FUNSOU2
C     ..
C     .. External Subroutines ..
      EXTERNAL SETERR
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC COS,SIN
C     ..
      DATA ERRMSG(1:25)/'ADVECT - INVALID ICASE = '/
C
      FSOU = ZERO
      DELTA = 22.5d0*PI/180.d0
C
      GOTO (200,300) NDIM - 1
c
c       2D scalar testcases
c
  200 CONTINUE
c
c Linear advection
c
      IF (ICASE.EQ.1) THEN
          X(1) = TWO
          X(2) = ONE

      ELSEIF (ICASE.EQ.2) THEN
          SUMX = 0.00
          DO 3 IVERT = 1,NOFVERT
    3     SUMX = SUMX + U(IVERT)
          X(1) = SUMX/NOFVERT
          X(2) = ONE

      ELSEIF (ICASE.EQ.3) THEN
          X(1) = TWO
          X(2) = ONE

      ELSEIF (ICASE.EQ.4) THEN
          X(1) = TWO
          X(2) = ONE
C
C     source term 4*x - 2*y
C
          SUMX = 0.d0
          SUMY = 0.d0
          DO 5 IVERT = 1,NOFVERT
              SUMX = SUMX + XYZ(1,IVERT)
              SUMY = SUMY + XYZ(2,IVERT)
    5     CONTINUE
          SUMX = 4.d0*SUMX/NOFVERT
          SUMY = -2.d0*SUMY/NOFVERT
          FSOU = SUMX + SUMY

      ELSEIF (ICASE.EQ.5) THEN
          X(1) = TWO
          X(2) = ONE
C
C     source term for U(X,Y) = X*Y*EXP(X+Y)
C
C     first option: evaluate the source term in the
C     centroid of the triangle
C
CXX       SUMX = 0.d0
CXX       SUMY = 0.d0
CXX       DO 7 IVERT = 1,NOFVERT
CXX           SUMX = SUMX + XYZ(1,IVERT)
CXX           SUMY = SUMY + XYZ(2,IVERT)
CXX 7     CONTINUE
CXX       SUMX = SUMX/NOFVERT
CXX       SUMY = SUMY/NOFVERT
CXX       FSOU = FUNSOU1(SUMX,SUMY,X(1),X(2),REINV)
C
C     second option: take the arithmetic mean of the
C     values in the nodes
C
          SUMX=0.d0
          DO 8 IVERT = 1 , NOFVERT
             SUMX = SUMX +
     +       FUNSOU1(XYZ(1,IVERT),XYZ(2,IVERT),X(1),X(2),REINV)
    8     CONTINUE
          FSOU = SUMX/NOFVERT
      ELSEIF (ICASE.EQ.6) THEN
          X(1) = COS(DELTA)
          X(2) = SIN(DELTA)
C
C     source term for U(X,Y) =
C
C     first option: evaluate the source term in the
C     centroid of the triangle
C
          SUMX = 0.d0
          SUMY = 0.d0
          DO 9 IVERT = 1,NOFVERT
              SUMX = SUMX + XYZ(1,IVERT)
              SUMY = SUMY + XYZ(2,IVERT)
    9     CONTINUE
          SUMX = SUMX/NOFVERT
          SUMY = SUMY/NOFVERT
          FSOU = FUNSOU2(SUMX,SUMY,DELTA)
C
C     second option: take the arithmetic mean of the
C     values in the nodes
C
C         SUMX=0.d0
C         DO 8 IVERT = 1 , NOFVERT
C            SUMX = SUMX +
C    +       FUNSOU2(XYZ(1,IVERT),XYZ(2,IVERT),DELTA)
C   8     CONTINUE
C         FSOU = SUMX/NOFVERT
      ELSEIF (ICASE.EQ.7) THEN
          X(1) = ONE
          X(2) = TWO
      ELSEIF (ICASE.EQ.8) THEN
          SUMX = 0.d0
          SUMY = 0.d0
          DO IVERT = 1,NOFVERT
              SUMX = SUMX + XYZ(1,IVERT)
              SUMY = SUMY + XYZ(2,IVERT)
          ENDDO
          SUMX = SUMX/NOFVERT
          SUMY = SUMY/NOFVERT
          X(1) = TWO*PI*SUMY 
          X(2) =-TWO*PI*SUMX
      ELSEIF (ICASE.EQ.9) THEN
          X(1) = ONE
          X(2) = ZERO
      ELSE
          GOTO 666

      ENDIF

      RETURN
c
c       3D scalar testcases
c
  300 CONTINUE
c
c Linear advection
c
      IF (ICASE.EQ.1) THEN
          X(1) = 0.75d0
          X(2) = 0.875d0
          X(3) = ONE
c
c Spiral testcase
c
      ELSEIF (ICASE.EQ.2) THEN
          SUMX = ZERO
          SUMY = ZERO
          DO 1 IVERT = 1,NOFVERT
              SUMX = SUMX + XYZ(3,IVERT)
    1     SUMY = SUMY - XYZ(1,IVERT)
          X(1) = SUMX/NOFVERT
          X(2) = 0.2d0
          X(3) = SUMY/NOFVERT
c
      ELSE
          GOTO 666

      ENDIF

C
      RETURN

  666 CONTINUE
      WRITE(ERRMSG(26:30),FMT=100)ICASE
  100 FORMAT(I5.5)
      IERR=666
      IOPT=1
      CALL SETERR(ERRMSG,30,666,1)
C
      END
!> \par Purpose
!>
!> Source term for the convection-diffusion equation
!> \f[
!>  u_t +   \lambda_xu_x+\lambda_yu_y - \varepsilon(u_{xx}+u_{yy}) = f
!> \f]
!>
!>  The convection speed is \c (A,B) = \f$\lambda_x\mathbf{e}_x+\lambda_y\mathbf{e}_y\f$
!>
!>  \c EPS is the diffusion coefficient \f$\varepsilon\f$ which is set using the runtime option:
!>  \verbatim
!>  -Reynolds [value]
!>  \endverbatim
!>
!> where \c value = \f$1/\varepsilon\f$.
!>
!> the source term is:
!> \f[ 
!> f = [(\lambda_x-2\varepsilon)y+(\lambda_y-2\varepsilon)x]e^{(x+y)} [(\lambda_x-2\varepsilon)+(\lambda_y-2\varepsilon)]xye^{(x+y)}
!> \f]
!> and the exact steady solution is:
!> \f[
!>    u = xy\exp(x+y)
!> \f]
!>
!> @@param[in] X Cartesian x coordinate
!> @@param[in] Y Cartesian y coordinate
!> @@param[in] A Cartesian x component of the convection speed, i.e. \f$\lambda_x\f$
!> @@param[in] B Cartesian y component of the convection speed, i.e. \f$\lambda_y\f$
!> @@param[in] EPS is the diffusion coefficient \f$\varepsilon\f$.
!> @@return The pointwise value of the source term \c f.
!> \author $Author: abonfi $
!> \version $Revision: 1.8 $
!> \date $Date: 2013/09/19 08:05:43 $
!>
!>
      DOUBLE PRECISION FUNCTION FUNSOU1(X,Y,A,B,EPS)
C
C     $Id: advect.f,v 1.8 2013/09/19 08:05:43 abonfi Exp abonfi $
C
      IMPLICIT NONE
C
C
      INCLUDE 'constants.h'

C     .. Scalar Arguments ..
      DOUBLE PRECISION A,B,EPS,X,Y
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION TEMPA,TEMPB
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC EXP
C     ..
      TEMPA = A - TWO*EPS
      TEMPB = B - TWO*EPS

      FUNSOU1 = ((TEMPA*Y+TEMPB*X)+ (TEMPA+TEMPB)*X*Y)*EXP(X+Y)

      RETURN

      END
!> \par Purpose
!>
!> Source term for the convection equation
!> \f[
!>  u_t +   \lambda_x u_x+\lambda_y u_y = f
!> \f]
!>
!>
!> the source term is:
!> \f[ 
!> f = -\left(x\cos\delta+x\sin\delta\right)
!> \f]
!> and the exact steady solution is:
!> \f[
!>    u = \sin\left(2\pi\left(y\cos\delta-x\sin\delta\right)\right)+ x'y' -xy
!> \f]
!> where
!> \f{eqnarray*}{
!>    x' &=& x - \cos(\delta) (x\cos(\delta)+y\sin(\delta)) \\
!>    y' &=& y - \sin(\delta) (x\cos(\delta)+y\sin(\delta))
!> \f}
!>
!> @@param[in] X Cartesian x coordinate
!> @@param[in] Y Cartesian y coordinate
!> @@param[in] DELTA is the angle \f$\delta\f$
!> @@return The pointwise value of the source term \c f.
!> \author $Author: abonfi $
!> \version $Revision: 1.8 $
!> \date $Date: 2013/09/19 08:05:43 $
!>
!>
      DOUBLE PRECISION FUNCTION FUNSOU2(X,Y,DELTA)
C
C     $Id: advect.f,v 1.8 2013/09/19 08:05:43 abonfi Exp abonfi $
C
      IMPLICIT NONE
C     .. Scalar Arguments ..
      DOUBLE PRECISION DELTA,X,Y
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC COS,SIN
C     ..
      FUNSOU2 = - (Y*COS(DELTA)+X*SIN(DELTA))

      RETURN

      END
@


1.8
log
@Added Doxygen documentation
functions FUNSOU1 and FUNSOU2 have also been added
to promote inlining
@
text
@d29 1
d35 1
a35 1
!> \date $Date: 2013/08/20 14:48:46 $
d43 1
a43 1
c     $Id: advect.f,v 1.7 2011/09/16 07:46:35 abonfi Exp abonfi $
d273 1
a273 1
!> \date $Date: 2013/08/20 14:48:46 $
d278 1
a278 1
C     $Id: fun1.f,v 1.2 2013/01/24 08:08:43 abonfi Exp abonfi $
d330 1
a330 1
!> \date $Date: 2013/08/20 14:48:46 $
d335 1
a335 1
C     $Id: fun2.f,v 1.2 2013/01/24 08:08:43 abonfi Exp abonfi $
@


1.7
log
@fixed an error: velocity components had been switched
@
text
@d1 39
d42 1
a42 1
c     $Id: advect.f,v 1.6 2008/05/03 08:05:45 abonfi Exp abonfi $
d44 1
a44 1
C     IMPLICIT NONE
a45 2
c This subroutine returns in the array X
c the advection speed for scalar testcases
d67 1
a67 1
      DOUBLE PRECISION FUNSOU1
d78 1
a78 1
      FSOU = 0.D0
d207 3
a209 3
          X(1) = 0.75
          X(2) = 0.875
          X(3) = 1.00
d220 1
a220 1
          X(2) = 0.2
d238 109
@


1.6
log
@added convective speed for the doublesine and hump testcases
@
text
@d3 1
a3 1
c     $Id:$
d151 5
a155 2
          X(1) =-TWO*PI*SUMY 
          X(2) = TWO*PI*SUMX
@


1.5
log
@add ICASE=7 from De Palma et al JCP 208 (2005) 1-33
@
text
@d3 2
d10 1
a10 1
      INCLUDE 'constants'
d25 1
a25 1
      DOUBLE PRECISION DELTA,DUM,SUM
d57 1
a57 1
          SUM = 0.00
d59 2
a60 2
    3     SUM = SUM + U(IVERT)
          X(1) = SUM/NOFVERT
d73 2
a74 2
          SUM = 0.d0
          DUM = 0.d0
d76 2
a77 2
              SUM = SUM + XYZ(1,IVERT)
              DUM = DUM + XYZ(2,IVERT)
d79 3
a81 3
          SUM = 4.d0*SUM/NOFVERT
          DUM = -2.d0*DUM/NOFVERT
          FSOU = SUM + DUM
d92 2
a93 2
CXX       SUM = 0.d0
CXX       DUM = 0.d0
d95 2
a96 2
CXX           SUM = SUM + XYZ(1,IVERT)
CXX           DUM = DUM + XYZ(2,IVERT)
d98 3
a100 3
CXX       SUM = SUM/NOFVERT
CXX       DUM = DUM/NOFVERT
CXX       FSOU = FUNSOU1(SUM,DUM,X(1),X(2),REINV)
d105 1
a105 1
          SUM=0.d0
d107 1
a107 1
             SUM = SUM +
d110 1
a110 1
          FSOU = SUM/NOFVERT
d120 2
a121 2
          SUM = 0.d0
          DUM = 0.d0
d123 2
a124 2
              SUM = SUM + XYZ(1,IVERT)
              DUM = DUM + XYZ(2,IVERT)
d126 3
a128 3
          SUM = SUM/NOFVERT
          DUM = DUM/NOFVERT
          FSOU = FUNSOU2(SUM,DUM,DELTA)
d133 1
a133 1
C         SUM=0.d0
d135 1
a135 1
C            SUM = SUM +
d138 1
a138 1
C         FSOU = SUM/NOFVERT
d142 11
d174 2
a175 2
          SUM = ZERO
          DUM = ZERO
d177 3
a179 3
              SUM = SUM + XYZ(3,IVERT)
    1     DUM = DUM - XYZ(1,IVERT)
          X(1) = SUM/NOFVERT
d181 1
a181 1
          X(3) = DUM/NOFVERT
@


1.4
log
@changed convection speed for tetcase #3
@
text
@d137 3
@


1.3
log
@replaced STOP with a call to SETERR
@
text
@d62 1
a62 1
          X(1) = ONE
@


1.2
log
@Add two new testcases with source terms
Reformatted using toolpack
@
text
@d24 2
a25 1
      INTEGER IVERT
d37 2
d175 6
a180 1
  666 CALL SETERR(22HADVECT - INVALID ICASE,22,666,1)
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
      IMPLICIT NONE
d10 1
a11 2
      INTEGER IELEM,NDIM,NOFVERT
      DOUBLE PRECISION FSOU
a12 1
      DOUBLE PRECISION 	X(*),U(NOFVERT),XYZ(NDIM,NOFVERT)
a13 2
      DOUBLE PRECISION 	SUM,DUM
      INTEGER JVERT
d15 21
d37 1
d39 1
a39 1
      GOTO(200,300)NDIM-1
d41 1
a41 1
c	2D scalar testcases
d47 1
a47 1
      IF    (ICASE .EQ. 1)THEN
d50 9
a58 7
      ELSEIF(ICASE .EQ. 2)THEN
         SUM = 0.00
      DO 3 JVERT = 1 , NOFVERT
    3    SUM = SUM + U( JVERT )
         X(1) = SUM / NOFVERT
         X(2) = ONE
      ELSEIF(ICASE .EQ. 3)THEN
d61 2
a62 1
      ELSEIF(ICASE .EQ. 4)THEN
d66 1
a66 1
C     source term 4*x^2 - 2*y^2
d68 66
a133 9
      sum=0.d0 
      dum=0.d0 
      DO 5 JVERT = 1 , NOFVERT
         SUM = SUM + XYZ( 1 , JVERT )
         DUM = DUM + XYZ( 2 , JVERT )
    5 continue
      sum = 4.d0 * sum / nofvert
      dum =-2.d0 * dum / nofvert
      FSOU = sum+dum
d136 1
d138 1
d141 1
a141 1
c	3D scalar testcases
d147 1
a147 1
      IF(ICASE .EQ. 1)THEN
d154 7
a160 7
      ELSEIF(ICASE .EQ. 2)THEN
         SUM = ZERO
         DUM = ZERO
      DO 1 JVERT = 1 , NOFVERT
         SUM = SUM + XYZ( 3 , JVERT )
    1    DUM = DUM - XYZ( 1 , JVERT )
          X(1) = SUM / NOFVERT
d162 1
a162 1
          X(3) = DUM / NOFVERT
d165 2
a166 1
          GOTO 666 
d171 1
@
