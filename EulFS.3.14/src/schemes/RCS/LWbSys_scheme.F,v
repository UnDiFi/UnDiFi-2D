head	1.12;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.12
	release3_13_0:1.12
	release3_12_0:1.12
	release3_11_0:1.12
	release3_10_0:1.12
	release3_8_0:1.12
	release3_7_1:1.12
	release3_7_0:1.11
	release3_4_5:1.11
	release3_4_4:1.11
	release3_4_3:1.11
	release3_4_2:1.11
	release3_4_1:1.11
	release3_4_0:1.11
	release3_3_5:1.11
	release3_3_4:1.10
	release3_3_3:1.10
	release3_3_2:1.10
	release3_3_1:1.10
	release3_3_0:1.10;
locks; strict;
comment	@c @;


1.12
date	2020.03.28.09.49.28;	author abonfi;	state Exp;
branches;
next	1.11;

1.11
date	2013.04.27.09.33.46;	author abonfi;	state Exp;
branches;
next	1.10;

1.10
date	2013.01.24.07.46.33;	author abonfi;	state Exp;
branches;
next	1.9;

1.9
date	2009.06.11.09.08.07;	author abonfi;	state Exp;
branches;
next	1.8;

1.8
date	2004.12.20.14.53.54;	author aldo;	state Exp;
branches;
next	1.7;

1.7
date	2004.12.20.14.49.22;	author aldo;	state Exp;
branches;
next	1.6;

1.6
date	2004.12.20.14.16.14;	author aldo;	state Exp;
branches;
next	1.5;

1.5
date	2002.09.13.08.34.53;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.10.09.37.00;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.24.10.22.32;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	2001.09.21.07.17.49;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.24.15.06.55;	author aldo;	state Exp;
branches;
next	;


desc
@Edwin version of the LW scheme, with the matrix (\sum K_j)^{-1}
POST multiplying K_i^+
@


1.12
log
@renamed subroutine call
@
text
@!> \copydoc LDASYS_SCHEME()
      SUBROUTINE LW2SYS_SCHEME(MATRIXSPLITTER,W,NODRES,TSTEP,BETA,STIFC,
     +                         NORDER,NDOF,NOFVERT,VCN,NDIM,DFGHDU,
     +                         LDJ,CELRES,SOURCE,IELEM,
     &                         MATRIX_ASSEMBLY)
C
C     $Id: LWbSys_scheme.F,v 1.11 2013/04/27 09:33:46 abonfi Exp abonfi $
C
C
C     Only one of the following can be defined:
C
#define FSPL_USE_PETSC_KERNELS
CCCC#define FSPL_USE_LAPACK
C
C
C NORDER                is the order of the system to solve for, i.e.
C                       the order of the matrix dFGHdU.
C FrstEq                is the first among the NDOF variable which
C                       appears into the system of order NORDER.
C IELEM                 is the current element.
C dFGHdU(LDJ,*) is the Jacobian Matrix of the system.
C LDJ                   is the leading dimension of dFGHdU.
C W                     stores by columns the NORDER variables of the
C                       NOFVERT vertices.
C LNODRES               is the leading dimension of W.
C CELRES[1:2*NORDER]    OUT Real
C CELRES[1:NORDER]      stores the residual computed by the Matrix scheme
C                       as \sum K_j U_j (explicit part of the scheme)
C CELRES[NORDER+1:2*NORDER]
C                       stores the residual computed by the Matrix scheme
C                       as \sum C_{ij} U_j (implicit part of the scheme)
C MatrixSplitter        is the procedure used to compute the eigenvector
C                       decomposition of the matrix dFGHdU.
C TSTEP(NDOF,*)         is the nodal timestep.
C Nodres(NDOF,*)        is the nodal residual.
C
C
C
C This routine computes the LW system scheme on one tetrahedron
C
C
      IMPLICIT NONE
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
      INCLUDE 'flags.com'
C
C
cnag  EXTERNAL F07ADF,F07AEF,DSCAL
C
C
C
C     .. Parameters ..
      DOUBLE PRECISION CFLELEM
      PARAMETER(CFLELEM=HALF*4.D0/3.D0)
C
#ifdef FSPL_USE_LAPACK
      INTEGER LWORK
      PARAMETER(LWORK=2*MAXNOFVAR)
      INTEGER IPIV(LWORK)
      DOUBLE PRECISION WORK(LWORK)
#endif
C
C     ..
C     .. Scalar Arguments ..
      DOUBLE PRECISION VOLUME
      INTEGER IELEM,LDJ,NDIM,NOFVERT,NDOF,NORDER
      LOGICAL MATRIX_ASSEMBLY
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION DFGHDU(LDJ,*),NODRES(NDOF,NOFVERT),
     +                 TSTEP(NDOF,NOFVERT),SOURCE(*),
     +                 CELRES(*),BETA(*),
     4                 STIFC(NDOF,NDOF,NOFVERT,NOFVERT),
     +                 VCN(NDIM,NOFVERT),W(NDOF,NOFVERT)
C     ..
C     .. Subroutine Arguments ..
      EXTERNAL MATRIXSPLITTER
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION GALERKIN,TEMP,HELP
      INTEGER I,INFO,IROW,IVAR,IVERT,JVERT,J,N,M,ORDSQR,IADD,JADD
      LOGICAL LFLAG
C     ..
C     .. Local Arrays ..
      DOUBLE PRECISION SUM_K_ABS(MAX_NOFVAR_SQR),
     + KNEG(MAX_NOFVAR_SQR*MAXNOFVERT),KPOS(MAX_NOFVAR_SQR*MAXNOFVERT),
     + K(MAX_NOFVAR_SQR*MAXNOFVERT),
     + VRIGHT(MAX_NOFVAR_SQR),VLEFT(MAX_NOFVAR_SQR),
     & WKSP2(MAXNOFVAR,MAXNOFVAR),
     & WNEG(MAXNOFVAR),WPOS(MAXNOFVAR),WR(MAXNOFVAR)
C     ..
C     .. External Functions ..
      LOGICAL NULLMAT,UNITMAT
      EXTERNAL NULLMAT,UNITMAT
C     ..
C     .. External Subroutines ..
      EXTERNAL DGEMM,DGEMV,DGETRF,DGETRS,DINIT,DSCAL,MATSUM,R8Mat_Print
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC DABS
C     ..
C     .. Statement Functions ..
      INTEGER IDX
      IDX(I,J,N,M) = (((J-1)*M+I-1)*N*N)+1
C     ..
      ORDSQR = NORDER*NORDER
      DO 3 I = 1,2*NORDER
          CELRES(I) = ZERO
    3 CONTINUE
C
C --------------- Debugging code starts here ---------------
C
      IF (ICHECK.NE.0) THEN
          CALL DINIT(MAX_NOFVAR_SQR,ZERO,WKSP2,1)
      ENDIF
C
C --------------- Debugging code ends here ---------------
C
      GALERKIN = ONE / NOFVERT
C
      CALL DINIT(ORDSQR,ZERO,SUM_K_ABS,1)
C
C     Loop over the vertices of the element ..
C
      DO 10 IVERT = 1,NOFVERT
C
C     The matrix IS split into its positive and negative parts
C
          IADD = ORDSQR*(IVERT-1)+1
          CALL MATRIXSPLITTER(IELEM,NDIM,NORDER,VCN(1,IVERT),DFGHDU,LDJ,
     +                        K(IADD),KPOS(IADD),KNEG(IADD),
     &                        VLEFT,VRIGHT,NORDER,
     +                        WR,WPOS,WNEG,.TRUE.)
C
C       The absolute value jacobians are accumulated in SUM_K_ABS ..
C
          CALL DAXPY(ORDSQR, ONE,KPOS(IADD),1,SUM_K_ABS,1)
          CALL DAXPY(ORDSQR,MONE,KNEG(IADD),1,SUM_K_ABS,1)
C
C       Timestep ..
C
          DO 32 IVAR = 1,NORDER
              TSTEP(IVAR,IVERT) = TSTEP(IVAR,IVERT) + WPOS(IVAR)
   32     CONTINUE
C
C       the residual is computed as Sum_j K(j) * U(j) ..
C
         CALL DGEMV('NoTranspose',NORDER,NORDER,ONE,K(IADD),NORDER,
     +   W(1,IVERT),1,ONE,CELRES,1)
C
   10 CONTINUE ! end loop over vertices
C
#ifdef FSPL_USE_LAPACK
C
C       .. LU factorization of SUM_K_ABS ..
C
cnag  CALL F07ADF(NORDER,NORDER,SUM_K_ABS,NORDER,IPIV,INFO)
      CALL DGETRF(NORDER,NORDER,SUM_K_ABS,NORDER,IPIV,INFO)
!         CALL R8Mat_Print('General',' ',NORDER,NORDER,SUM_K_ABS,
!    +                 NORDER,' sum |K| matrix ',INFO)
!         pause
C
      IF (INFO.GT.0) THEN
          WRITE (6,FMT=99999) IELEM
99999     FORMAT (5X,'Matrix SUM_K_ABS is singular in IELEM = ',I6)
          CALL R8Mat_Print('General',' ',NORDER,NORDER,SUM_K_ABS,
     +                 NORDER,' sum |K| matrix ',INFO)
      DO 19 IVERT = 1,NOFVERT
          IADD = ORDSQR*(IVERT-1)+1
          CALL R8Mat_Print('General',' ',NORDER,NORDER,K(IADD),
     +                 NORDER,' sum |K| matrix ',INFO)
   19 CONTINUE
          STOP
      ENDIF
C
C     compute the inverse of (\sum K^+)
C
      CALL DGETRI(NORDER,SUM_K_ABS,NORDER,IPIV,WORK,LWORK,INFO)
C
      IF (INFO.GT.0) THEN
          WRITE (6,FMT=99998) INFO
99998     FORMAT (5X,'DGETRI HAS RETURNED INFO = ',I6)
          STOP
      ENDIF
C
#endif
#ifdef FSPL_USE_PETSC_KERNELS
      CALL SOLVEN( NORDER, SUM_K_ABS )
#endif
C       .. Loop again over all vertices to compute the distribution
C               matrices (overwritten on KPOS)  ..
C
      DO 30 IVERT = 1,NOFVERT
C
C     compute the distribution matrices as B_i =  K^+ (\sum K^+)^{-1}
C
         IADD = ORDSQR*(IVERT-1)+1
         CALL DGEMM('No Transpose','No Transpose',NORDER,NORDER,NORDER,
     +              ONE,K(IADD),NORDER,SUM_K_ABS,NORDER,ZERO,
     +              BETA(IADD),NORDER)
C
C        .. add the Galerkin term
C
         CALL DSCAL(ORDSQR,CFLELEM,BETA(IADD),1)
         DO 33 IROW = 1, NORDER
               JADD = IADD + (IROW-1)*NORDER + IROW -1
               BETA(JADD) = GALERKIN + BETA(JADD)
   33    CONTINUE
!         CALL R8Mat_Print('General',' ',NORDER,NORDER,BETA(IADD),
!    +                 NORDER,'  |B| matrix ',INFO)
C
C       NODRES(IVERT) = -BETA(IVERT)*CELRES
C
         CALL DGEMV('NoTranspose',NORDER,NORDER,MONE,BETA(IADD),NORDER,
     +   CELRES,1,ZERO,NODRES(1,IVERT),1) ! should be + SOURCE
C
C --------------- Debugging code starts here ---------------
C
          IF (ICHECK.NE.0) THEN
C
C       .. Sum up the distribution matrices ..
C
              CALL MATSUM(WKSP2,MAXNOFVAR,BETA(IADD),NORDER,
     +        NORDER,NORDER)
C
          ENDIF
C
C --------------- Debugging code ends here ---------------
C
C
   30 CONTINUE ! End loop over vertices
C
C --------------- Debugging code starts here ---------------
C
      include 'test1.inc'
C
C --------------- Debugging code ends here ---------------
C
      IF (MATRIX_ASSEMBLY) THEN
C
C     .. Assembling the element stiffness matrix for the LDA scheme ..
C
         DO 31 JVERT = 1,NOFVERT
C
             JADD = IDX(JVERT,1,NORDER,NOFVERT)
             DO 31 IVERT = 1,NOFVERT
C
C     ... C_{ij}^{LW} = - Beta_i^{+} K_j
C         Beta_i^{+} had been written in BETA
C
               IADD = IDX(IVERT,1,NORDER,NOFVERT)
               CALL DGEMM('N','N',NORDER,NORDER,NORDER,MONE,BETA(IADD),
     +         NORDER,K(JADD),NORDER,ZERO,STIFC(1,1,IVERT,JVERT),NDOF)
C
   31    CONTINUE
C
C --------------- Debugging code starts here ---------------
C
      include 'test2.inc'
      ENDIF
C
C --------------- Debugging code ends here ---------------
C
C
C --------------- Time accurate stuff starts here ---------------
C
      RETURN

      END
@


1.11
log
@the contribution to the timestep is now added
separately for each variable
@
text
@d7 1
a7 1
C     $Id: LWbSys_scheme.F,v 1.10 2013/01/24 07:46:33 abonfi Exp abonfi $
d97 1
a97 1
      EXTERNAL DGEMM,DGEMV,DGETRF,DGETRS,DINIT,DSCAL,MATSUM,X04CAF
d159 1
a159 1
!         CALL X04CAF('General',' ',NORDER,NORDER,SUM_K_ABS,
d166 1
a166 1
          CALL X04CAF('General',' ',NORDER,NORDER,SUM_K_ABS,
d170 1
a170 1
          CALL X04CAF('General',' ',NORDER,NORDER,K(IADD),
d209 1
a209 1
!         CALL X04CAF('General',' ',NORDER,NORDER,BETA(IADD),
@


1.10
log
@cosmetic changes and preliminary Doxygen documentation
@
text
@d7 1
a7 1
C     $Id: LWbSys_scheme.F,v 1.9 2009/06/11 09:08:07 abonfi Exp abonfi $
d143 1
a143 1
              TSTEP(1,IVERT) = TSTEP(1,IVERT) + WPOS(IVAR)
@


1.9
log
@added BETA among the arguments of the call
@
text
@d1 1
d7 1
a7 1
C     $Id: LWbSys_scheme.F,v 1.8 2004/12/20 14:53:54 aldo Exp aldo $
@


1.8
log
@bug fixed when using LAPACK
@
text
@d1 1
a1 1
      SUBROUTINE LW2SYS_SCHEME(MATRIXSPLITTER,W,NODRES,TSTEP,STIFC,
d3 1
a3 1
     +                         LDJ,CELRES,SOURCE,VOLUME,IELEM,
d6 1
a6 1
C     $Id: LWbSys_scheme.F,v 1.7 2004/12/20 14:49:22 aldo Exp aldo $
d11 2
a12 2
CCCC#define FSPL_USE_PETSC_KERNELS
#define FSPL_USE_LAPACK
d43 1
a51 2
      DOUBLE PRECISION ZERO,HALF,ONE,MONE
      PARAMETER (ZERO=0.D0,HALF=0.5D0,ONE=1.D0,MONE=-1.d0)
d66 1
a66 1
      LOGICAL MATRIX_ASSEMBLY,LTIME
d71 2
a72 1
     +                 CELRES(*),STIFC(NDOF,NDOF,NOFVERT,NOFVERT),
d86 1
a86 1
     + BETA(MAX_NOFVAR_SQR*MAXNOFVERT),K(MAX_NOFVAR_SQR*MAXNOFVERT),
d89 1
a89 2
     & WNEG(MAXNOFVAR),WPOS(MAXNOFVAR),WR(MAXNOFVAR),
     & MassMat(MAX_NOFVAR_SQR*MAX_NOFVERT_SQR)
a127 1
          IADD = IDX(IVERT,1,NORDER,NOFVERT)
d134 1
a134 1
C       The positive jacobians are accumulated in SUM_K_ABS ..
a195 1
         IADD = IDX(IVERT,1,NORDER,NOFVERT)
a265 1
C     include 'massmat.f'
@


1.7
log
@uses PETSc kernels
@
text
@d6 1
a6 1
C     $Id: LWbSys_scheme.F,v 1.9 2004/08/27 11:56:14 aldo Exp $
d11 2
a12 2
#define FSPL_USE_PETSC_KERNELS
CCCC#define FSPL_USE_LAPACK
d60 1
a60 1
      DOUBLE PRECISION WORK(LWORK),
@


1.6
log
@add source term
@
text
@d3 2
a4 1
     +                         LDJ,CELRES,SOURCE,IELEM,TIMEIMPL)
d6 7
a12 1
C     $Id:
d22 1
a22 1
C W                  stores by columns the NORDER variables of the
d24 3
a26 3
C LNODRES                   is the leading dimension of W.
C CELRES[1:2*NORDER]  OUT Real
C CELRES[1:NORDER]    stores the residual computed by the Matrix scheme
d33 2
a34 2
C TSTEP                 is the nodal timestep.
C DU(NDOF,*)               is the nodal residual.
d38 1
a38 1
C This routine computes the LDA system scheme on one tetrahedron
a45 12
C
C
C
C
C
C
C
C
C
C
C
C
d51 2
a52 2
      DOUBLE PRECISION ZERO,HALF,ONE
      PARAMETER (ZERO=0.D0,HALF=0.5D0,ONE=1.D0)
d56 1
d59 3
d65 1
d67 1
a67 1
      LOGICAL TIMEIMPL
d79 2
a80 2
      DOUBLE PRECISION GALERKIN,SUM,TEMP
      INTEGER I,INFO,IROW,IVAR,IVERT,J,JCOL
d84 7
a90 8
      DOUBLE PRECISION K(MAXNOFVAR,MAXNOFVAR,VMAX),
     +KNEG(MAXNOFVAR,MAXNOFVAR,VMAX),WORK(LWORK),
     +BETA(MAXNOFVAR,MAXNOFVAR,VMAX),KPOS(MAXNOFVAR,MAXNOFVAR,VMAX),
     +SUM_K_ABS(MAXNOFVAR,MAXNOFVAR),VLEFT(MAXNOFVAR,MAXNOFVAR),
     +VRIGHT(MAXNOFVAR,MAXNOFVAR),WKSP1(MAXNOFVAR),
     +WKSP2(MAXNOFVAR,MAXNOFVAR),WNEG(MAXNOFVAR),WPOS(MAXNOFVAR),
     +WR(MAXNOFVAR)
      INTEGER IPIV(MAXNOFVAR)
d102 5
a106 4
      DO 1 J = 1,MAXNOFVAR
          DO 1 I = 1,MAXNOFVAR
              SUM_K_ABS(I,J) = ZERO
    1 CONTINUE
d114 1
a114 2
          CALL DINIT(MAXNOFVAR,ZERO,WKSP1,1)
          CALL DINIT(MAXNOFVAR*MAXNOFVAR,ZERO,WKSP2,1)
d121 2
d127 1
a127 2
C     The matrix is NOT split
C
d129 2
d132 2
a133 2
     +                        K(1,1,IVERT),KPOS(1,1,IVERT),
     +                        KNEG(1,1,IVERT),VLEFT,VRIGHT,MAXNOFVAR,
d138 2
a139 6
          DO 15 JCOL = 1,NORDER
              DO 15 IROW = 1,NORDER
                  SUM_K_ABS(IROW,JCOL) = SUM_K_ABS(IROW,JCOL) +
     +                                   KPOS(IROW,JCOL,IVERT)-
     +                                   KNEG(IROW,JCOL,IVERT)
   15     CONTINUE
d147 1
a147 1
C       the residual is computes as Sum_j K(j) * U(j) ..
d149 2
a150 2
cblas    CALL DGEMV('N',NORDER,NORDER,ONE,K,MAXNOFVAR,W(1,IVERT),1,
cblas+   ONE,CELRES,1)
d152 1
a152 7
          DO 11 I = 1,NORDER
              SUM = ZERO
              DO 13 J = 1,NORDER
                  SUM = SUM + K(I,J,IVERT)*W(J,IVERT)
   13         CONTINUE
              CELRES(I) = CELRES(I) + SUM
   11     CONTINUE
d154 1
a154 1
   10 CONTINUE
d158 5
a162 3
cnag  CALL F07ADF(NORDER,NORDER,SUM_K_ABS,MAXNOFVAR,IPIV,INFO)
      CALL DGETRF(NORDER,NORDER,SUM_K_ABS,MAXNOFVAR,IPIV,INFO)

d167 7
d177 1
a177 1
C     compute the inverse of \sum K^+
d179 1
a179 1
      CALL DGETRI(NORDER,SUM_K_ABS,MAXNOFVAR,IPIV,WORK,LWORK,INFO)
d187 4
a190 1
C
d198 2
d201 2
a202 2
     +              ONE,K(1,1,IVERT),MAXNOFVAR,SUM_K_ABS,MAXNOFVAR,ZERO,
     +              BETA(1,1,IVERT),MAXNOFVAR)
d206 4
a209 5
         DO 33 JCOL = 1, NORDER
            DO 33 IROW = 1, NORDER
               BETA(IROW,JCOL,IVERT) = CFLELEM * BETA(IROW,JCOL,IVERT)
               IF( IROW.EQ.JCOL )BETA(IROW,JCOL,IVERT) = GALERKIN +
     +                           BETA(IROW,JCOL,IVERT) 
d211 2
d216 2
a217 10
cblas    CALL DGEMV('N',NORDER,NORDER,ONE,KPOS(1,1,IVERT),MAXNOFVAR,CELRES,
cblas+   1,ZERO,WKSP,1)
C
          DO 23 I = 1,NORDER
              SUM = ZERO
              DO 21 J = 1,NORDER
                  SUM = SUM + BETA(I,J,IVERT)*(CELRES(J)+SOURCE(J))
   21         CONTINUE
              NODRES(I,IVERT) = -SUM
   23     CONTINUE
d225 1
a225 1
              CALL MATSUM(WKSP2,MAXNOFVAR,BETA(1,1,IVERT),MAXNOFVAR,
d233 1
a233 1
   30 CONTINUE
d241 1
a241 1
      IF (.NOT.TIMEIMPL) RETURN
d245 1
a245 1
      DO 31 J = 1,NOFVERT
d247 2
a248 1
          DO 31 I = 1,NOFVERT
d253 3
a255 2
              CALL DGEMM('N','N',NORDER,NORDER,NORDER,-ONE,BETA(1,1,I),
     +        MAXNOFVAR,K(1,1,J),MAXNOFVAR,ZERO,STIFC(1,1,I,J),NDOF)
d257 1
a257 1
   31 CONTINUE
d262 1
d266 4
@


1.5
log
@off 72nd column
@
text
@d2 2
a3 2
     +                         NORDER,NOFVAR,NOFVERT,VCN,NDIM,DFGHDU,
     +                         LDJ,CELRES,IELEM,TIMEIMPL)
d10 1
a10 1
C FrstEq                is the first among the NOFVAR variable which
d27 1
a27 1
C DU(NOFVAR,*)               is the nodal residual.
a53 2
cblas CALL DSCAL(NORDER,ZERO,CELRES,1)! residual = - fluctuation
cblas CALL DSCAL(NMAX*NMAX,ZERO,SUM_K_ABS,1)! sum of the positive k's
d62 1
a62 1
      PARAMETER(LWORK=2*NMAX)
d66 1
a66 1
      INTEGER IELEM,LDJ,NDIM,NOFVERT,NOFVAR,NORDER
d70 4
a73 4
      DOUBLE PRECISION DFGHDU(LDJ,*),NODRES(NOFVAR,NOFVERT),
     +                 TSTEP(NOFVAR,NOFVERT),
     +                 CELRES(*),STIFC(NOFVAR,NOFVAR,NOFVERT,NOFVERT),
     +                 VCN(NDIM,NOFVERT),W(NOFVAR,NOFVERT)
d84 8
a91 5
      DOUBLE PRECISION K(NMAX,NMAX,4),KNEG(NMAX,NMAX,4),WORK(LWORK),
     +BETA(NMAX,NMAX,VMAX),KPOS(NMAX,NMAX,4),SUM_K_ABS(NMAX,NMAX),
     +                 VLEFT(NMAX,NMAX),VRIGHT(NMAX,NMAX),WKSP1(NMAX),
     +                 WKSP2(NMAX,NMAX),WNEG(NMAX),WPOS(NMAX),WR(NMAX)
      INTEGER IPIV(NMAX)
d103 2
a104 2
      DO 1 J = 1,NMAX
          DO 1 I = 1,NMAX
d114 2
a115 2
          CALL DINIT(NMAX,ZERO,WKSP1,1)
          CALL DINIT(NMAX*NMAX,ZERO,WKSP2,1)
d131 2
a132 2
     +                        KNEG(1,1,IVERT),VLEFT,VRIGHT,NMAX,WR,WPOS,
     +                        WNEG,.TRUE.)
d151 1
a151 1
cblas    CALL DGEMV('N',NORDER,NORDER,ONE,K,NMAX,W(1,IVERT),1,
d166 3
a168 2
cnag  CALL F07ADF(NORDER,NORDER,SUM_K_ABS,NMAX,IPIV,INFO)
      CALL DGETRF(NORDER,NORDER,SUM_K_ABS,NMAX,IPIV,INFO)
d178 1
a178 1
      CALL DGETRI(NORDER,SUM_K_ABS,NMAX,IPIV,WORK,LWORK,INFO)
d195 2
a196 2
     +              ONE,K(1,1,IVERT),NMAX,SUM_K_ABS,NMAX,ZERO,
     +              BETA(1,1,IVERT),NMAX)
d209 1
a209 1
cblas    CALL DGEMV('N',NORDER,NORDER,ONE,KPOS(1,1,IVERT),NMAX,CELRES,
d215 1
a215 1
                  SUM = SUM + BETA(I,J,IVERT)*CELRES(J)
d226 2
a227 1
              CALL MATSUM(WKSP2,NMAX,BETA(1,1,IVERT),NMAX,NORDER,NORDER)
d238 1
a238 1
      include 'test1.f'
d254 1
a254 1
     +                   NMAX,K(1,1,J),NMAX,ZERO,STIFC(1,1,I,J),NOFVAR)
d260 1
a260 1
      include 'test2.f'
@


1.4
log
@the timestep array is now dimensioned NOFVAR x NOFVERT
@
text
@d1 3
a3 3
      SUBROUTINE LW2SYS_SCHEME(MATRIXSPLITTER,W,NODRES,TSTEP,STIFC,NORDER,
     +                         NOFVAR,NOFVERT,VCN,NDIM,DFGHDU,LDJ,
     +                         CELRES,IELEM,TIMEIMPL)
@


1.3
log
@towards the implementation of a coupled approach
for RANS: the number of variables NOFVAR can now
be different from the number of mean flow equations
(hereafter called NOFEQN); NOFVAR has been add among the
arguments of the call
@
text
@d1 1
a1 1
      SUBROUTINE LW2SYS_SCHEME(MATRIXSPLITTER,W,NODRES,DT,STIFC,NORDER,
d26 1
a26 1
C DT                 is the nodal timestep.
d72 2
a73 1
      DOUBLE PRECISION DFGHDU(LDJ,*),NODRES(NOFVAR,NOFVERT),DT(NOFVERT),
d145 1
a145 1
              DT(IVERT) = DT(IVERT) + WPOS(IVAR)
@


1.2
log
@LW scheme for systems in VKI style: the inverse of K
postmultiplies the distribution matrices
@
text
@d1 3
a3 3
      SUBROUTINE LW2SYS_SCHEME(MATRIXSPLITTER,W,DQ,DT,STIFC,NORDER,
     +                         NOFVERT,VCN,NDIM,DFGHDU,LDJ,RESIDUAL,
     +                         IELEM,TIMEIMPL)
d17 3
a19 3
C LDQ                   is the leading dimension of W.
C RESIDUAL[1:2*NORDER]  OUT Real
C RESIDUAL[1:NORDER]    stores the residual computed by the Matrix scheme
d21 1
a21 1
C RESIDUAL[NORDER+1:2*NORDER]
d54 1
a54 1
cblas CALL DSCAL(NORDER,ZERO,RESIDUAL,1)! residual = - fluctuation
d68 1
a68 1
      INTEGER IELEM,LDJ,NDIM,NOFVERT,NORDER
d72 3
a74 3
      DOUBLE PRECISION DFGHDU(LDJ,*),DQ(NORDER,NOFVERT),DT(NOFVERT),
     +                 RESIDUAL(*),STIFC(NORDER,NORDER,NOFVERT,NOFVERT),
     +                 VCN(NDIM,NOFVERT),W(NORDER,NOFVERT)
d106 1
a106 1
          RESIDUAL(I) = ZERO
d150 1
a150 1
cblas+   ONE,RESIDUAL,1)
d157 1
a157 1
              RESIDUAL(I) = RESIDUAL(I) + SUM
d204 1
a204 1
C       DQ(IVERT) = -BETA(IVERT)*RESIDUAL
d206 1
a206 1
cblas    CALL DGEMV('N',NORDER,NORDER,ONE,KPOS(1,1,IVERT),NMAX,RESIDUAL,
d212 1
a212 1
                  SUM = SUM + BETA(I,J,IVERT)*RESIDUAL(J)
d214 1
a214 1
              DQ(I,IVERT) = -SUM
d234 1
a234 12
      IF (ICHECK.NE.0) THEN
C
C       .. Check that the BETA's sum up to zero ..
C
          LFLAG = UNITMAT(WKSP2,NORDER,NORDER,NMAX,1.D-14)
          IF (.NOT.LFLAG) THEN
              WRITE (6,FMT=*) 'Element # ',IELEM
              CALL X04CAF('G',' ',NORDER,NORDER,WKSP2,NMAX,
     +                    'Sum of the distribution matrices',INFO)
              PAUSE

          ENDIF
a235 2
      ENDIF
C
d250 1
a250 1
     +                   NMAX,K(1,1,J),NMAX,ZERO,STIFC(1,1,I,J),NORDER)
a253 2
      IF (ICHECK.EQ.0) RETURN
C
d256 1
a256 57
      GOTO 69
C
C        print the element stiffness matrix
C
      DO 65 J = 1,NOFVERT
          DO 65 I = 1,NOFVERT
              WRITE (6,FMT=*) 'IELEM = ',IELEM,'I,J = ',I,J
              CALL X04CAF('General',' ',NORDER,NORDER,STIFC(1,1,I,J),
     +                    NORDER,' Element stiffness matrix ',INFO)
   65 CONTINUE
      PAUSE

   69 CONTINUE
C
C     ... Check that \sum_{j} C_{i,j} = 0
C
      DO 61 I = 1,NOFVERT
          CALL DINIT(NMAX*NMAX,ZERO,WKSP2,1)
          DO 63 J = 1,NOFVERT
              CALL MATSUM(WKSP2,NMAX,STIFC(1,1,I,J),NORDER,NORDER,
     +                    NORDER)
   63     CONTINUE
          LFLAG = NULLMAT(WKSP2,NORDER,NORDER,NMAX,1.D-14)
          IF (.NOT.LFLAG) THEN
              WRITE (6,FMT=*) IELEM,I
              CALL X04CAF('General',' ',NORDER,NORDER,WKSP2,NMAX,
     +                   ' Sum_j C_{i,j} equals the null matrix ? (LDA)'
     +                    ,INFO)
              PAUSE

          ENDIF

   61 CONTINUE
C
C*PL*ERROR* Comment line too long
C*PL*ERROR* Comment line too long
C     ... RESIDUAL[NORDER+1:2*NORDER] stores the residual in the "V" variable
C         computed as - \sum_{i,j} C_{i,j} U_j
C
      DO 59 J = 1,NOFVERT
          DO 59 I = 1,NOFVERT
              CALL DGEMV('N',NORDER,NORDER,-ONE,STIFC(1,1,I,J),NORDER,
     +                   W(1,J),1,ONE,RESIDUAL(NORDER+1),1)
   59 CONTINUE
C
      LFLAG = .FALSE.
      DO 57 IVAR = 1,NORDER
          TEMP = RESIDUAL(IVAR) - RESIDUAL(NORDER+IVAR)
          IF (DABS(TEMP).GT.1.D-14) LFLAG = .TRUE.
   57 CONTINUE
      IF (LFLAG .EQV. .TRUE.) THEN
          WRITE (6,FMT=*) 'LW system scheme, elem ',IELEM
          WRITE (6,FMT=*) 'var #     implicit        "true"'
          DO 55 IVAR = 1,NORDER
              WRITE (6,FMT=*) IVAR,RESIDUAL(NORDER+IVAR),RESIDUAL(IVAR)
   55     CONTINUE
      ENDIF
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
      SUBROUTINE LWbSYS_SCHEME(MATRIXSPLITTER,W,DQ,DT,STIFC,NORDER,
d5 1
a7 1
C
d62 4
d85 1
a85 1
      DOUBLE PRECISION K(NMAX,NMAX,4),KNEG(NMAX,NMAX,4),
d130 1
a130 1
     +                        WNEG,.false.)
d136 3
a138 4
caldo             SUM_K_ABS(IROW,JCOL) = SUM_K_ABS(IROW,JCOL) +
caldo+                                   KPOS(IROW,JCOL,IVERT)-
caldo+                                   KNEG(IROW,JCOL,IVERT)
                  BETA(IROW,JCOL,IVERT) = K(IROW,JCOL,IVERT)
a168 1

d170 10
a179 1

a180 1

d183 1
d189 1
a189 3
C
C       .. solution ..
C
d191 3
a193 2
          CALL DGETRS('N',NORDER,NORDER,SUM_K_ABS,NMAX,IPIV,
     +                BETA(1,1,IVERT),NMAX,INFO)
@
