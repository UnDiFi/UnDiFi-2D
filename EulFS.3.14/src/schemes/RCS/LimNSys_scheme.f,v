head	1.1;
access;
symbols;
locks; strict;
comment	@c @;


1.1
date	2009.01.02.09.32.58;	author abonfi;	state Exp;
branches;
next	;


desc
@Schema N limitato implementato da Pietro e Pino
@


1.1
log
@Initial revision
@
text
@      SUBROUTINE LIMNSYS_SCHEME(MATRIXSPLITTER,W,DQ,DT,STIFC,NORDER,
     +                       NOFVERT,VCN,NDIM,DFGHDU,LDJ,RESIDUAL,IELEM,
     +                       TIMEIMPL)
C
C
C
C
C NORDER                IN Integer
C                       is the order of the system to solve for, i.e.
C                       the order of the matrix DFGHDU.
C IELEM                 IN Integer
C                       is the current element.
C DFGHDU(LDJ,*) is the Jacobian Matrix of the system.
C LDJ                   IN Integer
C                       is the leading dimension of DFGHDU.
C W(NORDER:NOFVERT)     stores by columns the NORDER variables of the
C                       NOFVERT vertices.
C LDQ                   IN Integer
C                       is the leading dimension of Q.
C RESIDUAL[1:2*NORDER]  OUT Real
C*PL*ERROR* Comment line too long
C*PL*ERROR* Comment line too long
C RESIDUAL[1:NORDER]    stores the residual computed by the Matrix scheme
C                       as \sum K_j U_j (explicit part of the scheme)
C RESIDUAL[NORDER+1:2*NORDER]
C*PL*ERROR* Comment line too long
C*PL*ERROR* Comment line too long
C                       stores the residual computed by the Matrix scheme
C                       as \sum C_{ij} U_j (implicit part of the scheme)
C MatrixSplitter        is the procedure used to compute the eigenvector
C                       decomposition of the matrix DFGHDU.
C DT                 is the nodal timestep.
C DQ(NORDER,NOFVERT)    is the nodal residual.
C
C
C
C
C This routine computes the system N scheme on one tetrahedron
C
      include 'paramt.h'
      include 'flags.com'
C
C
C
C
C
C
C
C
C
C
C
C
cnag  EXTERNAL F07ADF,F07AEF,DSCAL
C
C
cblas CALL DSCAL(NORDER,ZERO,RESIDUAL,1)! residual = - fluctuation
cblas CALL DSCAL(NMAX,ZERO,UNEG,1)! Inflow point
cblas CALL DSCAL(NMAX*NMAX,ZERO,SUM_K_NEG,1)! sum of the negative k's
C
C     .. Parameters ..
      DOUBLE PRECISION ZERO,ONE
      PARAMETER (ZERO=0.D0,ONE=1.D0)
C     ..
C     .. Scalar Arguments ..
      INTEGER IELEM,LDJ,NDIM,NOFVERT,NORDER
      LOGICAL TIMEIMPL
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION DFGHDU(LDJ,*),DQ(NORDER,NOFVERT),DT(NOFVERT),
     +                 RESIDUAL(*),STIFC(NORDER,NORDER,NOFVERT,NOFVERT),
     +                 VCN(NDIM,NOFVERT),W(NORDER,NOFVERT)
C     ..
C     .. Subroutine Arguments ..
      EXTERNAL MATRIXSPLITTER
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION SUM,TEMP
      DOUBLE PRECISION sum_m,sum_p,prod
      INTEGER I,INFO,IROW,IVAR,IVERT,J,JCOL,NOFVAR
      INTEGER IVTMP
      LOGICAL LFLAG
C     ..
C     .. Local Arrays ..
      DOUBLE PRECISION KMAT(NMAX,NMAX),KNEG(NMAX,NMAX,VMAX),
     +                 KPOS(NMAX,NMAX,VMAX),SUM_K_NEG(NMAX,NMAX),
     +                 UNEG(NMAX),VLEFT(NMAX,NMAX),VRIGHT(NMAX,NMAX),
     +                 WKSP1(NMAX),WKSP2(NMAX),WKSP3(NMAX,NMAX),
     +                 WNEG(NMAX),WPOS(NMAX),WR(NMAX)
      DOUBLE PRECISION DQstar(5,4),erre(5,4)
      INTEGER IPIV(NMAX)
C     ..
C     .. External Functions ..
      DOUBLE PRECISION DNRM2
      DOUBLE PRECISION MINMOD
      LOGICAL NULLMAT,UNITMAT
      EXTERNAL DNRM2,NULLMAT,UNITMAT
C     ..
C     .. External Subroutines ..
      EXTERNAL DAXPY,DGEMM,DGEMV,DGETRF,DGETRS,DINIT,DSCAL,MATSUB,
     +         MATSUM,X04CAF
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC DABS
C     ..
      DO 1 J = 1,NMAX
          UNEG(J) = ZERO
          DO 1 I = 1,NMAX
              SUM_K_NEG(I,J) = ZERO
    1 CONTINUE
      DO 3 I = 1,2*NORDER
          RESIDUAL(I) = ZERO
    3 CONTINUE
C
C --------------- Debugging code starts here ---------------
C
      IF (ICHECK.NE.0) THEN
          CALL DINIT(NMAX,ZERO,WKSP1,1)
          CALL DINIT(NMAX,ZERO,WKSP2,1)
          CALL DINIT(NMAX**2,ZERO,WKSP3,1)
      ENDIF
C
C --------------- Debugging code ends here ---------------
C
      DO 10 IVERT = 1,NOFVERT
C
C
C    The matrix is split into its positive and negative parts
C
C    Numerically or Analitically ..
C
          CALL MATRIXSPLITTER(IELEM,NDIM,NORDER,VCN(1,IVERT),DFGHDU,LDJ,
     +                        KMAT,KPOS(1,1,IVERT),KNEG(1,1,IVERT),
     +                        VLEFT,VRIGHT,NMAX,WR,WPOS,WNEG,.TRUE.)
C
C    The negative jacobians are accumulated in SUM_K_NEG ..
C
          DO 15 JCOL = 1,NORDER
              DO 15 IROW = 1,NORDER
                  SUM_K_NEG(IROW,JCOL) = SUM_K_NEG(IROW,JCOL) +
     +                                   KNEG(IROW,JCOL,IVERT)
   15     CONTINUE
C
C    Computes KNEG(IVERT)*U(IVERT) and adds it to UNEG ..
C
cblas    CALL DGEMV('N',NORDER,NORDER,ONE,KNEG(1,1,IVERT),NMAX,W
cblas+   (1,IVERT),1,ONE,UNEG,1)
C
          DO 11 I = 1,NORDER
              SUM = ZERO
              DO 13 J = 1,NORDER
                  SUM = SUM + KNEG(I,J,IVERT)*W(J,IVERT)
   13         CONTINUE
              UNEG(I) = UNEG(I) + SUM
   11     CONTINUE
C
C
C --------------- Debugging code starts here ---------------
C
          IF (ICHECK.NE.0) THEN
C
C    the residual is computes as Sum_j K(j) * U(j) ..
C
              CALL DGEMV('N',NORDER,NORDER,ONE,KMAT,NMAX,W(1,IVERT),1,
     +                   ONE,RESIDUAL,1)
          ENDIF
C
C --------------- Debugging code ends here ---------------
C
C    Timestep ..
C
          DO 34 I = 1,NORDER
              DT(IVERT) = DT(IVERT) + WPOS(I)
   34     CONTINUE
C
   10 CONTINUE
C
C    Finds the generalized inflow point
C       solving [\sum_j K_j^-] U_{-} = \sum_j K_j^- U_j
C
C    LU factorization ..
C
cnag  CALL F07ADF(NORDER,NORDER,SUM_K_NEG,NMAX,IPIV,INFO)
      CALL DGETRF(NORDER,NORDER,SUM_K_NEG,NMAX,IPIV,INFO)
C
      IF (INFO.GT.0) THEN
          WRITE (6,FMT=99999) IELEM

99999     FORMAT (5X,'Matrix SUM_K_NEG is singular in IELEM = ',I6)
*
          DO 9 IVERT = 1,NOFVERT
              WRITE (6,FMT=*) '    Vertice # ',IVERT
              CALL X04CAF('G',' ',NORDER,NORDER,KPOS(1,1,IVERT),NMAX,
     +                    'K(+) ',INFO)
              CALL X04CAF('G',' ',NORDER,NORDER,KNEG(1,1,IVERT),NMAX,
     +                    'K(-) ',INFO)
    9     CONTINUE
          CALL X04CAF('G',' ',NORDER,NORDER,SUM_K_NEG,NMAX,
     +                'SUM_j K(-) ',INFO)
          STOP

      ENDIF
C
C    solution ..
C
cnag  CALL F07AEF('N',NORDER,1,SUM_K_NEG,NMAX,IPIV,UNEG,NMAX,INFO)
      CALL DGETRS('N',NORDER,1,SUM_K_NEG,NMAX,IPIV,UNEG,NMAX,INFO)
C
C Loops over nodes
C
      DO 30 IVERT = 1,NOFVERT
C
          DO 35 IVAR = 1,NORDER
              W(IVAR,IVERT) = W(IVAR,IVERT) - UNEG(IVAR)
   35     CONTINUE
C
C    DQ[INODE] = - KPOS(IVERT)*[U(IVERT)-UNEG]
C
cblas    CALL DGEMV('N',NORDER,NORDER,ONE,KPOS(1,1,IVERT),NMAX, W
cblas+   (1,IVERT),1,ZERO,WKSP,1)
C
          DO 23 IVAR = 1,NORDER
              SUM = ZERO
              DO 21 J = 1,NORDER
                  SUM = SUM + KPOS(IVAR,J,IVERT)*W(J,IVERT)
   21         CONTINUE
              DQ(IVAR,IVERT) = -SUM
   23     CONTINUE

C
C --------------- Debugging code starts here ---------------
C
          IF (ICHECK.NE.0) THEN
C
C    The residual is computed as Sum_j KPOS(j) * [U(j)-Uin]
C       and stored in WKSP1
C
              CALL DAXPY(NORDER,-ONE,DQ(1,IVERT),1,WKSP1,1)
          ENDIF
C
C --------------- Debugging code ends here ---------------
C
   30 CONTINUE

c Nonlinear scheme:

          DO  IVAR = 1,NORDER
          DO IVERT = 1,NOFVERT
          sum_m = 0.d0
          sum_p = DQ(IVAR,IVERT)
          DO IVTMP = 1,NOFVERT
          if (IVTMP.ne.IVERT) then
          prod=DQ(IVAR,IVERT)*DQ(IVAR,IVTMP)
          if (prod.ge.0.) then
          sum_p = sum_p + DQ(IVAR,IVTMP)
          else
          sum_m = sum_m - DQ(IVAR,IVTMP)
          end if
          end if
          END DO
          if(dabs(sum_p).gt.1.d-12) then
          erre(ivar,ivert) = sum_m/sum_p
          else
          erre(ivar,ivert) = 0.d0
          end if
          END DO
          END DO

          DO  IVAR = 1,NORDER
          DO IVERT = 1,NOFVERT
          DQstar(IVAR,IVERT) = DQ(IVAR,IVERT)
          DO IVTMP = 1,NOFVERT
          if (IVTMP.ne.IVERT) then
          DQstar(IVAR,IVERT) = DQstar(IVAR,IVERT) + 
     .    MINMOD(erre(ivar,ivtmp),1.d0)*DQ(IVAR,IVTMP)
          end if
          END DO
          END DO
          END DO

          sum_p = 0.d0
          sum_m = 0.d0
          DO IVERT = 1,NOFVERT
          sum_p = sum_p + DQstar(3,IVERT)
          sum_m = sum_m + DQ(3,IVERT)
          END DO

              IF (DABS(sum_p-sum_m).GT.1.D-10) THEN
       write(6,*) "check",sum_p,sum_m
              ENDIF

          DO IVERT = 1,NOFVERT
          DO  IVAR = 1,NORDER
          DQ(IVAR,IVERT) = DQstar(IVAR,IVERT)
          END DO
          END DO
C
C --------------- Debugging code starts here ---------------
C
      IF (ICHECK.NE.0) THEN
C
C     WKSP1 is the residual computed as \sum \Phi_j^{N}
C     it is compared with RESIDUAL[1:NORDER] = - \sum K_j U_j
C
          DO 12 IVAR = 1,NORDER
              TEMP = WKSP1(IVAR) - RESIDUAL(IVAR)
              IF (DABS(TEMP).GT.1.D-15) THEN
                  WRITE (6,FMT=*) 'N system scheme, elem ',IELEM,
     +              ' var # ',IVAR,' computed ',WKSP1(IVAR),' "true" ',
     +              RESIDUAL(IVAR)
              ENDIF

   12     CONTINUE

      ENDIF
C
C --------------- Debugging code ends here ---------------
C
      IF (.NOT.TIMEIMPL) RETURN
C
C     Assembling the element stiffness matrix for the N scheme ..
C
      DO 31 J = 1,NOFVERT
C
C     Solve [\sum_K^{-}] Delta_j^{-} = K_j^{-}
C         Delta_j^{-} is overwritten onto K_j^{-}
C
          CALL DGETRS('N',NORDER,NORDER,SUM_K_NEG,NMAX,IPIV,KNEG(1,1,J),
     +                NMAX,INFO)
C
          DO 31 I = 1,NOFVERT
C
              IF (I.EQ.J) GOTO 31
C
C     C_{ij}^N = K_i^{+} Delta_j^{-} i neq j
C
              CALL DGEMM('N','N',NORDER,NORDER,NORDER,ONE,KPOS(1,1,I),
     +             NMAX,KNEG(1,1,J),NMAX,ZERO,STIFC(1,1,I,J),NORDER)
C
C     C_{ii} = - \sum_{j \neq i} C_{ij}
C                = - K_i^{+} [ \sum_{j \neq i} \Delta_j^- ] ...
C
              CALL MATSUB(STIFC(1,1,I,I),NORDER,STIFC(1,1,I,J),NORDER,
     +                    NORDER,NORDER)
C
   31 CONTINUE
C
C --------------- Debugging code starts here ---------------
C
      IF (ICHECK.NE.0) THEN
C
C        check that \sum_j \Delta_j^- = Identity matrix
C
          CALL DINIT(NMAX**2,ZERO,WKSP3,1)
          DO 14 J = 1,NOFVERT
              CALL MATSUM(WKSP3,NMAX,KNEG(1,1,J),NMAX,NORDER,NORDER)
   14     CONTINUE
          LFLAG = UNITMAT(WKSP3,NORDER,NORDER,NMAX,1.D-14)
          IF (.NOT.LFLAG) THEN
              WRITE (6,FMT=*) IELEM,I
              CALL X04CAF('General',' ',NORDER,NORDER,WKSP3,NMAX,
     +                    ' Sum Delta_j^- equals identity ?',INFO)
              PAUSE

          ENDIF
C
C     Check that \sum_{j} C_{i,j} = 0
C
          DO 16 I = 1,NOFVERT
              CALL DINIT(NMAX*NMAX,ZERO,WKSP3,1)
              DO 17 J = 1,NOFVERT
                  CALL MATSUM(WKSP3,NMAX,STIFC(1,1,I,J),NORDER,NORDER,
     +                        NORDER)
   17         CONTINUE
              LFLAG = NULLMAT(WKSP3,NORDER,NORDER,NMAX,1.D-14)
              IF (.NOT.LFLAG) THEN
                  WRITE (6,FMT=*) IELEM,I
                  CALL X04CAF('General',' ',NORDER,NORDER,WKSP3,NMAX,
     +                        ' Sum_j C_{i,j} equals the null matrix ?',
     +                        INFO)
                  PAUSE

              ENDIF

   16     CONTINUE
C
          GOTO 69
C
C        print the element stiffness matrix
C
          DO 19 J = 1,NOFVERT
              DO 19 I = 1,NOFVERT
                  WRITE (6,FMT=*) 'IELEM = ',IELEM,'I,J = ',I,J
                  CALL X04CAF('General',' ',NOFVAR,NOFVAR,
     +                        STIFC(1,1,I,J),NORDER,
     +                        ' Element stiffness matrix ',INFO)
   19     CONTINUE
          PAUSE

   69     CONTINUE
C
C*PL*ERROR* Comment line too long
C*PL*ERROR* Comment line too long
C     RESIDUAL[NORDER+1:2*NORDER] stores the residual in the "V" variable
C         computed as - \sum_{i,j} C_{i,j} U_j
C
          DO 22 J = 1,NOFVERT
              DO 22 I = 1,NOFVERT
                  CALL DGEMV('N',NORDER,NORDER,-ONE,STIFC(1,1,I,J),
     +                       NORDER,W(1,J),1,ONE,RESIDUAL(NORDER+1),1)
   22     CONTINUE
C
C
C
          LFLAG = .FALSE.
          DO 27 IVAR = 1,NORDER
              TEMP = RESIDUAL(IVAR) - RESIDUAL(NORDER+IVAR)
              IF (DABS(TEMP).GT.1.D-14) LFLAG = .TRUE.
   27     CONTINUE
          IF (LFLAG .EQV. .TRUE.) THEN
              WRITE (6,FMT=*) 'N system scheme, elem ',IELEM
              WRITE (6,FMT=*) 'var #     implicit        "true"'
              DO 25 IVAR = 1,NORDER
                  WRITE (6,FMT=*) IVAR,RESIDUAL(NORDER+IVAR),
     +              RESIDUAL(IVAR)
   25         CONTINUE
          ENDIF
C
      ENDIF
C
C --------------- Debugging code ends here ---------------
C
      RETURN

      END
@
