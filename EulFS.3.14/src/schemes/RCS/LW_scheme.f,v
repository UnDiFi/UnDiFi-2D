head	1.5;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.5
	release3_13_0:1.5
	release3_12_0:1.5
	release3_11_0:1.5
	release3_10_0:1.5
	release3_8_0:1.5
	release3_7_1:1.5
	release3_7_0:1.5
	release3_4_5:1.5
	release3_4_4:1.5
	release3_4_3:1.5
	release3_4_2:1.4
	release3_4_1:1.4
	release3_4_0:1.4
	release3_3_5:1.4
	release3_3_4:1.4
	release3_3_3:1.4
	release3_3_2:1.4
	release3_3_1:1.4
	release3_3_0:1.4;
locks; strict;
comment	@c @;


1.5
date	2013.09.20.11.12.46;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2013.01.24.07.46.33;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.11.09.11.02;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.19.08.17.12;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.24.15.01.46;	author aldo;	state Exp;
branches;
next	;


desc
@scalar Lax-Wendroff type scheme
@


1.5
log
@Added Doxygen documentation
@
text
@!> \par Purpose
!>
!> Computes the UCV scheme for scalar problems on a triangle/tetrahedron. 
!>
!> The UCV scheme is attributed to [Giles et al. Upwind control volumes - A new upwind approach, AIAA 90-0104] (http://arc.aiaa.org/doi/abs/10.2514/6.1990-104)
!>
!> Its Fluctuation Splitting version is attributed to Paillere and described in [De Palma et al. Journal of Computational Physics 208 (2005) 1â€“3](http://dx.doi.org/doi:10.1016/j.jcp.2004.11.023)
!>
!> The UCV scheme is in fact the Lax Wendroff scheme with a particular choice
!> of the elemental time step; the distribution weights are:
!>
!> \f[
!> \beta_i^{UCV} = \left( \frac{1}{d+1} + \frac{2}{3} \frac{ k_{i} }{ \sum_{\ell=1}^{d+1}  |k_{\ell}| }  \right) =
!> \left( \frac{1}{d+1} + \frac{2}{3} \frac{ k_{i} }{ \sum_{\ell=1}^{d+1}  \left( k_{\ell}^{+} - k_{\ell}^{-} \right) } \right)
!> \f]
!> 
!>
!> @@param[in] IELEM the current simplicial element
!> @@param[in] VCN the \c NDIM cartesian component of the inward face normal to all \c NOFVERT vertices, scaled by its measure
!> @@param[in] ADVECTION the \c NDIM cartesian component of the advection speed
!> @@param[out] CELRES the elemental residual
!> @@param[in] SOURCE the volume integral of the elemental source term
!> @@param[in] Q the \c NOFVERT values of the dependent variable
!> @@param[in,out] DT elemental contribution to the (inverse of the) time step
!> @@param[in,out] NODRES is updated by summing the signals sent to each of the \c NOFVERT vertices of cell \c IELEM
!> @@param[out] BETA the distribution matrices
!> @@param[out] STIFC the elemental contribution to the implicit matrix (computed only if MATRIX_ASSEMBLY is true): \f$C_{ij} = -\beta_i k_j\f$.
!> @@param[in] NDIM is the dimension of the space
!> @@param[out] NOFVERT is number of vertices of the simplicial elements (= NDIM+1)
!> @@param[in] MATRIX_ASSEMBLY when set == .TRUE. the \c STIFC matrix will be assembled
!> \warning Why 2/3 here? Check with Gee's report: it might not be ok in 3D
!> \author $Author: abonfi $
!> \version $Revision: 1.8 $
!> \date $Date: 2013/08/20 14:48:46 $
!>
      SUBROUTINE LW_SCHEME(IELEM,VCN,ADVECTION,CELRES,SOURCE,Q,DT,
     +                     NODRES,BETA,STIFC,NDIM,NOFVERT,
     3                     MATRIX_ASSEMBLY)
C
C     $Id: LW_scheme.f,v 1.4 2013/01/24 07:46:33 abonfi Exp abonfi $
C
C     .. Parameters ..
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
      DOUBLE PRECISION CFLELEM
      PARAMETER (CFLELEM=TWO/3.d0)
C     ..
C     .. Scalar Arguments ..
      DOUBLE PRECISION CELRES,SOURCE
      INTEGER IELEM,NDIM,NOFVERT
      LOGICAL MATRIX_ASSEMBLY
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION ADVECTION(NDIM),DT(NOFVERT),NODRES(NOFVERT),
     +                 Q(*),BETA(NOFVERT),STIFC(NOFVERT,NOFVERT),
     3                 VCN(NDIM,NOFVERT)
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION KNEGINV,S,HELP,KSUM
      INTEGER I,IROW,IVERT,J,JCOL,NEGI,POSI
C     ..
C     .. Local Arrays ..
      DOUBLE PRECISION K(MAXNOFVERT)
C     ..
C     .. External Functions ..
      DOUBLE PRECISION DDOT
      EXTERNAL DDOT
C     ..
      CELRES = ZERO
      KSUM = ZERO
C
      DO 10 IVERT = 1,NOFVERT
C
C Dotting advection speed with the face normal
C
          HELP = DDOT(NDIM,VCN(1,IVERT),1,ADVECTION,1)
          K(IVERT) = HELP/NDIM
C
          CELRES = CELRES + Q(IVERT)*K(IVERT)
C
          KSUM = KSUM + ABS(K(IVERT))
C
   10 CONTINUE
C
      CELRES = CELRES + SOURCE
C
C Loops over all nodes
C
      HELP = ONE/REAL(NOFVERT)
      KSUM = CFLELEM/KSUM
      DO 20 I = 1,NOFVERT
          IF(K(I).GT.ZERO)DT(I) = DT(I) + K(I)
          BETA(I) = HELP + KSUM*K(I)
          NODRES(I) = -BETA(I)*CELRES
   20 CONTINUE
C
C
      IF (MATRIX_ASSEMBLY) THEN
          DO 40 J = 1,NOFVERT
              DO 40 I = 1,NOFVERT
                  STIFC(I,J) = -BETA(I)*K(J)
   40     CONTINUE
      ENDIF
C
      RETURN

      END
@


1.4
log
@cosmetic changes and preliminary Doxygen documentation
@
text
@d1 35
a35 1
!> \copydoc LDA_SCHEME()
d40 1
a40 1
C     $Id: LW_scheme.f,v 1.3 2009/06/11 09:11:02 abonfi Exp abonfi $
a46 5
Caldo
Caldo Why 2/3 here? Check with Gee's report
Caldo This scheme is precisely the one addressed
Caldo as UCV of De Palma et al JCP 208 (2005) 1-33
Caldo
@


1.3
log
@added BETA among the arguments of the call
@
text
@d1 1
d6 1
a6 1
C     $Id: LW_scheme.f,v 1.2 2008/04/19 08:17:12 abonfi Exp abonfi $
a10 2
!     INCLUDE 'time.h'
!     INCLUDE 'time.com'
@


1.2
log
@comments added
@
text
@d2 2
a3 1
     +                      NODRES,STIFC,NDIM,NOFVERT,PICARD)
d5 1
a5 1
C     $Id:$
d8 6
a13 2
      DOUBLE PRECISION ONE,ZERO,CFLELEM
      PARAMETER (ONE=1.D0,ZERO=0.D0,CFLELEM=2.d0/3.d0)
d23 1
a23 1
      LOGICAL PICARD
d27 2
a28 2
     +                 Q(NOFVERT),STIFC(NOFVERT,NOFVERT),
     +                 VCN(NDIM,NOFVERT)
d31 1
a31 1
      DOUBLE PRECISION KNEGINV,S,SUM,KSUM
d35 1
a35 1
      DOUBLE PRECISION K(4),BETA(4)
d48 2
a49 2
          SUM = DDOT(NDIM,VCN(1,IVERT),1,ADVECTION,1)
          K(IVERT) = SUM/NDIM
d61 1
a61 1
      SUM = ONE/REAL(NOFVERT)
d65 1
a65 1
          BETA(I) = SUM + KSUM*K(I)
d70 1
a70 2
C
      IF (PICARD) THEN
@


1.1
log
@Initial revision
@
text
@d4 1
d9 5
@
