head	1.9;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.9
	release3_13_0:1.9
	release3_12_0:1.9
	release3_11_0:1.9
	release3_10_0:1.9
	release3_8_0:1.9
	release3_7_1:1.9
	release3_7_0:1.8
	release3_4_5:1.8
	release3_4_4:1.8
	release3_4_3:1.8
	release3_4_2:1.8
	release3_4_1:1.8
	release3_4_0:1.8
	release3_3_5:1.8
	release3_3_4:1.7
	release3_3_3:1.7
	release3_3_2:1.7
	release3_3_1:1.7
	release3_3_0:1.7;
locks; strict;
comment	@c @;


1.9
date	2020.03.28.09.49.28;	author abonfi;	state Exp;
branches;
next	1.8;

1.8
date	2013.04.27.09.33.46;	author abonfi;	state Exp;
branches;
next	1.7;

1.7
date	2011.03.30.09.12.25;	author abonfi;	state Exp;
branches;
next	1.6;

1.6
date	2009.06.11.09.09.00;	author abonfi;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.02.09.14.54;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2004.09.06.09.24.28;	author aldo;	state Exp;
branches;
next	1.3;

1.3
date	2002.09.10.09.37.00;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.24.10.22.32;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2001.11.29.08.57.40;	author abonfi;	state Exp;
branches;
next	;


desc
@an LDA scheme using loop unrolling or LAPACK
@


1.9
log
@renamed subroutine call
@
text
@      SUBROUTINE LDAS_FAST(MATRIXSPLITTER,W,NODRES,TSTEP,BETA,STIFC,
     +                     NORDER,NDOF,NOFVERT,VCN,NDIM,DFGHDU,LDJ,
     +                     CELRES,SOURCE,IELEM,MATRIX_ASSEMBLY)
C
C     $Id: LDAS_fast.F,v 1.8 2013/04/27 09:33:46 abonfi Exp abonfi $
C
C#define BLAS_LAPACK
C#define DEBUG
#define UNROLL
C
C
C NORDER                is the order of the system to solve for, i.e.
C                       the order of the matrix dFGHdU.
C FrstEq                is the first among the NDOF variable which
C                       appears into the system of order NORDER.
C IELEM                 is the current element.
C dFGHdU(LDJ,*) is the Jacobian Matrix of the system.
C LDJ                   is the leading dimension of dFGHdU.
C W                  stores by columns the NORDER variables of the
C                       NOFVERT vertices.
C LNODRES                   is the leading dimension of W.
C CELRES[1:2*NDOF]  OUT Real
C CELRES[1:NDOF]    stores the residual computed by the Matrix scheme
C                       as \sum K_j U_j (explicit part of the scheme)
C CELRES[NDOF+1:2*NDOF]
C                       stores the residual computed by the Matrix scheme
C                       as \sum C_{ij} U_j (implicit part of the scheme)
C MatrixSplitter        is the procedure used to compute the eigenvector
C                       decomposition of the matrix dFGHdU.
C TSTEP                 is the nodal timestep.
C DU(NDOF,*)          is the nodal residual.
C
C
C
C This routine computes the LDA system scheme on one tetrahedron
C
C
      IMPLICIT NONE
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
      INCLUDE 'flags.com'
C
C
cnag  EXTERNAL F07ADF,F07AEF,DSCAL
C
C
C
C     .. Parameters ..
C     ..
C     .. Scalar Arguments ..
      INTEGER IELEM,LDJ,NDIM,NOFVERT,NDOF,NORDER
      LOGICAL MATRIX_ASSEMBLY
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION DFGHDU(LDJ,*),NODRES(NDOF,NOFVERT),
     +                 TSTEP(NDOF,NOFVERT),SOURCE(*),
     +                 CELRES(*),BETA(*),
     4                 STIFC(NDOF,NDOF,NOFVERT,NOFVERT),
     +                 VCN(NDIM,NOFVERT),W(NDOF,NOFVERT)
C     ..
C     .. Subroutine Arguments ..
      EXTERNAL MATRIXSPLITTER
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION SUM,TEMP
      INTEGER I,INFO,IROW,IVAR,IVERT,J,JCOL,IADD,JADD,ORDSQR
      LOGICAL LFLAG
C     ..
C     .. Local Arrays ..
      DOUBLE PRECISION K(MAXNOFVAR*MAXNOFVAR*VMAX),
     +KNEG(MAXNOFVAR*MAXNOFVAR*VMAX),
     +SUM_K_POS(MAXNOFVAR*MAXNOFVAR),VLEFT(MAXNOFVAR*MAXNOFVAR),
     +VRIGHT(MAXNOFVAR*MAXNOFVAR),WKSP1(MAXNOFVAR),
     +WKSP2(MAXNOFVAR,MAXNOFVAR),WNEG(MAXNOFVAR),
     +WPOS(MAXNOFVAR),WR(MAXNOFVAR),WORK(MAXNOFVAR)
      EQUIVALENCE(WORK(1),WPOS(1))
      INTEGER IPIV(MAXNOFVAR)
C     ..
C     .. External Functions ..
      LOGICAL NULLMAT,UNITMAT
      EXTERNAL NULLMAT,UNITMAT
C     ..
C     .. External Subroutines ..
      EXTERNAL DGEMM,DGEMV,DGETRF,DGETRS,DINIT,DSCAL,MATSUM,R8Mat_Print
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC DABS
C     ..
      ORDSQR = NORDER*NORDER
      CALL DINIT(ORDSQR,ZERO,SUM_K_POS,1)
      DO 3 I = 1,2*NDOF
          CELRES(I) = ZERO
    3 CONTINUE
C
C --------------- Debugging code starts here ---------------
C
#ifdef DEBUG
      IF (ICHECK.NE.0) THEN
          CALL DINIT(MAXNOFVAR,ZERO,WKSP1,1)
          CALL DINIT(MAXNOFVAR*MAXNOFVAR,ZERO,WKSP2,1)
      ENDIF
#endif
C
C --------------- Debugging code ends here ---------------
C
C
C       .. Loop over the vertices of the element ..
C
      DO 10 IVERT = 1,NOFVERT
C
C       .. The matrix is split into its positive and negative parts
C
C       Numerically or Analitically ..
C
          IADD = (IVERT-1)*ORDSQR+1
          CALL MATRIXSPLITTER(IELEM,NDIM,NORDER,VCN(1,IVERT),DFGHDU,LDJ,
     +                       K(IADD),BETA(IADD),KNEG(IADD),VLEFT,VRIGHT,
     +                       NORDER,WR,WPOS,WNEG,.TRUE.)
C
C       The positive jacobians are accumulated in SUM_K_POS ..
C
          CALL DAXPY(ORDSQR,ONE,BETA(IADD),1,SUM_K_POS,1)
C
C       Timestep ..
C
          DO 32 IVAR = 1,NORDER
              TSTEP(IVAR,IVERT) = TSTEP(IVAR,IVERT) + WPOS(IVAR)
   32     CONTINUE
C
C       the residual is computes as Sum_j K(j) * U(j) ..
C
#ifdef BLAS_LAPACK
         CALL DGEMV('N',NORDER,NORDER,ONE,K(IADD),NORDER,
     +              W(1,IVERT),1,ONE,CELRES,1)
#else
         CALL MY_GEMV('N',NORDER,NORDER,ONE,K(IADD),NORDER,
     +              W(1,IVERT),1,ONE,CELRES,1)
#endif
C
C  add the source term
C
   10 CONTINUE
      DO 14 IVAR = 1,NORDER
         WORK(IVAR) = CELRES(IVAR) + SOURCE(IVAR)
   14 CONTINUE
C
C       .. LU factorization of SUM_K_POS ..
C
#ifdef BLAS_LAPACK
      CALL DGETRF(NORDER,NORDER,SUM_K_POS,NORDER,IPIV,INFO)
#else
#ifdef UNROLL
      CALL xxDECO(SUM_K_POS,NORDER)
#else
      CALL LUDECO(SUM_K_POS,NORDER)
#endif
#endif
C
C       .. Loop again over all vertices to compute the distribution
C               matrices (overwritten on BETA)  ..
C
      DO 30 IVERT = 1,NOFVERT
C
C       .. solution ..
C
          IADD = (IVERT-1)*ORDSQR+1
#ifdef BLAS_LAPACK
          CALL DGETRS('N',NORDER,NORDER,SUM_K_POS,NORDER,IPIV,
     +                BETA(IADD),NORDER,INFO)
#else
CCC       DO 7 J = 1,NORDER
CCC          JADD = IADD + (J-1)* NORDER
CCC          CALL xxSOLV(SUM_K_POS,BETA(JADD),BETA(JADD),NORDER)
CCC 7     CONTINUE
#ifdef UNROLL
          CALL MLUSOLX(SUM_K_POS,BETA(IADD),BETA(IADD),NORDER)
#else
          CALL MLUSOL(SUM_K_POS,BETA(IADD),BETA(IADD),NORDER)
#endif
#endif
C
C         NODRES(IVERT) = -BETA(IVERT)*CELRES
C
#ifdef BLAS_LAPACK
          CALL DGEMV('N',NORDER,NORDER,-ONE,BETA(IADD),NORDER,WORK,
     +                1,ZERO,NODRES(1,IVERT),1)
#else
          CALL MY_GEMV('N',NORDER,NORDER,-ONE,BETA(IADD),NORDER,
     +                WORK,1,ZERO,NODRES(1,IVERT),1)
#endif
C
C
C --------------- Debugging code starts here ---------------
C
#ifdef DEBUG
          IF (ICHECK.NE.0) THEN
C
C       .. Sum up the distribution matrices ..
C
          CALL MATSUM(WKSP2,MAXNOFVAR,BETA(IADD),NORDER,NORDER,NORDER)
C
          ENDIF
#endif
C
C --------------- Debugging code ends here ---------------
C
C
   30 CONTINUE
C
C --------------- Debugging code starts here ---------------
C
      include 'test1.inc'
C
C --------------- Debugging code ends here ---------------
C
      IF (MATRIX_ASSEMBLY) THEN
C
C     .. Assembling the element stiffness matrix for the LDA scheme ..
C
      DO 31 J = 1,NOFVERT
C
          JADD = (J-1)*ORDSQR+1
          DO 31 I = 1,NOFVERT
C
C     ... C_{ij}^{LDA} = - Delta_i^{+} K_j
C         Delta_i^{+} had been overwritten onto BETA
C
              IADD = (I-1)*ORDSQR+1
              CALL DGEMM('N','N',NORDER,NORDER,NORDER,MONE,BETA(IADD),
     +             NORDER,K(JADD),NORDER,ZERO,STIFC(1,1,I,J),NDOF)
C
   31 CONTINUE
      ENDIF
C
C --------------- Debugging code starts here ---------------
C
      include 'test2.inc'
C
C --------------- Debugging code ends here ---------------
C
      RETURN

      END
@


1.8
log
@the contribution to the timestep is now added
separately for each variable
@
text
@d5 1
a5 1
C     $Id: LDAS_fast.F,v 1.7 2011/03/30 09:12:25 abonfi Exp abonfi $
d84 1
a84 1
      EXTERNAL DGEMM,DGEMV,DGETRF,DGETRS,DINIT,DSCAL,MATSUM,X04CAF
@


1.7
log
@minor, cosmetic changes
@
text
@d5 1
a5 1
C     $Id: LDAS_fast.F,v 1.6 2009/06/11 09:09:00 abonfi Exp abonfi $
d127 1
a127 1
              TSTEP(1,IVERT) = TSTEP(1,IVERT) + WPOS(IVAR)
@


1.6
log
@added BETA among the arguments of the call
@
text
@d1 1
a1 1
      SUBROUTINE LDAS_FAST(MATRIXSPLITTER,W,NODRES,TSTEP,KPOS,STIFC,
d5 1
a5 1
C     $Id: LDAS_fast.F,v 1.5 2009/01/02 09:14:54 abonfi Exp abonfi $
d57 1
a57 1
     +                 CELRES(*),KPOS(*),
d117 1
a117 1
     +                       K(IADD),KPOS(IADD),KNEG(IADD),VLEFT,VRIGHT,
d122 1
a122 1
          CALL DAXPY(ORDSQR,ONE,KPOS(IADD),1,SUM_K_POS,1)
d160 1
a160 1
C               matrices (overwritten on KPOS)  ..
d169 1
a169 1
     +                KPOS(IADD),NORDER,INFO)
d173 1
a173 1
CCC          CALL xxSOLV(SUM_K_POS,KPOS(JADD),KPOS(JADD),NORDER)
d176 1
a176 1
          CALL MLUSOLX(SUM_K_POS,KPOS(IADD),KPOS(IADD),NORDER)
d178 1
a178 1
          CALL MLUSOL(SUM_K_POS,KPOS(IADD),KPOS(IADD),NORDER)
d185 1
a185 1
          CALL DGEMV('N',NORDER,NORDER,-ONE,KPOS(IADD),NORDER,WORK,
d188 1
a188 1
          CALL MY_GEMV('N',NORDER,NORDER,-ONE,KPOS(IADD),NORDER,
d200 1
a200 1
          CALL MATSUM(WKSP2,MAXNOFVAR,KPOS(IADD),NORDER,NORDER,NORDER)
d226 1
a226 1
C         Delta_i^{+} had been overwritten onto KPOS
d229 1
a229 1
              CALL DGEMM('N','N',NORDER,NORDER,NORDER,MONE,KPOS(IADD),
@


1.5
log
@minor re-formatting
@
text
@d1 3
a3 3
      SUBROUTINE LDAS_FAST(MATRIXSPLITTER,W,NODRES,TSTEP,STIFC,NORDER,
     +                     NDOF,NOFVERT,VCN,NDIM,DFGHDU,LDJ,CELRES,
     +                     SOURCE,IELEM,MATRIX_ASSEMBLY)
d5 1
a5 1
C     $Id: LDAS_fast.F,v 1.4 2004/09/06 09:24:28 aldo Exp aldo $
a41 1
      INCLUDE 'time.com'
d57 2
a58 1
     +                 CELRES(*),STIFC(NDOF,NDOF,NOFVERT,NOFVERT),
d71 1
a71 1
     +KNEG(MAXNOFVAR*MAXNOFVAR*VMAX),KPOS(MAXNOFVAR*MAXNOFVAR*VMAX),
a240 4
      IF(LTIME)THEN
         CALL UNSTEADYS(KPOS,W,NODRES,STIFC,NORDER,NDIM,NOFVERT,
     &                  MATRIX_ASSEMBLY)
      ENDIF
@


1.4
log
@renamed a few variables
@
text
@d3 1
a3 1
     +                     SOURCE,IELEM,TIMEIMPL)
d5 1
a5 1
C     $Id: LDAS_fast.F,v 1.3 2002/09/10 09:37:00 abonfi Exp abonfi $
d8 1
a8 1
#define DEBUG
d40 1
d42 1
a49 2
      DOUBLE PRECISION ZERO,ONE
      PARAMETER (ZERO=0.D0,ONE=1.D0)
d53 1
a53 1
      LOGICAL TIMEIMPL
d216 1
a216 1
      IF (.NOT.TIMEIMPL) RETURN
d229 1
a229 1
              CALL DGEMM('N','N',NORDER,NORDER,NORDER,-ONE,KPOS(IADD),
d233 1
d241 4
@


1.3
log
@the timestep array is now dimensioned NOFVAR x NOFVERT
@
text
@d2 2
a3 2
     +                     NOFVAR,NOFVERT,VCN,NDIM,DFGHDU,LDJ,CELRES,
     +                     IELEM,TIMEIMPL)
d5 1
a5 1
C     $Id: LDAS_fast.F,v 1.2 2002/08/24 10:22:32 abonfi Exp abonfi $
d14 1
a14 1
C FrstEq                is the first among the NOFVAR variable which
d22 2
a23 2
C CELRES[1:2*NOFVAR]  OUT Real
C CELRES[1:NOFVAR]    stores the residual computed by the Matrix scheme
d25 1
a25 1
C CELRES[NOFVAR+1:2*NOFVAR]
d31 1
a31 1
C DU(NOFVAR,*)          is the nodal residual.
a45 2
cblas CALL DSCAL(NORDER,ZERO,CELRES,1)! residual = - fluctuation
cblas CALL DSCAL(NMAX*NMAX,ZERO,SUM_K_POS,1)! sum of the positive k's
d52 1
a52 1
      INTEGER IELEM,LDJ,NDIM,NOFVERT,NOFVAR,NORDER
d56 4
a59 4
      DOUBLE PRECISION DFGHDU(LDJ,*),NODRES(NOFVAR,NOFVERT),
     +                 TSTEP(NOFVAR,NOFVERT),
     +                 CELRES(*),STIFC(NOFVAR,NOFVAR,NOFVERT,NOFVERT),
     +                 VCN(NDIM,NOFVERT),W(NOFVAR,NOFVERT)
d70 8
a77 5
      DOUBLE PRECISION K(NMAX*NMAX*VMAX),KNEG(NMAX*NMAX*VMAX),
     +                 KPOS(NMAX*NMAX*VMAX),SUM_K_POS(NMAX*NMAX),
     +                 VLEFT(NMAX*NMAX),VRIGHT(NMAX*NMAX),WKSP1(NMAX),
     +                 WKSP2(NMAX,NMAX),WNEG(NMAX),WPOS(NMAX),WR(NMAX)
      INTEGER IPIV(NMAX)
d91 1
a91 1
      DO 3 I = 1,2*NOFVAR
d99 2
a100 2
          CALL DINIT(NMAX,ZERO,WKSP1,1)
          CALL DINIT(NMAX*NMAX,ZERO,WKSP2,1)
d140 2
d143 3
d185 1
a185 1
          CALL DGEMV('N',NORDER,NORDER,-ONE,KPOS(IADD),NORDER,CELRES,
d189 1
a189 1
     +                CELRES,1,ZERO,NODRES(1,IVERT),1)
d200 1
a200 1
              CALL MATSUM(WKSP2,NMAX,KPOS(IADD),NORDER,NORDER,NORDER)
d212 1
a212 1
      include 'test1.f'
d230 1
a230 1
     +             NORDER,K(JADD),NORDER,ZERO,STIFC(1,1,I,J),NOFVAR)
a232 7
caldo DO 31 I = 1,NOFVERT
caldo         IADD = (I-1)*ORDSQR+1
caldo         CALL DGEMM('N','N',NORDER,NORDER*NOFVERT,NORDER,-ONE,
caldo+                   KPOS(IADD),NORDER,K(1),NORDER,ZERO,
caldo+                   STIFC(1,1,I,1),NORDER)
c  31 CONTINUE
C
d236 1
a236 1
      include 'test2.f'
@


1.2
log
@towards the implementation of a coupled approach
for RANS: the number of variables NOFVAR can now
be different from the number of mean flow equations
(hereafter called NOFEQN); NOFVAR has been add among the
arguments of the call
@
text
@d1 1
a1 1
      SUBROUTINE LDAS_FAST(MATRIXSPLITTER,W,NODRES,DT,STIFC,NORDER,
d5 1
a5 1
C     $Id: LDAS_fast.F,v 1.1 2001/11/29 08:57:40 abonfi Exp abonfi $
d30 1
a30 1
C DT                 is the nodal timestep.
d58 2
a59 1
      DOUBLE PRECISION DFGHDU(LDJ,*),NODRES(NOFVAR,NOFVERT),DT(NOFVERT),
d126 1
a126 1
              DT(IVERT) = DT(IVERT) + WPOS(IVAR)
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
      SUBROUTINE LDAS_FAST(MATRIXSPLITTER,W,DQ,DT,STIFC,NORDER,
     +                     NOFVERT,VCN,NDIM,DFGHDU,LDJ,RESIDUAL,
d5 1
a5 1
C     $Id:$
d21 3
a23 3
C LDQ                   is the leading dimension of W.
C RESIDUAL[1:2*NORDER]  OUT Real
C RESIDUAL[1:NORDER]    stores the residual computed by the Matrix scheme
d25 1
a25 1
C RESIDUAL[NORDER+1:2*NORDER]
d46 1
a46 1
cblas CALL DSCAL(NORDER,ZERO,RESIDUAL,1)! residual = - fluctuation
d54 1
a54 1
      INTEGER IELEM,LDJ,NDIM,NOFVERT,NORDER
d58 3
a60 3
      DOUBLE PRECISION DFGHDU(LDJ,*),DQ(NORDER,NOFVERT),DT(NOFVERT),
     +                 RESIDUAL(*),STIFC(NORDER,NORDER,NOFVERT,NOFVERT),
     +                 VCN(NDIM,NOFVERT),W(NORDER,NOFVERT)
d89 2
a90 2
      DO 3 I = 1,2*NORDER
          RESIDUAL(I) = ZERO
d132 1
a132 1
     +              W(1,IVERT),1,ONE,RESIDUAL,1)
d135 1
a135 1
     +              W(1,IVERT),1,ONE,RESIDUAL,1)
d175 1
a175 1
C         DQ(IVERT) = -BETA(IVERT)*RESIDUAL
d178 2
a179 2
          CALL DGEMV('N',NORDER,NORDER,-ONE,KPOS(IADD),NORDER,RESIDUAL,
     +                1,ZERO,DQ(1,IVERT),1)
d182 1
a182 1
     +                RESIDUAL,1,ZERO,DQ(1,IVERT),1)
d205 1
a205 13
#ifdef DEBUG
      IF (ICHECK.NE.0) THEN
C
C       .. Check that the BETA's sum up to zero ..
C
          LFLAG = UNITMAT(WKSP2,NORDER,NORDER,NMAX,1.D-14)
          IF (.NOT.LFLAG) THEN
              WRITE (6,FMT=*) 'Element # ',IELEM
              CALL X04CAF('G',' ',NORDER,NORDER,WKSP2,NMAX,
     +                    'Sum of the distribution matrices',INFO)
              PAUSE

          ENDIF
a206 3
      ENDIF
#endif
C
d223 1
a223 1
     +             NORDER,K(JADD),NORDER,ZERO,STIFC(1,1,I,J),NORDER)
a232 1
      IF (ICHECK.EQ.0) RETURN
d236 1
a236 57
#ifdef DEBUG
      GOTO 69
C
C        print the element stiffness matrix
C
      DO 65 J = 1,NOFVERT
          DO 65 I = 1,NOFVERT
              WRITE (6,FMT=*) 'IELEM = ',IELEM,'I,J = ',I,J
              CALL X04CAF('General',' ',NORDER,NORDER,STIFC(1,1,I,J),
     +                    NORDER,' Element stiffness matrix ',INFO)
   65 CONTINUE
      PAUSE

   69 CONTINUE
C
C     ... Check that \sum_{j} C_{i,j} = 0
C
      DO 61 I = 1,NOFVERT
          CALL DINIT(NMAX*NMAX,ZERO,WKSP2,1)
          DO 63 J = 1,NOFVERT
              CALL MATSUM(WKSP2,NMAX,STIFC(1,1,I,J),NORDER,NORDER,
     +                    NORDER)
   63     CONTINUE
          LFLAG = NULLMAT(WKSP2,NORDER,NORDER,NMAX,1.D-14)
          IF (.NOT.LFLAG) THEN
              WRITE (6,FMT=*) IELEM,I
              CALL X04CAF('General',' ',NORDER,NORDER,WKSP2,NMAX,
     +                   ' Sum_j C_{i,j} equals the null matrix ? (LDA)'
     +                    ,INFO)
              PAUSE

          ENDIF

   61 CONTINUE
C
C     ... RESIDUAL[NORDER+1:2*NORDER] stores the residual in 
C         the "V" variable computed as - \sum_{i,j} C_{i,j} U_j
C
      DO 59 J = 1,NOFVERT
          DO 59 I = 1,NOFVERT
              CALL DGEMV('N',NORDER,NORDER,-ONE,STIFC(1,1,I,J),NORDER,
     +                   W(1,J),1,ONE,RESIDUAL(NORDER+1),1)
   59 CONTINUE
C
      LFLAG = .FALSE.
      DO 57 IVAR = 1,NORDER
          TEMP = RESIDUAL(IVAR) - RESIDUAL(NORDER+IVAR)
          IF (DABS(TEMP).GT.1.D-14) LFLAG = .TRUE.
   57 CONTINUE
      IF (LFLAG .EQV. .TRUE.) THEN
          WRITE (6,FMT=*) 'LDA system scheme, elem ',IELEM
          WRITE (6,FMT=*) 'var #     implicit        "true"'
          DO 55 IVAR = 1,NORDER
              WRITE (6,FMT=*) IVAR,RESIDUAL(NORDER+IVAR),RESIDUAL(IVAR)
   55     CONTINUE
      ENDIF
#endif
@
