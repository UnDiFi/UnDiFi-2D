head	1.3;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.3
	release3_13_0:1.3
	release3_12_0:1.3
	release3_11_0:1.3
	release3_10_0:1.3
	release3_8_0:1.3
	release3_7_1:1.3
	release3_7_0:1.3
	release3_4_5:1.3
	release3_4_4:1.3
	release3_4_3:1.3
	release3_4_2:1.3
	release3_4_1:1.3
	release3_4_0:1.3
	release3_3_5:1.3
	release3_3_4:1.3
	release3_3_3:1.3
	release3_3_2:1.3
	release3_3_1:1.3
	release3_3_0:1.3;
locks; strict;
comment	@c @;


1.3
date	2013.01.24.07.46.33;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	2009.04.17.06.36.16;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2000.03.24.15.06.55;	author aldo;	state Exp;
branches;
next	;


desc
@N scheme (scalar)
@


1.3
log
@cosmetic changes and preliminary Doxygen documentation
@
text
@!> \brief Computes the N scheme for scalar problems on a triangle/tetrahedron
!> \f[
!> \phi_i^{N} = - \left( \sum_{\ell=1}^{d+1} k_{\ell}^+ \right)
!! \delta_i^+ \left( u_i - u_- \right) = - k_i^+ \left( u_i - u_- \right)
!> \f]
!> 
!> \copydetails LDA_SCHEME()
      SUBROUTINE N_SCHEME(IELEM,VCN,ADVECTION,CELRES,SOURCE,Q,DT,NODRES,
     &                    BETA,STIFC,NDIM,NOFVERT,MATRIX_ASSEMBLY)
C
C
C This routine computes the N scheme on one tetrahedron
C
C this is a FORTRAN implementation of the original
C C version by G. Bourgois
C
C
      IMPLICIT NONE
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
C
C
C
C     .. Parameters ..
C     ..
C     .. Scalar Arguments ..
      DOUBLE PRECISION CELRES,SOURCE
      INTEGER IELEM,NDIM,NOFVERT
      LOGICAL MATRIX_ASSEMBLY
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION ADVECTION(NDIM),BETA(NOFVERT),STIFC(NOFVERT,NOFVE
     &RT),DT(NOFVERT),NODRES(NOFVERT),Q(NOFVERT),VCN(NDIM,NOFVERT)
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION KNEGINV,KPOS,S,UIN
      INTEGER I,IFAIL,IROW,J,JCOL,NEGI,POSI
C     ..
C     .. Local Arrays ..
      DOUBLE PRECISION K(MAXNOFVERT)
      INTEGER POS(MAXNOFVERT)
C     ..
C     .. External Functions ..
      DOUBLE PRECISION DDOT
      EXTERNAL DDOT
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC DABS
C     ..
C
      IF (SOURCE.NE.0.D0) then
                 write(6,*)source
                 CALL SETERR(
     +           31HN SCHEME - NON ZERO SOURCE TERM 
     +                          ,31,999,2)
      endif
C
      POSI = 0
      NEGI = NOFVERT + 1
      CELRES = ZERO
      KPOS = ZERO
      UIN = ZERO
C
C Compute the advection vector
C
      DO 10 I = 1,NOFVERT
C
C Dotting the advection speed with normal
C
          K(I) = DDOT(NDIM,VCN(1,I),1,ADVECTION,1)/NDIM
c
          CELRES = CELRES + Q(I)*K(I)
c
          NODRES(I) = ZERO
c
          IF (K(I).GT.ZERO) THEN
              POSI = POSI + 1
              POS(POSI) = I
              KPOS = KPOS + K(I)

          ELSE
              NEGI = NEGI - 1
              POS(NEGI) = I
              UIN = UIN - K(I)*Q(I)
          ENDIF

   10 CONTINUE
C
      IF (DABS(KPOS).LE.1.D-15) RETURN
      UIN = UIN/KPOS
C
C Loops over downstream nodes
C
      DO 20 I = 1,POSI
          J = POS(I)
          S = K(J)* (Q(J)-UIN)
          NODRES(J) = -S
          DT(J) = DT(J) + K(J)
   20 CONTINUE
C
!     if( posi .EQ. 2 )then
!         s = - nodres(pos(2))/(nodres(pos(1)) +1.d-15)
!     else 
!         s = 0.d0
!     endif
!     write(12,*)ielem,s
C
      IF (.NOT.MATRIX_ASSEMBLY) RETURN
      KNEGINV = -ONE/KPOS
C
C     The convection matrix has to be zeroth since in the
C     subsequent loops (28,30) not all vertices are touched
C
      DO 40 J = 1,NOFVERT
          DO 40 I = 1,NOFVERT
              STIFC(I,J) = ZERO
   40 CONTINUE
      DO 30 I = 1,POSI
          IROW = POS(I)
          S = K(IROW)
          DO 28 J = NOFVERT,NEGI,-1
              JCOL = POS(J)
              STIFC(IROW,JCOL) = S*K(JCOL)*KNEGINV
   28     CONTINUE
          STIFC(IROW,IROW) = -S
   30 CONTINUE
C
      RETURN

      END
@


1.2
log
@added the distribution matrix among the arguments of the call
@
text
@d1 7
d9 1
a9 1
     +                    BETA,STIFC,NDIM,NOFVERT,PICARD)
a23 10
C
C
C
C
C
C
C
C
C
C
d29 1
a29 1
      LOGICAL PICARD
d32 2
a33 4
      DOUBLE PRECISION ADVECTION(NDIM),BETA(NOFVERT),
     2                 STIFC(NOFVERT,NOFVERT),
     +                 DT(NOFVERT),NODRES(NOFVERT),Q(NOFVERT),
     +                 VCN(NDIM,NOFVERT)
d40 2
a41 2
      DOUBLE PRECISION K(VMAX)
      INTEGER POS(VMAX)
d108 1
a108 1
      IF (.NOT.PICARD) RETURN
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
     +                    CMAT,NDIM,NOFVERT,PICARD)
d13 1
a27 2
      DOUBLE PRECISION ONE,ZERO
      PARAMETER (ONE=1.D0,ZERO=0.D0)
d35 2
a36 1
      DOUBLE PRECISION ADVECTION(NDIM),CMAT(NOFVERT,NOFVERT),
a93 1
C
d106 7
d121 1
a121 1
              CMAT(I,J) = ZERO
d128 1
a128 1
              CMAT(IROW,JCOL) = S*K(JCOL)*KNEGINV
d130 1
a130 1
          CMAT(IROW,IROW) = -S
@
