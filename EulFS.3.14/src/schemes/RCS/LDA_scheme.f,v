head	1.6;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.6
	release3_13_0:1.6
	release3_12_0:1.6
	release3_11_0:1.6
	release3_10_0:1.6
	release3_8_0:1.6
	release3_7_1:1.6
	release3_7_0:1.6
	release3_4_5:1.6
	release3_4_4:1.6
	release3_4_3:1.6
	release3_4_2:1.6
	release3_4_1:1.5
	release3_4_0:1.5
	release3_3_5:1.5
	release3_3_4:1.5
	release3_3_3:1.5
	release3_3_2:1.5
	release3_3_1:1.5
	release3_3_0:1.5;
locks; strict;
comment	@c @;


1.6
date	2013.08.22.15.10.57;	author abonfi;	state Exp;
branches;
next	1.5;

1.5
date	2013.01.24.07.46.33;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2011.03.30.09.14.54;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	2009.06.11.09.04.09;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	99.09.07.16.59.48;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	98.08.11.16.18.39;	author aldo;	state Exp;
branches;
next	;


desc
@Fluctuation splitting scalar Low Diffusion A (LDA) scheme
@


1.6
log
@Improved Doxygen documentation
@
text
@!> \brief Computes the LDA scheme for scalar problems on a triangle/tetrahedron
!> \f[
!> \beta_i^{LDA} = \delta_i^+ = \frac{ k_{i}^{+} }{ \sum_{\ell=1}^{d+1}  k_{\ell}^{+} }
!> \f]
!> 
!>
!> @@param[in] IELEM the current simplicial element
!> @@param[in] VCN the NDIM cartesian component of the inward face normal to all NOFVERT vertices, scaled by its measure
!> @@param[in] ADVECTION the NDIM cartesian component of the advection speed
!> @@param[out] CELRES the elemental residual
!> @@param[in] SOURCE the volume integral of the elemental source term
!> @@param[in] Q the NOFVERT values of the dependent variable
!> @@param[in,out] DT elemental contribution to the (inverse of the) time step
!> @@param[out] NODRES the signals sent to each of the NOFVERT vertices
!> @@param[out] BETA the distribution matrices
!> @@param[out] STIFC the elemental contribution to the implicit matrix (computed only if MATRIX_ASSEMBLY is true)
!> @@param[in] NDIM is the dimension of the space
!> @@param[out] NOFVERT is number of vertices of the simplicial elements (= NDIM+1)
!> @@param[in] MATRIX_ASSEMBLY when set == .TRUE. the STIFC matrix will be assembled
!>
      SUBROUTINE LDA_SCHEME(IELEM,VCN,ADVECTION,CELRES,SOURCE,Q,DT,
     +                      NODRES,BETA,STIFC,NDIM,NOFVERT,
     3                      MATRIX_ASSEMBLY)
C
C     $Id: LDA_scheme.f,v 1.5 2013/01/24 07:46:33 abonfi Exp abonfi $
C
C this is a FORTRAN implementation of the original
C C version by G. Bourgois
C
C SOURCE IS THE VOLUME INTEGRAL OF THE SOURCE TERM
C
C
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
C
C     .. Parameters ..
C     ..
C     .. Scalar Arguments ..
      DOUBLE PRECISION CELRES,SOURCE
      INTEGER IELEM,NDIM,NOFVERT
      LOGICAL MATRIX_ASSEMBLY
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION ADVECTION(NDIM),DT(NOFVERT),NODRES(NOFVERT),
     +                 Q(NOFVERT),BETA(NOFVERT),STIFC(NOFVERT,NOFVERT),
     +                 VCN(NDIM,NOFVERT)
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION KNEGINV,KPOS,S,SUM
      INTEGER I,IROW,IVERT,J,JCOL,NEGI,POSI
C     ..
C     .. Local Arrays ..
      DOUBLE PRECISION K(MAXNOFVERT)
      INTEGER POS(MAXNOFVERT)
C     ..
C     .. External Functions ..
      DOUBLE PRECISION DDOT
      EXTERNAL DDOT
C     ..
      POSI = 0
      NEGI = NOFVERT + 1
      CELRES = ZERO
      KPOS = ZERO
C
      DO 10 IVERT = 1,NOFVERT
c
c Dotting advection speed with the face normal
c
          SUM = DDOT(NDIM,VCN(1,IVERT),1,ADVECTION,1)
          K(IVERT) = SUM/NDIM
c
          CELRES = CELRES + Q(IVERT)*K(IVERT)
c
          IF (K(IVERT).GT.ZERO) THEN
              POSI = POSI + 1
              POS(POSI) = IVERT
              KPOS = KPOS + K(IVERT)
              BETA(IVERT) = K(IVERT)
          ELSE
              NEGI = NEGI - 1
              POS(NEGI) = IVERT
              NODRES(IVERT)=ZERO
              BETA(IVERT) = ZERO
          ENDIF

   10 CONTINUE
C
      CELRES = CELRES + SOURCE
C
      IF(POSI.EQ.0)THEN
          WRITE(I1MACH(4),*)'At least one downstream vertex expected ',P
     &OSI,IELEM
          WRITE(I1MACH(4),*)'n = ',((VCN(J,IVERT),J=1,NDIM),IVERT=1,NOFV
     &ERT)
          WRITE(I1MACH(4),*)'u = ',(ADVECTION(IVERT),IVERT=1,NDIM)
          WRITE(I1MACH(4),*)'k = ',(K(IVERT),IVERT=1,NOFVERT)
          RETURN
      ENDIF
C
C Loops over downstream nodes
C

      DO 20 I = 1,POSI
          J = POS(I)
          S = K(J)/KPOS*CELRES
          NODRES(J) = -S
          DT(J) = DT(J) + K(J)
          BETA(J) = BETA(J)/KPOS
   20 CONTINUE
C
C
C
      IF (MATRIX_ASSEMBLY) THEN
          KNEGINV = -ONE/KPOS
          DO 40 J = 1,NOFVERT
              DO 40 I = 1,NOFVERT
                  STIFC(I,J) = ZERO
   40     CONTINUE
          DO 30 I = 1,POSI
              IROW = POS(I)
              S = K(IROW)
              DO 28 JCOL = 1,NOFVERT
                  STIFC(IROW,JCOL) = S*K(JCOL)*KNEGINV
   28         CONTINUE
   30     CONTINUE
      ENDIF
C
      RETURN

      END
@


1.5
log
@cosmetic changes and preliminary Doxygen documentation
@
text
@a6 1
!> \details
d25 1
a25 1
C     $Id: LDA_scheme.f,v 1.4 2011/03/30 09:14:54 abonfi Exp abonfi $
@


1.4
log
@checks whether downstream vertices have been found
@
text
@d1 21
d25 2
a26 1
C     $Id: LDA_scheme.f,v 1.3 2009/06/11 09:04:09 abonfi Exp abonfi $
@


1.3
log
@added BETA among the arguments of the call
@
text
@d4 1
a4 1
C     $Id:$
d69 9
a77 1
      IF(POSI.EQ.0)RETURN
@


1.2
log
@add a test on POSI to see if it is 0,
in that case just RETURN
on CRAY I got a floating point exception otherwise
@
text
@d2 6
a7 1
     +                      NODRES,STIFC,NDIM,NOFVERT,PICARD)
a11 3
C this is a FORTRAN implementation of the original
C C version by G. Bourgois
C
d13 1
a15 2
      DOUBLE PRECISION ONE,ZERO
      PARAMETER (ONE=1.D0,ZERO=0.D0)
d20 1
a20 1
      LOGICAL PICARD
d24 1
a24 1
     +                 Q(NOFVERT),STIFC(NOFVERT,NOFVERT),
d32 2
a33 2
      DOUBLE PRECISION K(VMAX)
      INTEGER POS(VMAX)
d57 1
a57 1

d62 1
d79 1
d84 1
a84 1
      IF (PICARD) THEN
@


1.1
log
@Initial revision
@
text
@d67 2
@
