      SUBROUTINE GHOST(BC5,ICELNOD,ICELFAC,VFACNOR,VOL,ZROE,
     +                 STIFEL,NODRES,NEWRES,VCZ,VCDZ,
     +                 NELEM,NDIM,NOFVERT,NOFVAR,
     +                 IBNDFAC,NBFAC,DT,RHS,A)
C
C     Purpose: inviscid wall boundary conditions;
C              this routine creates a dummy element for each
C              vertex of a boundary face
C
C
C     $Id: ghost.F,v 1.21 2003/08/08 03:37:30 abonfi Exp aldo $
C     $Header: /home/aldo/CFD_codes/EulFS.0.11.4/src/seq/RCS/ghost.F,v 1.21 2003/08/08 03:37:30 abonfi Exp aldo $
C
C
      IMPLICIT NONE
C
C
#include "include/finclude/petsc.h"
#include "include/finclude/petscvec.h"
#include "include/finclude/petscmat.h"
C
      Vec DT,RHS
      Mat A
C
      INCLUDE 'paramt.h'
      INCLUDE 'constants'
      INCLUDE 'implicit.h'
C
      INCLUDE 'nloc'
      INCLUDE 'bnd.h'
      INCLUDE 'bnd'
      INCLUDE 'stream.com'
      INCLUDE 'flags.com'
C
C#define PRINT
C
C
      INCLUDE 'three'
C
Caldo
C
C     FORTRAN stack
C
      DOUBLE PRECISION DSTAK(1)
      COMMON /CSTAK/ DSTAK
      INTEGER ISTAK(1)
      EQUIVALENCE(DSTAK(1),ISTAK(1))
C
C
      double precision xg,yg
      double precision href,aa
      parameter(href=20.908164d0,aa=0.603314533d0)
      double precision zn(4,3)
      common/mytrash/zn
C
Caldo
C
C     .. Scalar Arguments ..
      INTEGER NBFAC,NDIM,NELEM,NOFVAR,NOFVERT,NPOIN
C     ..
C     .. Subroutine Arguments ..
C
      INTEGER ICELNOD(NOFVERT,NELEM),ICELFAC(NOFVERT,NELEM)
      DOUBLE PRECISION VFACNOR(NDIM,*),VOL(NELEM),
     +                 ZROE(NOFVAR,*),
     +                 STIFEL(NOFVAR,NOFVAR,NOFVERT,NOFVERT),
     +                 NODRES(NOFVAR,NOFVERT),NEWRES(NOFVAR,NOFVERT),
     +                 VCZ(NOFVAR,NOFVERT),VCDZ(NOFVAR,NOFVERT)
      INTEGER IBNDFAC(3,NBFAC) 
C     ..
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION VOLUME,EPS,ROOT_MACHINE_EPS
      INTEGER I,IBC,ICLOR,IELEM,IFACE,N,
     +        IFAIL,IVERT,J,LOCA,LOCB,IVAR,JVAR,JVERT
      LOGICAL COMPRESSIBLE
C
      EXTERNAL BC5
C     ..
C     .. Local Arrays ..
      DOUBLE PRECISION VCN(3*VMAX),
     +TSTEP(VMAX*MAXNOFVAR),DUMMY((MAXNOFVAR*VMAX)**2)
C
C     VCN(1:NDIM,1:NOFVERT)
C     VCZ(1:NDIM,1:NOFVERT)
C     TSTEP(1:NOFVERT-1)
C     NODRES(1:NOFVAR,1:NOFVERT-1)
C     STIFEL(1:NOFVAR,1:NOFVAR,1:NOFVERT-1)
C
      logical swapped
C
      INTEGER ICN(VMAX)
C     ..
C     .. External Functions ..
      DOUBLE PRECISION DDOT,DNRM2
      INTEGER ICYCL
      EXTERNAL DDOT,DNRM2,ICYCL
C     ..
C     .. External Subroutines ..
      EXTERNAL CELPTR,DAXPY,DCOPY,DGEMV,DSWAP
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC ABS,IABS,REAL
C     ..
C     ..
C     .. Statement Functions ..
      INTEGER IDX
C     ..
C     ..
C     .. Statement Function definitions ..
C
C
      IDX(I,J,N) = (I-1)*N + J
C     ..
C
C
      COMPRESSIBLE = ABS(KAN) .EQ. 4
      ROOT_MACHINE_EPS=1.d-07
C
      DO 100 IFACE = 1,NBFAC
C
C
          IELEM = IBNDFAC(1,IFACE)
          IVERT = IBNDFAC(2,IFACE)
          ICLOR = IBNDFAC(3,IFACE)
C
          IBC = ICOLOR(ICLOR)
C
C     Do NOT apply (inviscid) boundary conditions if:
C
C     IBC = 1 supersonic inlet
C     IBC = 3 supersonic outlet
C     IBC = 6 viscous wall
C     IBC = 7 prescribed velocity profile (maybe I should)
C
          IF (IBC.NE.BC_TYPE_FAR_FIELD)GOTO 100
C
      CALL CELPTR(IELEM, ICELNOD, ICELFAC, VOL,
     +   ZROE, VFACNOR, NDIM, NOFVERT, NOFVAR, ICN,
     +   VCZ, VCN, VOLUME)
C
      IF(IVERT.NE.NOFVERT)THEN
         CALL DSWAP(NOFVAR,VCZ(1,IVERT),1,VCZ(1,NOFVERT),1)
         LOCA = IDX(IVERT,1,NDIM)
         LOCB = IDX(NOFVERT,1,NDIM)
         CALL DSWAP(NDIM,VCN(LOCA),1,VCN(LOCB),1)
         LOCA = ICN(NOFVERT)
         ICN(NOFVERT) = ICN(IVERT)
         ICN(IVERT) = LOCA
      ENDIF
C
Caldo
      do ivert = 1, nofvert-1
         i = icn(ivert)
         xg = dstak(lcorg+i*ndim)
         yg = dstak(lcorg+i*ndim+1)
         zn(1,ivert) = 1.d0
         zn(2,ivert) = href
         zn(3,ivert) = aa * xg
         zn(4,ivert) =-aa * yg
      enddo
Caldo
C
      CALL DCOPY(NOFVAR,U_INFTY,1,VCZ(1,NOFVERT),1)
C
      CALL DINIT(NOFVAR*(NOFVERT-1),ZERO,TSTEP,1)
C
          CALL BC5(IELEM,VCN,VCZ,STIFEL,NODRES,TSTEP,
     +NDIM,NOFVERT,NOFVAR)
C
caldo CALL VecSetValues(DT,NOFVERT-1,ICN,TSTEP,ADD_VALUES,IFAIL)
      CALL VecSetValuesBlocked(DT,NOFVERT-1,ICN,TSTEP,
     +                      ADD_VALUES,IFAIL)
      CALL VecSetValuesBlocked(RHS,NOFVERT-1,ICN,NODRES,
     +                      ADD_VALUES,IFAIL)
C
      IF(.NOT.TIMEIMPL)GOTO 100
#if 0
      do ivert=1,nofvert-1
      write(6,*)ielem,ivert,ivert
      CALL X04CAF('General',' ',Nofvar,Nofvar,STIFEL(1,1,IVERT,1),
     +            Nofvar,'Picard matrix ',IFAIL)
      enddo
#endif
      IF(PICARD)GOTO 50
C
C     Compute Jacobian by finite differences
C
      DO 15 IVERT = 1, NOFVERT-1
          DO 15 IVAR = 1, NOFVAR
             CALL DCOPY(NOFVAR*NOFVERT,VCZ,1,VCDZ,1)
             IF(COMPRESSIBLE)THEN
                CALL PARM_TO_CONS(VCZ(1,IVERT),NDIM,NOFVAR,1,.FALSE.)
                CALL PARM_TO_CONS(VCDZ(1,IVERT),NDIM,NOFVAR,1,.FALSE.)
             ENDIF
             EPS = ROOT_MACHINE_EPS*MAX(ABS(VCZ(IVAR,IVERT)),1.d0)*
     +             SIGN(1.d0,VCZ(IVAR,IVERT))
             VCDZ(IVAR,IVERT) = VCZ(IVAR,IVERT) + EPS
             IF(COMPRESSIBLE)THEN
                CALL CONS_TO_PARM(VCZ(1,IVERT),NDIM,NOFVAR,1,.FALSE.)
                CALL CONS_TO_PARM(VCDZ(1,IVERT),NDIM,NOFVAR,1,.FALSE.)
             ENDIF
C
#if 0
      CALL X04CAF('General',' ',Nofvar,Nofvert,vcz(1,IVERT),
     +            Nofvar,'Z ',IFAIL)
      CALL X04CAF('General',' ',Nofvar,Nofvert,vcdz(1,IVERT),
     +            Nofvar,'DZ ',IFAIL)
#endif
C
             CALL BC5(IELEM,VCN,VCDZ,DUMMY,NEWRES,TSTEP,
     +                   NDIM,NOFVERT,NOFVAR)
C
C     The residual sent to vertex IVERT only depends
C     on the node itself
C
             DO 15 JVAR = 1, NOFVAR
                 STIFEL(JVAR,IVAR,IVERT,1) =
     +           -(NEWRES(JVAR,IVERT)-NODRES(JVAR,IVERT))/EPS
C
   15 CONTINUE
C
   50 CONTINUE
      DO 25 IVERT = 1,NOFVERT-1 
C
#ifdef MPI
          CALL MatSetValuesBlockedLocal(A,1,ICN(IVERT),1,ICN(IVERT),
     +                                  STIFEL(1,1,IVERT,1),
     +                                  ADD_VALUES,IFAIL)
#else
          CALL MatSetValuesBlocked(A,1,ICN(IVERT),1,ICN(IVERT),
     +                             STIFEL(1,1,IVERT,1),
     +                             ADD_VALUES,IFAIL)
#endif
#if 0
      write(6,*)ielem,ivert,ivert
      CALL X04CAF('General',' ',Nofvar,Nofvar,STIFEL(1,1,IVERT,1),
     +            Nofvar,'Jacobian ',IFAIL)
#endif
C
   25 CONTINUE
C
  100 CONTINUE
      RETURN
      END
