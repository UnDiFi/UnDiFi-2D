head	1.7;
access
	abonfi;
symbols;
locks; strict;
comment	@c @;


1.7
date	2005.07.17.19.07.09;	author aldo;	state Exp;
branches;
next	1.6;

1.6
date	98.11.07.09.01.00;	author aldo;	state Exp;
branches;
next	1.5;

1.5
date	98.07.28.11.15.33;	author aldo;	state Exp;
branches;
next	1.4;

1.4
date	98.07.27.12.33.27;	author aldo;	state Exp;
branches;
next	1.3;

1.3
date	98.05.10.08.24.31;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	98.02.10.08.53.46;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	98.01.02.15.33.14;	author aldo;	state Exp;
branches;
next	;


desc
@Set boundary conditions on the stiffness matric for scalar problems
@


1.7
log
@changes require to upgrade to petsc-2.3.0
@
text
@C
      SUBROUTINE LHSBC1( A )
C
      IMPLICIT NONE
C
C     This routine applies the Dirichlet boundary conditions to the
C     stiffness matrix for scalar problems.
C     For a Dirichlet node (NODCODE<0) A_ij j \neq i is set to 0.d0
C     and the diagonal entry is left unchanged
C
C     $Id: lhsbc1.F,v 1.6 1998/11/07 09:01:00 aldo Exp aldo $
C
C
#include "include/finclude/petsc.h"
#include "include/finclude/mat.h"
#include "include/finclude/is.h"
C
      INCLUDE 'iset.com'
C
      DOUBLE PRECISION ONE
      PARAMETER (ONE=1.d0)
C
      Mat A
C
C
      INTEGER IFAIL
C
C
#ifdef MPI
      CALL MatZeroRowsLocalIS(A,SupersonicNodes,ONE,IFAIL)
#else
      CALL MatZeroRowsIS(A,SupersonicNodes,ONE,IFAIL)
#endif
C
C     is it really needed to re-assemble the matrix???
C
      CALL MatAssemblyBegin(A,MAT_FINAL_ASSEMBLY,IFAIL)
      CALL MatAssemblyEnd(A,MAT_FINAL_ASSEMBLY,IFAIL)
C
C     This will remove the entries from the matrix; but when 
C     you assemble the matrix for the next time-step it will not 
C     insert those unneeded values (the values that would be zeroed
C     in the next call to MatZeroRows()). This is a very efficient
C     way to do multiple linear systems BUT assumes
C
C     1) the rows you want to zero remain the same for each successive
C        linear system in the series
C     2) you are not adding new nonzeros in other parts of the matrix
C        at later timesteps (because the above option will cause those 
C        new values to be ignored).
C
      CALL MatSetOption(A,MAT_NO_NEW_NONZERO_LOCATIONS,IFAIL)
C
      RETURN
      END
C
@


1.6
log
@Add automatic identification flag
@
text
@d11 1
a11 1
C     $Id$
d30 1
a30 1
      CALL MatZeroRowsLocal(A,SupersonicNodes,ONE,IFAIL)
d32 1
a32 1
      CALL MatZeroRows(A,SupersonicNodes,ONE,IFAIL)
@


1.5
log
@Using index sets to identify boundary nodes
@
text
@d6 8
a18 5
C
C     This routine applies the Dirichlet boundary conditions to the
C     stiffness matrix for scalar problems.
C     For a Dirichlet node (NODCODE<0) A_ij j \neq i is set to 0.d0
C     and the diagonal entry is left unchanged
@


1.4
log
@Parallel version using pre-processor directives
@
text
@d2 1
a2 1
      SUBROUTINE LHSBC1( NR, NODCODE, A, IWORK )
d10 2
d17 2
a18 2
      DOUBLE PRECISION ZERO,ONE
      PARAMETER (ZERO=0.D0,ONE=1.d0)
a20 8
      IS  ISet
C
      INTEGER NR
C
      INTEGER IFAIL,IWORK(*)
      INTEGER NODCODE(*)
C
      INTEGER INODE,IC
a21 8
      IC = 0 
      DO 3 INODE = 1 , NR
         IF( NODCODE(INODE) .LT. 0 )THEN
            IC = IC + 1
C     zero indexed based
            IWORK(IC) = INODE-1
         ENDIF
    3 CONTINUE
d23 1
a23 1
C     pause 'about to call ISCreateGeneral'
a24 2
      CALL ISCreateGeneral(MPI_COMM_WORLD,IC,IWORK,ISet,IFAIL)
C     WRITE(6,*)'ISCreateGeneral has returned ',IFAIL 
d27 1
a27 1
      CALL MatZeroRowsLocal(A,ISet,ONE,IFAIL)
d29 1
a29 1
      CALL MatZeroRows(A,ISet,ONE,IFAIL)
a30 1
C     WRITE(6,*)'MatZeroRows has returned ',IFAIL 
d32 1
a32 2
      CALL ISDestroy(ISet,IFAIL)
C     WRITE(6,*)'ISDestroy has returned ',IFAIL 
@


1.3
log
@Include files path for PETSC fortran header files
has been changed to comply to rev. 2.0.22 of PETSc
@
text
@d42 3
d46 1
@


1.2
log
@Unused variables removed
@
text
@d6 3
a8 3
#include "include/FINCLUDE/petsc.h"
#include "include/FINCLUDE/mat.h"
#include "include/FINCLUDE/is.h"
@


1.1
log
@Initial revision
@
text
@d26 1
a26 1
      INTEGER INODE,IBGN,IEND,ICODE,I,IC
@
