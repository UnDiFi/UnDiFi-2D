head	1.20;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.20
	release3_13_0:1.20
	release3_12_0:1.20
	release3_11_0:1.20
	release3_10_0:1.20
	release3_8_0:1.20
	release3_7_1:1.19
	release3_7_0:1.19
	release3_4_5:1.18
	release3_4_4:1.18
	release3_4_3:1.18
	release3_4_2:1.18
	release3_4_1:1.18
	release3_4_0:1.18
	release3_3_5:1.16
	release3_3_4:1.16
	release3_3_3:1.16
	release3_3_2:1.16
	release3_3_1:1.16
	release3_3_0:1.15;
locks; strict;
comment	@c @;


1.20
date	2020.04.23.09.37.34;	author abonfi;	state Exp;
branches;
next	1.19;

1.19
date	2016.11.10.11.25.13;	author abonfi;	state Exp;
branches;
next	1.18;

1.18
date	2013.05.24.06.18.49;	author abonfi;	state Exp;
branches;
next	1.17;

1.17
date	2013.05.15.10.34.38;	author abonfi;	state Exp;
branches;
next	1.16;

1.16
date	2013.01.26.11.30.51;	author abonfi;	state Exp;
branches;
next	1.15;

1.15
date	2011.09.16.07.19.48;	author abonfi;	state Exp;
branches;
next	1.14;

1.14
date	2009.06.11.13.10.58;	author abonfi;	state Exp;
branches;
next	1.13;

1.13
date	2009.06.11.08.54.42;	author abonfi;	state Exp;
branches;
next	1.12;

1.12
date	2008.02.25.09.44.28;	author abonfi;	state Exp;
branches;
next	1.11;

1.11
date	2005.07.17.19.07.09;	author aldo;	state Exp;
branches;
next	1.10;

1.10
date	2004.12.20.14.35.42;	author aldo;	state Exp;
branches;
next	1.9;

1.9
date	2002.02.19.09.19.00;	author abonfi;	state Exp;
branches;
next	1.8;

1.8
date	2001.10.08.15.48.37;	author abonfi;	state Exp;
branches;
next	1.7;

1.7
date	2000.11.15.09.15.09;	author aldo;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.26.15.23.18;	author aldo;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.25.10.24.02;	author aldo;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.19.16.10.34;	author aldo;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.18.14.07.35;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.15.10.10.00;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.23.16.43.48;	author aldo;	state Exp;
branches;
next	;


desc
@main driver for turbulence modeling, segregated approach
@


1.20
log
@changes required by petsc release 3.8
@
text
@      SUBROUTINE NODRES_T(NDIM,NOFVERT,NOFVAR,NTURB,NPOIN,
     +           NGHOST,NPNOD,NELEM,NFACE,NBFAC,DT,ZTURB,RHS,A,
     +           Model,ScalarScheme,MatrixScheme)
C
C     This routine computes the NODal RESidual, i.e. it
C     assembles the r.h.s. (RHS), the nodal timestep (DT)
C     and the matrix (A) for the turbulence model
C
C
C     $Id: nodres_t.F,v 1.19 2016/11/10 11:25:13 abonfi Exp abonfi $
C
CC#define DEBUG
C
#include "petsc/finclude/petscvec.h"
#include "petsc/finclude/petscmat.h"
      use petscvec 
      use petscmat 
C
      IMPLICIT NONE
C
C     PETSc stuff
C
      Mat A
      Vec DT,RHS
      DOUBLE PRECISION ZTURB(*)
      PetscLogDouble t1beg,t1elapsed,t2beg
      PetscScalar VEC_V(1),S
      PetscOffset VEC_I
C
      INCLUDE 'paramt.h'
      INCLUDE 'datatype.h'
      INCLUDE 'bnd.h'
      INCLUDE 'implicit.h'
      INCLUDE 'constants.h'
C
C     FORTRAN stack
C
      DOUBLE PRECISION DSTAK(1)
      COMMON /CSTAK/ DSTAK
      INTEGER ISTAK(1)
      EQUIVALENCE(DSTAK(1),ISTAK(1))
C
      INCLUDE 'nloc.com'
      INCLUDE 'flags.com'
      INCLUDE 'stream.com'
      INCLUDE 'conv.com'
      INCLUDE 'nboun.com'
      INCLUDE 'io.com'
      integer my_pe 
      common/MPICOM/my_pe
C
C     Scalar Arguments ..
C
      INTEGER NDIM,NOFVERT,NOFVAR,NTURB,NPOIN,NGHOST,NPNOD,NELEM,NFACE,
     2NBFAC
C
C     On entry:
C     --------
C
C     NDIM    dimension of the space (2 or 3)
C     NOFVERT number of vertices per element (=NDIM+1, since
C             only triangles or tetrahedra are allowed)
C     NOFVAR  number of variables (degrees of freedom)
C             in each meshpoint
C     NPOIN   no. of interior (processor owned) meshpoints; 
C             global number of meshpoints in the uni-processor case
C     NGHOST  no. of ghost meshpoints on the current processor; 
C             0 the uni-processor case
C     NELEM   no. of processor owned elements (triangles/tetrahedra);
C             global number of elements in the uni-processor case
C     NFACE   number of edges/faces in the mesh for the current 
C             processor (multi-processor case) or global number 
C             of edges/faces in the mesh (uni-processor case).
C     NBFAC   no. of processor owned boundary faces/edges;
C             global number of boundary faces/edges
C             in the uni-processor case.
C
C     External Arguments ..
C
      EXTERNAL Model,ScalarScheme,MatrixScheme
C
C     External Subroutines ..
C
C
C     Local Scalars ..
C
      INTEGER IFAIL
      INTEGER ISTKGT
      INTEGER LWORKA,LWORKB,LWORKC,LWORKD,LWORKE ,LWORKF
C
C     Sets residual and local timestep to ZERO
C
      CALL VecSet(DT,ZERO,IFAIL)
      CALL VecSet(RHS,ZERO,IFAIL)
C
C     set ghost values to 0.d0
C
      CALL VecGetArray(DT,vec_v,vec_i,IFAIL)
      CALL DINIT(NGHOST,ZERO,vec_v(vec_i+NPOIN+1),1)
      CALL VecRestoreArray(DT,vec_v,vec_i,IFAIL)
C
C     set ghost values to zero
C     note that VecSet only sets values belonging to the
C          owning processor 
C     it is necessary to set the ghost point values using
C     the LOCAL representation
C
      CALL VecGetArray(RHS,vec_v,vec_i,IFAIL) 
      CALL DINIT(NGHOST*NTURB,ZERO,vec_v(vec_i+NPOIN*NTURB+1),1)
      CALL VecRestoreArray(RHS,vec_v,vec_i,IFAIL) 
C
C     Set entries of the matrix to 0.d0
C
      IF( TIMEIMPL )THEN
         CALL MatZeroEntries(A,IFAIL)
      ENDIF
C     
      CALL PetscTime(t1beg,IFAIL)
C
C     can change nofvar into nturb
C
      LWORKA = ISTKGT((NOFVAR*NOFVERT)**2,KIND_REAL8)
      LWORKB = ISTKGT(NOFVAR*NOFVERT,KIND_REAL8)
      LWORKC = ISTKGT(NOFVAR*NOFVERT,KIND_REAL8)
      LWORKD = ISTKGT(NOFVAR*NOFVERT,KIND_REAL8)
      LWORKE = ISTKGT(NOFVAR*NOFVERT,KIND_REAL8)
      LWORKF = ISTKGT(NDIM*NOFVERT,KIND_REAL8)
C
C
      CALL SetupRHS_t(ISTAK(LCELNOD),ISTAK(LCELFAC),DSTAK(LFACNOR),
     +              DSTAK(LXYZDOT),
     +              DSTAK(LVOL),DSTAK(LZROE),ZTURB,
     +              DSTAK(LWORKA),DSTAK(LWORKB),DSTAK(LWORKC),
     +              DSTAK(LWORKD),DSTAK(LWORKE),DSTAK(LWORKF),
     +              NELEM,NPOIN,NGHOST,NPNOD,NDIM,NOFVERT,NOFVAR,NTURB,
     +              DT,RHS,A,
     +              ScalarScheme,MatrixScheme,Model)
C
      CALL ISTKRL(6)
C
#ifdef DEBUG
      CALL VecNorm(RHS,NORM_2,S,IFAIL)
      WRITE(6,*)'L-2 norm of the rhs is ',S
      CALL VecNorm(DT,NORM_2,S,IFAIL)
      WRITE(6,*)'L-2 norm of the DT is ',S
#endif
C
      CALL PetscTime(t2beg,IFAIL)
      t1elapsed = t2beg-t1beg
C
C
      RETURN
      END
@


1.19
log
@changed the location of petsc's header files
when migrating to version 3.6
@
text
@d10 1
a10 3
      IMPLICIT NONE
C
C     $Id: nodres_t.F,v 1.18 2013/05/24 06:18:49 abonfi Exp abonfi $
a13 1
#include "petsc/finclude/petscsys.h"
d16 4
@


1.18
log
@fixed a bug caused by the introduction of the grid velocities that
plagued the tandem solution strategy for turbulent flows
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.17 2013/05/15 10:34:38 abonfi Exp abonfi $
d16 3
a18 3
#include "finclude/petscsys.h"
#include "finclude/petscvec.h"
#include "finclude/petscmat.h"
@


1.17
log
@changed PetscGetTime into PetscTime to comply with Petsc revision 3.4.0
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.16 2013/01/26 11:30:51 abonfi Exp abonfi $
d14 1
a14 1
C#define DEBUG
d26 1
a26 1
      PetscScalar VEC_V(1)
d88 1
a88 1
      INTEGER LWORKA,LWORKB,LWORKC,LWORKD,LWORKE 
d108 1
a108 1
      CALL DINIT(NGHOST*NTURB,0.d0,vec_v(vec_i+NPOIN*NTURB+1),1)
d126 1
d130 1
d133 1
a133 1
     +              DSTAK(LWORKD),DSTAK(LWORKE),
d138 8
a145 1
      CALL ISTKRL(5)
@


1.16
log
@changed the name of included header/common files
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.15 2011/09/16 07:19:48 abonfi Exp abonfi $
d117 1
a117 1
      CALL PetscGetTime(t1beg,IFAIL)
d138 1
a138 1
      CALL PetscGetTime(t2beg,IFAIL)
@


1.15
log
@Changed PETSc header file to comply with version 3.1
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.14 2009/06/11 13:10:58 abonfi Exp abonfi $
d32 2
a33 2
C
      INCLUDE 'constants'
d42 1
a42 1
      INCLUDE 'nloc'
a46 1
      INCLUDE 'implicit.h'
@


1.14
log
@location of PETSc include file ahs chanegd with release 3.0.0
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.13 2009/06/11 08:54:42 abonfi Exp abonfi $
d16 1
a16 1
#include "finclude/petsc.h"
@


1.13
log
@added NPNOD among the arguments of the call
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.12 2008/02/25 09:44:28 abonfi Exp abonfi $
d16 3
a18 3
#include "include/finclude/petsc.h"
#include "include/finclude/petscvec.h"
#include "include/finclude/petscmat.h"
@


1.12
log
@removed unused common (included)
@
text
@d2 1
a2 1
     +           NGHOST,NELEM,NFACE,NBFAC,DT,ZTURB,RHS,A,
d12 1
a12 1
C     $Id: nodres_t.F,v 1.11 2005/07/17 19:07:09 aldo Exp abonfi $
d54 2
a55 1
      INTEGER NDIM,NOFVERT,NOFVAR,NPOIN,NGHOST,NELEM,NFACE,NBFAC,NTURB
d133 1
a133 1
     +              NELEM,NDIM,NOFVERT,NOFVAR,NTURB,
@


1.11
log
@changes require to upgrade to petsc-2.3.0
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.10 2004/12/20 14:35:42 aldo Exp aldo $
a41 1
      INCLUDE 'bnd'
@


1.10
log
@cosmetic changes
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.9 2002/02/19 09:19:00 abonfi Exp $
d93 2
a94 2
      CALL VecSet(ZERO,DT,IFAIL)
      CALL VecSet(ZERO,RHS,IFAIL)
@


1.9
log
@changed Scalar into PetscScalar to comply with PETSc 2.1.1
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.8 2001/10/08 15:48:37 abonfi Exp abonfi $
d25 1
a25 1
      PetscLogDouble t1beg,t1elapsed,t2beg,t2elapsed,t3beg,t3elapsed 
a27 1
      PetscTruth lflag
d30 1
d87 1
a87 2
      INTEGER IELEM,ifail,ICLR,IUNIT,IDIM,bs
      DOUBLE PRECISION S,dnrm2
d122 5
a126 5
      LWORKA = ISTKGT((NOFVAR*NOFVERT)**2,4)
      LWORKB = ISTKGT(NOFVAR*NOFVERT,4)
      LWORKC = ISTKGT(NOFVAR*NOFVERT,4)
      LWORKD = ISTKGT(NOFVAR*NOFVERT,4)
      LWORKE = ISTKGT(NOFVAR*NOFVERT,4)
@


1.8
log
@changed PLog into PetscLog to comply with PETSC 2.1.0
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.7 2000/11/15 09:15:09 aldo Exp abonfi $
d26 1
a26 1
      Scalar VEC_V(1)
@


1.7
log
@changed the name of the included file containing I/O devices
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.6 2000/10/26 15:23:18 aldo Exp aldo $
d25 1
a25 1
      PLogDouble t1beg,t1elapsed,t2beg,t2elapsed,t3beg,t3elapsed 
@


1.6
log
@ZTURB is now passed to SetupRHS_t
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.5 2000/10/25 10:24:02 aldo Exp aldo $
d49 1
a49 1
      INCLUDE 'IO'
@


1.5
log
@initialising ghost values to 0.d0
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.4 2000/10/19 16:10:34 aldo Exp aldo $
d23 1
a23 1
      Vec DT,RHS,DT_local,RHS_local
d28 1
d88 1
a88 1
      DOUBLE PRECISION S
d121 2
d129 1
d131 1
a131 1
     +              DSTAK(LVOL),DSTAK(LZROE),DSTAK(LTURB),
@


1.4
log
@changed include file names for PETSc rev. 2.0.29
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.3 2000/08/18 14:07:35 aldo Exp aldo $
d93 18
a110 4
      IF(TIMEIMPL)THEN 
         CALL VecSet(ZERO,DT,IFAIL)
         CALL VecSet(ZERO,RHS,IFAIL)
      ENDIF
@


1.3
log
@removed all message passing operations
and brought into RHSFunction_t
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.2 2000/08/15 10:10:00 aldo Exp aldo $
d17 2
a18 2
#include "include/finclude/vec.h"
#include "include/finclude/mat.h"
@


1.2
log
@add a couple of variables for the MPI version
@
text
@d12 1
a12 1
C     $Id: nodres_t.F,v 1.1 2000/06/23 16:43:48 aldo Exp aldo $
a102 44
C
#ifdef MPI
C
C     get local representation of the r.h.s. vector
C
      CALL VecGhostGetLocalForm(RHS,RHS_local,IFAIL)
      CALL VecGhostGetLocalForm(DT,DT_local,IFAIL)
C     
C     we need to set the BlockSize on the local representation
C     of the vector ONLY as long as it is not defined yet
C
      CALL VecGetBlockSize(RHS_local,bs,IFAIL)
      IF(BS.NE.NOFVAR)CALL VecSetBlockSize(RHS_local,NOFVAR,IFAIL)
C
C     set ghost values to zero
C     note that VecSet only sets values belonging to the
C          owning processor 
C     it is necessary to set the ghost point values using
C     the LOCAL representation
C
      CALL VecGetArray(RHS_local,VEC_V,VEC_I,IFAIL) 
      CALL DINIT(NGHOST*NOFVAR,ZERO,VEC_V(VEC_I+NPOIN*NOFVAR+1),1)
      CALL VecRestoreArray(RHS_local,VEC_V,VEC_I,IFAIL) 
      CALL VecGetArray(DT_local,VEC_V,VEC_I,IFAIL) 
      CALL DINIT(NGHOST,ZERO,VEC_V(VEC_I+NPOIN+1),1)
      CALL VecRestoreArray(DT_local,VEC_V,VEC_I,IFAIL) 
C
#else
C
C     for the uniprocessor case local and global numbering 
C     are the same, maybe the following assignement
C     is already done in VecGhostGetLocalForm(), controlla!
C
      RHS_local=RHS
      DT_local=DT
C
#endif
C
C     Set entries of the matrix to 0.d0
C
      IF( TIMEIMPL )THEN
         CALL MatZeroEntries(A,IFAIL)
      ENDIF
c
a125 44
   20 CONTINUE
C
C     Must assembly RHS now since a call to MatSetValues(INSERT_VALUES)
C     might follow in RHSBC4
C
      CALL VecAssemblyBegin(RHS,IFAIL)
      CALL VecAssemblyEnd(RHS,IFAIL)
C
C update ghost values
C
#ifdef MPI
C
      CALL VecGhostUpdateBegin(RHS,ADD_VALUES,SCATTER_REVERSE,IFAIL) 
      CALL VecGhostUpdateEnd(RHS,ADD_VALUES,SCATTER_REVERSE,IFAIL) 
C
#endif
C
C     Apply b.c. to the nodal residual
C
         CALL RHSBC5(RHS)
C
      CALL VecAssemblyBegin(DT,IFAIL)      
      CALL VecAssemblyEnd(DT,IFAIL)      
C
#ifdef MPI
C
      CALL VecGhostUpdateBegin(DT,ADD_VALUES,SCATTER_REVERSE,IFAIL) 
      CALL VecGhostUpdateEnd(DT,ADD_VALUES,SCATTER_REVERSE,IFAIL) 
C
      CALL VecGhostRestoreLocalForm(RHS,RHS_local,IFAIL)
      CALL VecGhostRestoreLocalForm(DT,DT_local,IFAIL)
C
#endif
C
C
      IF( TIMEIMPL )THEN
          CALL MatAssemblyBegin(A,MAT_FINAL_ASSEMBLY,IFAIL) 
          CALL MatAssemblyEnd(A,MAT_FINAL_ASSEMBLY,IFAIL) 
      ENDIF
C
C
C     write timings:
C
C
a126 5
 2000 FORMAT(/,1X,
     &'COMPUTATION OF THE RESIDUAL AND MATRIX ASSEMBLY',
     &/,1X,48('=')/)
C
C
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
C     $Id: nodres.F,v 1.24 2000/05/24 10:43:27 aldo Exp aldo $
d26 2
@
