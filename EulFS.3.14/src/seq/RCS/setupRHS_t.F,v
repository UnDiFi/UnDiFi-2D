head	1.22;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.22
	release3_13_0:1.21
	release3_12_0:1.21
	release3_11_0:1.21
	release3_10_0:1.21
	release3_8_0:1.21
	release3_7_1:1.20
	release3_7_0:1.19
	release3_4_5:1.18
	release3_4_4:1.18
	release3_4_3:1.18
	release3_4_2:1.17
	release3_4_1:1.17
	release3_4_0:1.17
	release3_3_5:1.16
	release3_3_4:1.16
	release3_3_3:1.16
	release3_3_2:1.16
	release3_3_1:1.16
	release3_3_0:1.15;
locks; strict;
comment	@c @;


1.22
date	2021.01.29.08.53.23;	author abonfi;	state Exp;
branches;
next	1.21;

1.21
date	2020.04.23.09.51.45;	author abonfi;	state Exp;
branches;
next	1.20;

1.20
date	2020.03.28.09.42.51;	author abonfi;	state Exp;
branches;
next	1.19;

1.19
date	2016.11.10.11.25.13;	author abonfi;	state Exp;
branches;
next	1.18;

1.18
date	2013.09.17.09.57.31;	author abonfi;	state Exp;
branches;
next	1.17;

1.17
date	2013.05.24.06.18.49;	author abonfi;	state Exp;
branches;
next	1.16;

1.16
date	2013.01.26.12.15.39;	author abonfi;	state Exp;
branches;
next	1.15;

1.15
date	2012.04.03.12.07.47;	author abonfi;	state Exp;
branches;
next	1.14;

1.14
date	2011.09.16.07.19.48;	author abonfi;	state Exp;
branches;
next	1.13;

1.13
date	2009.06.11.13.10.58;	author abonfi;	state Exp;
branches;
next	1.12;

1.12
date	2009.06.11.09.00.29;	author abonfi;	state Exp;
branches;
next	1.11;

1.11
date	2007.11.14.10.14.35;	author abonfi;	state Exp;
branches;
next	1.10;

1.10
date	2007.11.14.08.45.35;	author abonfi;	state Exp;
branches;
next	1.9;

1.9
date	2005.10.22.11.07.40;	author abonfi;	state Exp;
branches;
next	1.8;

1.8
date	2005.09.09.08.47.41;	author abonfi;	state Exp;
branches;
next	1.7;

1.7
date	2001.10.17.15.35.19;	author abonfi;	state Exp;
branches;
next	1.6;

1.6
date	2000.11.15.09.17.25;	author aldo;	state Exp;
branches;
next	1.5;

1.5
date	2000.11.08.09.40.52;	author aldo;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.26.15.32.03;	author aldo;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.19.16.10.34;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.18.13.56.53;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.23.16.42.59;	author aldo;	state Exp;
branches;
next	;


desc
@assemble rhs and jacobian for turbulence modeling
@


1.22
log
@changed call to MatSetValuesLocal because of type checking introduced in petsc
@
text
@!> @@param[in] ICELNOD Cell to node pointer: \c ICELNOD(i,j) gives the global node number of the i-th vertex of the j-th element
!> @@param[in] ICELFAC Cell to face pointer: \c ICELFAC(i,j} gives the global face number of the face opposite the i-th vertex of the j-th element
!> @@param[in] VFACNOR Cartesian components of the normals to a face, multiplied by the face area
!> @@param[in] XYZDOT the cartesian components of the grid velocity
!> @@param[in] VOL area/volume of the simplicial elements (triangles,tetrahedra)
!> @@param[in] ZROE Nodal values of the dependent variable;  compressible equations: \f$ Z = \sqrt{\rho} \left( 1, H, \mathbf{u} \right) \f$; incompressible equations: \f$ Z = \left( p, \mathbf{u} \right) \f$
!> @@param[in] ZTURB Nodal values of the turbulent variable(s); for both the compressible and incompressible equations: \f$ \tilde{\nu} \f$
!> @@param[in,out] STIFEL elemental stiffness matrix
!> @@param[in,out] NODRES 
!> @@param[in,out] NEWRES 
!> @@param[out] VCZ returns the \c NOFVAR dofs of the NOFVERT vertices of cell \c IELEM; VCZ(1:NOFVAR,*,1) stores the values at time level \c n+1,k ; \c VCZ(1:NOFVAR,*,2) those at tme level n and \c VCZ(1:NOFVAR,*,3) those at time level \c n-1
!> @@param[out] VCDZ returns the \c NOFVAR dofs of the NOFVERT vertices of cell \c IELEM; VCZ(1:NOFVAR,*,1) stores the values at time level \c n+1,k ; \c VCZ(1:NOFVAR,*,2) those at tme level n and \c VCZ(1:NOFVAR,*,3) those at time level \c n-1
!> @@param[out] VCB returns the \c NDIM Cartesian components of the nodal grid velocities at time \c n+1/2 of the NOFVERT vertices of cell \c IELEM; only if \c LALE is \c .TRUE.
!> @@param[in] NELEM is the no. of processor owned elements (triangles/tetrahedra); global number of elements in the uni-processor case
!> @@param[in] NPOIN nof interior nodes in the mesh
!> @@param[in] NGHOST nof ghost nodes in the mesh
!> @@param[in] NPNOD nof periodic nodes in the mesh
!> @@param[in] NDIM dimension of the space
!> @@param[in] NOFVERT number of vertices per element (=NDIM+1, since only triangles or tetrahedra are allowed)
!> @@param[in] NOFVAR number of variables (degrees of freedom) in each meshpoint
!> @@param[in] NTURB nof turbulent dofs =1 for SA
!> @@param[in,out] PetscVecDT Petsc Vec where time-step is stored
!> @@param[in,out] PetscVecRHS Petsc Vec where the nodal residual is stored
!> @@param[in,out] PetscMatA Petsc Mat where the implicit matrix is stored
!> @@param[in] ScalarScheme is the SUBROUTINE used to discretize scalar equation
!> @@param[in] MatrixScheme is the SUBROUTINE used to discretize hyperbolic systems of equations
!> @@param[in] Model is the SUBROUTINE used to discretize the turbulence transport equations
      SUBROUTINE SetupRHS_t(ICELNOD,ICELFAC,VFACNOR,XYZDOT,VOL,ZROE,
     +                    ZTURB,STIFEL,NODRES,NEWRES,VCZ,VCDZ,VCB,NELEM,
     3                    NPOIN,NGHOST,NPNOD,NDIM,NOFVERT,NOFVAR,NTURB,
     &                    PetscVecDT,PetscVecRHS,PetscMatA,
     +                    ScalarScheme,MatrixScheme,Model)
C
C     $Id: setupRHS_t.F,v 1.21 2020/04/23 09:51:45 abonfi Exp abonfi $
C
C
C#define BUDGET
C
#include "petsc/finclude/petscvec.h"
#include "petsc/finclude/petscmat.h"
      use petscvec
      use petscmat
C
      IMPLICIT NONE
C
      INCLUDE 'paramt.h'
      INCLUDE 'bnd.h'
      INCLUDE 'implicit.h'
C
      Vec PetscVecDT,PetscVecRHS
      Mat PetscMatA
C
      INCLUDE 'constants.h'
      INCLUDE 'three.com'
      INCLUDE 'flags.com'
      INCLUDE 'turb.com'
      INCLUDE 'newtoneps.com'
C
      INTEGER NDIM,NOFVERT,NTURB,NELEM,NPOIN,NGHOST,NPNOD,NOFVAR
C
C
      INTEGER ICELNOD(NOFVERT,NELEM),ICELFAC(NOFVERT,NELEM)
C
C
      DOUBLE PRECISION VFACNOR(NDIM,*),XYZDOT(NDIM,*),VOL(NELEM),
     1 ZROE(NOFVAR,*), ZTURB(NTURB,*),
     +STIFEL(NTURB,NTURB,NOFVERT,NOFVERT), NODRES(NTURB,NOFVERT),
     +NEWRES(NTURB,NOFVERT), VCZ(NTURB,NOFVERT),VCDZ(NTURB,NOFVERT),
     4VCB(NDIM,NOFVERT)
C
C     NODRES(1:NTURB,1:NOFVERT) is used to accumulate the
C         nodal residual in conserved variables and scatter
C         it to the RHS PETSc vector
C     NEWRES(1:NTURB,1:NOFVERT) same as NODRES, but for the
C         perturbed dependent variable (only Newton iteration)
C     TSTEP(1:NOFVERT) is used to accumulate the timestep
C
C     ICN stores the vertices of the current element (0-based indexing)
C         and then scatter it to the PETSc vector PetscVecDT
C
      EXTERNAL ScalarScheme,MatrixScheme,Model
C
      INTEGER JVAR,IVAR,IVERT,JVERT,IELEM,NP,M,IOFF,IADDR
      INTEGER IFAIL,N4
      DOUBLE PRECISION EPS
C
      DOUBLE PRECISION TSTEP(MAXNOFVERT)
C
      INTEGER ICN(MAXNOFVERT)
      DOUBLE PRECISION VCN(12),VOLUME(MAXTIMLEVS+1),DUMMY(400),RWORK(20)
      LOGICAL COMPRESSIBLE,MATRIX_ASSEMBLY
C
#ifdef BUDGET
      INCLUDE 'tdebug.com'
      INCLUDE 'nloc'
C
C     FORTRAN stack
C
      DOUBLE PRECISION DSTAK(1)
      COMMON /CSTAK/ DSTAK
      INTEGER ISTAK(1)
      EQUIVALENCE(DSTAK(1),ISTAK(1))
C
      INTEGER istkgt,loc,npoin
#endif
C
C     Some initializations ....
C
C     the "implicit" matrix is only computed by FDs
C
      MATRIX_ASSEMBLY = .FALSE.
C
      N4 = NTURB*NTURB*NOFVERT*NOFVERT
      NP = NPOIN + NGHOST + NPNOD 
C
      COMPRESSIBLE = ABS(KAN) .EQ. 4
C
C     set vorticity at trip point
C
      IF(TTFLAG.EQ.1)THEN
          CALL TSETUP(TTELEM,NELEM,ZROE,NDIM,NOFVERT,NOFVAR,
     +                (NPOIN+NGHOST+NPNOD),COMPRESSIBLE,RWORK)
          TST = RWORK(3)
          write(6,*)'vorticity at trip point is ',tst
      ENDIF
C
#ifdef BUDGET
      MATRIX_ASSEMBLY = .TRUE.
#endif
C
      DO 2000 IELEM = 1,NELEM
C
#ifdef BUDGET
      write(6,*)ielem
      call icopy(nofvert,icn,1,kcn,1)
#endif
C
C     The element stiffness matrix is initialized to 0.d0
C
          IF (TIMEIMPL) CALL DINIT(N4,ZERO,STIFEL,1)
C
C     set local residual and timestep to zero
C
          CALL DINIT(NOFVERT*NTURB,ZERO,NODRES,1)
          CALL DINIT(NOFVERT,ZERO,TSTEP,1)
C
C**********************************************
C
C     eddy viscosity
C
C**********************************************
C
C
          CALL CELPTR(IELEM, NELEM, ICELNOD, ICELFAC, VOL, ZTURB,
     +                VFACNOR, XYZDOT, NDIM, NOFVERT, NTURB, NP, ICN, 
     3                VCZ, VCN, VCB, VOLUME)
C
!         CALL R8Mat_Print('General',' ',NDIM,NofvERT,VCB,
!    +                NDIM,
!    &                'grid velocity ',IFAIL)
C
          CALL TSETUP(IELEM,NELEM, ZROE, NDIM,NOFVERT, NOFVAR,
     +                (NPOIN+NGHOST+NPNOD),COMPRESSIBLE,RWORK)
C
C
C**********************************************
C
C     Compute nodal residual and timestep
C
C**********************************************
C
          CALL MODEL(IELEM,VCN,VCZ,VCB,NDIM,NOFVERT,
     1    NTURB,NODRES,TSTEP,STIFEL,VOLUME,MATRIX_ASSEMBLY,
     2    ScalarScheme,MatrixScheme,RWORK)
C
C
C     Insert nodal residual and timestep into PETSc vectors
C
          CALL VecSetValues(PetscVecDT,NOFVERT,ICN,TSTEP,ADD_VALUES,
     &                      IFAIL)
C
C     This ugly copy is needed because VecSetValuesBlocked only
C     allows 1D arrays
C
          CALL DCOPY(NTURB*NOFVERT,NODRES,1,DUMMY,1)
          IF(NTURB.EQ.1)THEN
              CALL VecSetValues(PetscVecRHS,NOFVERT,ICN,DUMMY,
     +                          ADD_VALUES,IFAIL)
          ELSE
              CALL VecSetValuesBlocked(PetscVecRHS,NOFVERT,ICN,DUMMY,
     +                                 ADD_VALUES,IFAIL)
          ENDIF
C
          IF(.NOT.TIMEIMPL)GOTO 2000
C
          IF(MATRIX_ASSEMBLY)GOTO 1000
C
C     Compute Jacobian by finite differences
C
          DO IVERT = 1, NOFVERT
              DO IVAR = 1, NTURB
                  CALL DCOPY(NTURB*NOFVERT,VCZ,1,VCDZ,1)
C
                  EPS = ROOT_MACHINE_EPS*MAX(ABS(VCZ(IVAR,IVERT)),ONE)*
     +            SIGN(ONE,VCZ(IVAR,IVERT))
                  VCDZ(IVAR,IVERT) = VCZ(IVAR,IVERT) + EPS
C
                  CALL MODEL(IELEM,VCN,VCDZ,VCB,NDIM,NOFVERT,
     +            NTURB,NEWRES,TSTEP,DUMMY,VOLUME(1),.FALSE.,
     +            ScalarScheme,MatrixScheme,RWORK )
 
C
C     construct the jacobian entries
C
                  DO JVAR = 1, NTURB
                      DO JVERT = 1, NOFVERT
                          STIFEL(JVAR,IVAR,JVERT,IVERT) = -(NEWRES
     +                    (JVAR,JVERT)-NODRES(JVAR,JVERT))/EPS
C
                      ENDDO ! JVERT
                  ENDDO ! JVAR
             ENDDO ! IVAR
          ENDDO ! IVERT
 1000     CONTINUE
C
C     Insert element matrices into the global one
C
          IF(NTURB.EQ.1)THEN
C
C     Scalar problems, i.e. 1-eqn turbulence model ******************
C
#ifdef MPI
             CALL MatSetValuesLocal(PetscMatA,NOFVERT,ICN(1),NOFVERT,
     +                ICN(1),STIFEL(1,1,1,1),ADD_VALUES,IFAIL)
 
#else
             CALL MatSetValues(PetscMatA,NOFVERT,ICN,NOFVERT,ICN,
     +                STIFEL(1,1,1,1),ADD_VALUES,IFAIL)
#endif
          ELSE ! NTURB
C
C     2-eqn (or more) turbulence model
C
C     this part has NEVER been tested, because only SA is available
C
              DO JVERT = 1,NOFVERT
                 m = (jvert-1)*NOFVERT*NTURB*NTURB
                 DO IVERT = 1,NOFVERT
                    ioff = m + (IVERT-1)*NTURB
                    do jvar = 1, NTURB
                       iaddr = ioff + (jvar-1)*NTURB*NOFVERT
                       do ivar = 1, NTURB
                          DUMMY(iaddr+ivar) = 
     &                         STIFEL(ivar,jvar,IVERT,JVERT)
                       enddo ! i
                    enddo ! j
#ifdef PRINT_MATRICES
                     write(6,*)ivert,jvert
                     CALL R8Mat_Print('General',' ',NTURB,NTURB,
     +               stifel(1,1,ivert,jvert), NTURB,
     &               'Jacobian Matrix in setupRHS_t (1) ',IFAIL)
#endif
                 enddo ! IVERT
              enddo ! JVERT
C
C Insert all at once
C
#ifdef MPI
              CALL MatSetValuesBlockedLocal(PetscMatA,NOFVERT,
     +                        ICN,NOFVERT,ICN,DUMMY,
     +                         ADD_VALUES, IFAIL)
#else
              CALL MatSetValuesBlocked(PetscMatA,NOFVERT,ICN,
     +                               NOFVERT,ICN,DUMMY,ADD_VALUES,
     +                            IFAIL)
#endif
         ENDIF ! NTURB
C
 2000 CONTINUE
caldo
#ifdef BUDGET
      call vecgetsize(dt,npoin,ifail)
      write(6,*)ifail,npoin,lvol,lcelnod,nofvert,nelem
      loc = istkgt(npoin,4)
      call median(dstak(loc),npoin,dstak(lvol),istak(lcelnod),
     +            nofvert,nelem)
      write(6,*)'beyond median'
C
      call dcopy(npoin,tmpdif1,1,tmpdiff,1)
      call daxpy(npoin,ONE,tmpdif2,1,tmpdiff,1)
C
      call dcopy(npoin,tmpdiff,1,tmpsum,1)
      call daxpy(npoin,ONE,tmpsou1,1,tmpsum,1)
      call daxpy(npoin,ONE,tmpsou2,1,tmpsum,1)
C
C     SUM = PROD - DESTR + DIFF
C
      call scala(npoin,tmpconv,dstak(loc))
      call scala(npoin,tmpdif1,dstak(loc))
      call scala(npoin,tmpdif2,dstak(loc))
      call scala(npoin,tmpsou1,dstak(loc))
      call scala(npoin,tmpsou2,dstak(loc))
      call scala(npoin,tmpdiff,dstak(loc))
      call scala(npoin,tmpsum,dstak(loc))
C
      call scala(npoin,tmpsou3,dstak(loc))
C
      call istkrl(1)
      call SOLZNE('file030.dat',tmpconv,1,NPOIN,'w')
      call SOLZNE('file031.dat',tmpdif1,1,NPOIN,'w')
      call SOLZNE('file032.dat',tmpdif2,1,NPOIN,'w')
      call SOLZNE('file033.dat',tmpsou1,1,NPOIN,'w')
      call SOLZNE('file034.dat',tmpsou2,1,NPOIN,'w')
      call SOLZNE('file036.dat',tmpdiff,1,NPOIN,'w')
      call SOLZNE('file037.dat',tmpsum,1,NPOIN,'w')
      call SOLZNE('file035.dat',tmpsou3,1,NPOIN,'w')
      stop
#endif
      RETURN
      END

C
      SUBROUTINE SCALA(NPOIN,V,DT)


C     .. Scalar Arguments ..
      INTEGER NPOIN
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION DT(*),V(*)
C     ..
C     .. Local Scalars ..
      INTEGER I
C     ..
      DO 1 I = 1,NPOIN
          V(I) = V(I)/DT(I)
    1 CONTINUE
      RETURN

      END

@


1.21
log
@calls to MatSetValues and VecSetValues had to be modified
following petsc release 3.8
@
text
@d34 1
a34 1
C     $Id: setupRHS_t.F,v 1.21 2020/04/21 16:47:49 abonfi Exp $
d233 2
a234 2
             CALL MatSetValuesLocal(PetscMatA,NOFVERT,ICN,NOFVERT,ICN,
     +                STIFEL(1,1,1,1),ADD_VALUES,IFAIL)
@


1.20
log
@renamed a call
@
text
@d1 27
d30 2
a31 2
     3                    NPOIN,NGHOST,NPNOD,NDIM,
     +                    NOFVERT,NOFVAR,NTURB,DT,RHS,A,
d34 1
a34 3
      IMPLICIT NONE
C
C     $Id: setupRHS_t.F,v 1.19 2016/11/10 11:25:13 abonfi Exp abonfi $
a38 1
#include "petsc/finclude/petscsys.h"
d41 5
d50 2
a51 2
      Vec DT,RHS
      Mat A
a60 10
C     On entry:
C     --------
C
C     NDIM    dimension of the space (2 or 3)
C     NOFVERT number of vertices per element (=NDIM+1, since
C             only triangles or tetrahedra are allowed)
C     NTURB  number of variables (degrees of freedom)
C             in each meshpoint
C     NELEM   no. of processor owned elements (triangles/tetrahedra);
C             global number of elements in the uni-processor case
a63 3
C     ICELNOD(1:NOFVERT,1:NELEM)
C            Cell to Node pointer : ICELNOD(i,ielem) gives the
C            global node number of the i-th vertex of the ielem-th cell
a70 2
C     FACNOR(1:NDIM,1:NFACE)  cartesian components
C                             of the NFACE faces/edges
d77 3
a79 1
C         and then scatter it to the PETSc vector DT
d83 1
a83 1
      INTEGER JVAR,IVAR,IVERT,JVERT,IELEM,NP
a88 2
C     ICN stores the vertices of the current element (0-based indexing)
C
d109 2
d112 1
d157 1
d179 7
a185 1
          CALL VecSetValues(DT,NOFVERT,ICN,TSTEP,ADD_VALUES,IFAIL)
d187 2
a188 2
              CALL VecSetValues(RHS,NOFVERT,ICN,NODRES, ADD_VALUES,
     +        IFAIL)
d190 2
a191 2
              CALL VecSetValuesBlocked(RHS,NOFVERT,ICN,NODRES,
     +        ADD_VALUES,IFAIL)
d200 2
a201 2
          DO 5 IVERT = 1, NOFVERT
              DO 5 IVAR = 1, NTURB
d204 2
a205 2
                  EPS = ROOT_MACHINE_EPS*MAX(ABS(VCZ(IVAR,IVERT)),1.d0)*
     +            SIGN(1.d0,VCZ(IVAR,IVERT))
d215 2
a216 2
                  DO 5 JVAR = 1, NTURB
                      DO 5 JVERT = 1, NOFVERT
d220 4
a223 1
    5     CONTINUE
d230 1
a230 1
C     Scalar problems ******************
a231 2
              DO 35 IVERT = 1,NOFVERT
                  DO 35 JVERT = 1,NOFVERT
d233 2
a234 2
                      CALL MatSetValuesLocal(A,1,ICN(IVERT),1, ICN
     +                (JVERT),STIFEL(1,1,IVERT,JVERT), ADD_VALUES,IFAIL)
d237 2
a238 2
                      CALL MatSetValues(A,1,ICN(IVERT),1,ICN(JVERT),
     +                STIFEL(1,1,IVERT,JVERT),ADD_VALUES,IFAIL)
d240 25
a264 2
   35         CONTINUE
          ELSE
d266 1
a267 2
              DO 37 IVERT = 1,NOFVERT
                  DO 37 JVERT = 1,NOFVERT
d269 3
a271 3
                      CALL MatSetValuesBlockedLocal(A,1,ICN(IVERT),1,
     +                ICN(JVERT),STIFEL(1,1,IVERT,JVERT), ADD_VALUES,
     +                IFAIL)
d273 3
a275 2
                      CALL MatSetValuesBlocked(A,1,ICN(IVERT),1,ICN
     +                (JVERT), STIFEL(1,1,IVERT,JVERT),ADD_VALUES,IFAIL)
d277 1
a277 8
#if 0
                      write(6,*)ivert,jvert
                      CALL R8Mat_Print('General',' ',Nofvar,Nofvar,stifel(1,
     +                1,ivert,jvert), Nofvar,
     &                'Jacobian Matrix in SetupRHS_t (1) ',IFAIL)
#endif
   37         CONTINUE
          ENDIF
d290 1
a290 1
      call daxpy(npoin,1.d0,tmpdif2,1,tmpdiff,1)
d293 2
a294 2
      call daxpy(npoin,1.d0,tmpsou1,1,tmpsum,1)
      call daxpy(npoin,1.d0,tmpsou2,1,tmpsum,1)
@


1.19
log
@changed the location of petsc's header files
when migrating to version 3.6
@
text
@d9 1
a9 1
C     $Id: setupRHS_t.F,v 1.18 2013/09/17 09:57:31 abonfi Exp abonfi $
d140 1
a140 1
!         CALL X04CAF('General',' ',NDIM,NofvERT,VCB,
d231 1
a231 1
                      CALL X04CAF('General',' ',Nofvar,Nofvar,stifel(1,
@


1.18
log
@VOLUME has become an array so that cell volumes at the previous
time instants can be stored
@
text
@d9 1
a9 1
C     $Id: setupRHS_t.F,v 1.17 2013/05/24 06:18:49 abonfi Exp abonfi $
d14 3
a16 3
#include "finclude/petscsys.h"
#include "finclude/petscvec.h"
#include "finclude/petscmat.h"
@


1.17
log
@fixed a bug caused by the introduction of the grid velocities that
plagued the tandem solution strategy for turbulent flows
@
text
@d9 1
a9 1
C     $Id: setupRHS_t.F,v 1.16 2013/01/26 12:15:39 abonfi Exp abonfi $
d76 1
a76 1
      DOUBLE PRECISION VCN(12),VOLUME,DUMMY(400),RWORK(20)
d185 2
a186 3
     +            NTURB,NEWRES,
     +            TSTEP,DUMMY,VOLUME,.FALSE.,ScalarScheme,MatrixScheme,
     +            RWORK )
@


1.16
log
@changed the name of an included header file
@
text
@d9 1
a9 1
C     $Id: setupRHS_t.F,v 1.15 2012/04/03 12:07:47 abonfi Exp abonfi $
d140 3
d154 1
a154 1
          CALL MODEL(IELEM,VCN,VCZ,NDIM,NOFVERT,
d184 1
a184 1
                  CALL MODEL(IELEM,VCN,VCDZ,NDIM,NOFVERT,
@


1.15
log
@changes needed to pass the grid velocity down to the lower level routines
@
text
@d9 1
a9 1
C     $Id: setupRHS_t.F,v 1.14 2011/09/16 07:19:48 abonfi Exp abonfi $
d24 2
a25 2
      INCLUDE 'constants'
      INCLUDE 'three'
@


1.14
log
@Changed PETSc header file to comply with version 3.1
@
text
@d1 2
a2 2
      SUBROUTINE SetupRHS_t(ICELNOD,ICELFAC,VFACNOR,VOL,ZROE,ZTURB,
     +                    STIFEL,NODRES,NEWRES,VCZ,VCDZ,NELEM,
d9 1
a9 1
C     $Id: setupRHS_t.F,v 1.13 2009/06/11 13:10:58 abonfi Exp abonfi $
d49 2
a50 2
      DOUBLE PRECISION VFACNOR(NDIM,*),VOL(NELEM), ZROE(NOFVAR,*),
     1 ZTURB(NTURB,*),
d52 2
a53 1
     +NEWRES(NTURB,NOFVERT), VCZ(NTURB,NOFVERT),VCDZ(NTURB,NOFVERT)
d138 2
a139 1
     +    VFACNOR, NDIM, NOFVERT, NTURB, NP, ICN, VCZ, VCN, VOLUME)
@


1.13
log
@location of PETSc include file ahs chanegd with release 3.0.0
@
text
@d9 1
a9 1
C     $Id: setupRHS_t.F,v 1.12 2009/06/11 09:00:29 abonfi Exp abonfi $
d14 1
a14 1
#include "finclude/petsc.h"
@


1.12
log
@now passing NPNOD among the arguments of the call
@
text
@d9 1
a9 1
C     $Id: setupRHS_t.F,v 1.11 2007/11/14 10:14:35 abonfi Exp abonfi $
d14 3
a16 3
#include "include/finclude/petsc.h"
#include "include/finclude/petscvec.h"
#include "include/finclude/petscmat.h"
@


1.11
log
@ROOT_MACHINE_EPS is now computed only once in the main
and stored in common STCOM
@
text
@d2 2
a3 1
     +                    STIFEL,NODRES,NEWRES,VCZ,VCDZ,NELEM,NDIM,
d9 1
a9 1
C     $Id: setupRHS_t.F,v 1.10 2007/11/14 08:45:35 abonfi Exp abonfi $
d30 1
a30 1
      INTEGER NDIM,NOFVERT,NTURB,NELEM,NOFVAR
d66 1
a66 1
      INTEGER JVAR,IVAR,IVERT,JVERT,IELEM
d96 1
d104 1
a104 1
     +                COMPRESSIBLE,RWORK)
d137 1
a137 1
     +    VFACNOR, NDIM, NOFVERT, NTURB, ICN, VCZ, VCN, VOLUME)
d140 1
a140 1
     +                COMPRESSIBLE,RWORK)
@


1.10
log
@beyond col 71
@
text
@d8 1
a8 1
C     $Id: setupRHS_t.F,v 1.9 2005/10/22 11:07:40 abonfi Exp abonfi $
d16 3
a22 3
      INCLUDE 'paramt.h'
C
C
a23 3
      INCLUDE 'bnd.h'
C
C
a24 1
      INCLUDE 'implicit.h'
d27 1
a27 1
C
d63 1
a63 2
      EXTERNAL ScalarScheme,MatrixScheme,Model,NL_scheme,NL2_scheme,
     +NS_scheme
d67 1
a67 1
      DOUBLE PRECISION D1MACH,dnrm2
d69 1
a69 3
      DOUBLE PRECISION TSTEP(4)
C
      DOUBLE PRECISION EPS,ROOT_MACHINE_EPS
d73 1
a73 1
      INTEGER ICN(4)
a95 6
C     problems with CRAY
C
caldo EPS = 100.*D1MACH(1)
C
caldo ROOT_MACHINE_EPS = SQRT(EPS)
      ROOT_MACHINE_EPS=1.d-07
d149 1
a149 1
     2    NS_scheme,MatrixScheme,RWORK)
d179 1
a179 1
     +            TSTEP,DUMMY,VOLUME,.FALSE.,NS_scheme,MatrixScheme,
@


1.9
log
@fixed a missing argument while calling turbulent setup
@
text
@d8 1
a8 1
C     $Id: setupRHS_t.F,v 1.8 2005/09/09 08:47:41 abonfi Exp abonfi $
d239 2
a240 1
     +                1,ivert,jvert), Nofvar,'Jacobian Matrix ',IFAIL)
@


1.8
log
@changes required to handle ANNULAR cascade flows
@
text
@d8 1
a8 1
C     $Id: setupRHS_t.F,v 1.7 2001/10/17 15:35:19 abonfi Exp $
d83 1
d114 2
a115 2
          CALL TSETUP(TTELEM, ZROE, NDIM,NOFVERT, NOFVAR,
     +    (ABS(KAN).EQ.4),RWORK)
d125 1
d150 2
a151 2
          CALL TSETUP(IELEM, ZROE, NDIM,NOFVERT, NOFVAR,
     +    (ABS(KAN).EQ.4),RWORK)
@


1.7
log
@a bit of re-writing for better debugging
@
text
@d8 1
a8 1
C     $Id: setupRHS_t.F,v 1.6 2000/11/15 09:17:25 aldo Exp abonfi $
d145 2
a146 2
          CALL CELPTR(IELEM, ICELNOD, ICELFAC, VOL, ZTURB, VFACNOR,
     +    NDIM, NOFVERT, NTURB, ICN, VCZ, VCN, VOLUME)
@


1.6
log
@rmoved included file
@
text
@d8 1
a8 1
C     $Id: setupRHS_t.F,v 1.5 2000/11/08 09:40:52 aldo Exp aldo $
a21 4
caldo double precision s3min,s3max,s3
caldo double precision s1min,s1max,s1
caldo double precision s2min,s2max,s2
caldo common/trashcom/s3min,s3max,s2min,s2max,s1min,s1max
a33 1
      INTEGER lprod,ldest,lconv,ldif1,ldif2,lxy,j,istkgt,loc,npoin
d67 2
a68 1
      EXTERNAL ScalarScheme,MatrixScheme,Model,NL_scheme
a80 2
#ifdef BUDGET
#endif
a82 9
      DOUBLE PRECISION tmpconv(16500)
      DOUBLE PRECISION tmpdif1(16500)
      DOUBLE PRECISION tmpdif2(16500)
      DOUBLE PRECISION tmpsou1(16500)
      DOUBLE PRECISION tmpsou2(16500)
      DOUBLE PRECISION tmpsou3(16500)
      DOUBLE PRECISION tmpdiff(16500)
      DOUBLE PRECISION tmpsum(16500)
      DOUBLE PRECISION tmpdum(16500)
d84 11
d119 3
d124 4
d160 1
a160 1
     2    NL_scheme,MatrixScheme,RWORK)
d190 1
a190 1
     +            TSTEP,DUMMY,VOLUME,.FALSE.,NL_scheme,MatrixScheme,
a242 3
c     write(6,*)s1min,s1max
c     write(6,*)s2min,s2max
c     write(6,*)s3min,s3max
d246 1
d248 3
a250 2
      call median(dstak(loc),dstak(lvol),istak(lcelnod),nofvert,
     +            nelem)
@


1.5
log
@commented out a call to SQRT that caused problems on CRAY
@
text
@d8 1
a8 1
C     $Id: setupRHS_t.F,v 1.4 2000/10/26 15:32:03 aldo Exp aldo $
a9 5
C     DOUBLE PRECISION DSTAK(1)
C     COMMON /CSTAK/ DSTAK
C     INTEGER ISTAK(1)
C     EQUIVALENCE (DSTAK(1),ISTAK(1))
C     include 'nloc'
d22 4
a25 4
      double precision s3min,s3max,s3
      double precision s1min,s1max,s1
      double precision s2min,s2max,s2
      common/trashcom/s3min,s3max,s2min,s2max,s1min,s1max
a34 1
      INCLUDE 'IO'
@


1.4
log
@removed a few arguments from the call to the turbulence model
@
text
@d8 1
a8 1
C     $Id: setupRHS_t.F,v 1.3 2000/10/19 16:10:34 aldo Exp aldo $
d116 1
a116 1
      ROOT_MACHINE_EPS = SQRT(EPS)
@


1.3
log
@changed include file names for PETSc rev. 2.0.29
@
text
@d8 1
a8 1
C     $Id: setupRHS_t.F,v 1.2 2000/08/18 13:56:53 aldo Exp aldo $
d10 5
a14 5
      DOUBLE PRECISION DSTAK(1)
      COMMON /CSTAK/ DSTAK
      INTEGER ISTAK(1)
      EQUIVALENCE (DSTAK(1),ISTAK(1))
      include 'nloc'
a109 1
c     MATRIX_ASSEMBLY = .true.
a118 8
c         write(6,*)'In setupRHS_t',npoin
c         write(6,*)'In setupRHS_t',dnrm2(npoin,zturb ,1)
c
c     lprod=istkgt(nelem,4)
c     ldest=istkgt(nelem,4)
c     ldif1=istkgt(nelem,4)
c     ldif2=istkgt(nelem,4)
c     lconv=istkgt(nelem,4)
d163 1
a163 10
     2    NL_scheme,MatrixScheme,RWORK,
     &tmpconv,tmpdif1,tmpdif2,tmpsou1,tmpsou2,tmpsou3,
     &tmpdiff,tmpsum,icn)
C    2    NL_scheme,MatrixScheme,RWORK)
caldo
c         dstak(lprod+ielem-1) = rwork(10)
c         dstak(ldest+ielem-1) = rwork(11)
c         dstak(lconv+ielem-1) = rwork(12)
c         dstak(ldif1+ielem-1) = rwork(13)
c         dstak(ldif2+ielem-1) = rwork(14)
d165 1
d194 1
a194 3
     +            RWORK ,
     &tmpdum,tmpdum,tmpdum,tmpdum,tmpdum,tmpdum,
     &tmpdum,tmpdum,icn)
@


1.2
log
@using TTFLAG to compute vorticity at the trip point
@
text
@d8 1
a8 1
C     $Id: setupRHS_t.F,v 1.1 2000/06/23 16:42:59 aldo Exp aldo $
d19 2
a20 2
#include "include/finclude/vec.h"
#include "include/finclude/mat.h"
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
C     $Id: setupRHS.F,v 1.5 2000/03/31 08:58:06 aldo Exp aldo $
d110 1
a111 6
      s1min=10000000.
      s1max=0.0
      s2min=10000000.
      s2max=0.0
      s3min=10000000.
      s3max=0.0
d132 1
a132 1
          CALL TSETUP(1859, ZROE, NDIM,NOFVERT, NOFVAR,
@
