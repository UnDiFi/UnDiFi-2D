head	1.39;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.39
	release3_13_0:1.39
	release3_12_0:1.39
	release3_11_0:1.39
	release3_10_0:1.39
	release3_8_0:1.39
	release3_7_1:1.38
	release3_7_0:1.38
	release3_4_5:1.36
	release3_4_4:1.36
	release3_4_3:1.36
	release3_4_2:1.36
	release3_4_1:1.36
	release3_4_0:1.35
	release3_3_5:1.35
	release3_3_4:1.35
	release3_3_3:1.35
	release3_3_2:1.35
	release3_3_1:1.35
	release3_3_0:1.34;
locks; strict;
comment	@c @;


1.39
date	2020.04.23.09.46.19;	author abonfi;	state Exp;
branches;
next	1.38;

1.38
date	2016.11.10.12.06.40;	author abonfi;	state Exp;
branches;
next	1.37;

1.37
date	2016.11.10.11.25.13;	author abonfi;	state Exp;
branches;
next	1.36;

1.36
date	2013.06.06.10.34.38;	author abonfi;	state Exp;
branches;
next	1.35;

1.35
date	2013.01.26.11.44.02;	author abonfi;	state Exp;
branches;
next	1.34;

1.34
date	2011.09.16.07.21.18;	author abonfi;	state Exp;
branches;
next	1.33;

1.33
date	2009.06.11.13.10.58;	author abonfi;	state Exp;
branches;
next	1.32;

1.32
date	2008.02.25.09.43.34;	author abonfi;	state Exp;
branches;
next	1.31;

1.31
date	2007.12.20.09.31.33;	author abonfi;	state Exp;
branches;
next	1.30;

1.30
date	2005.07.17.19.07.58;	author aldo;	state Exp;
branches;
next	1.29;

1.29
date	2002.11.02.16.01.10;	author abonfi;	state Exp;
branches;
next	1.28;

1.28
date	2002.02.19.09.19.00;	author abonfi;	state Exp;
branches;
next	1.27;

1.27
date	2000.11.15.09.15.09;	author aldo;	state Exp;
branches;
next	1.26;

1.26
date	2000.10.26.15.27.14;	author aldo;	state Exp;
branches;
next	1.25;

1.25
date	2000.10.19.16.10.34;	author aldo;	state Exp;
branches;
next	1.24;

1.24
date	2000.08.18.13.52.20;	author aldo;	state Exp;
branches;
next	1.23;

1.23
date	2000.06.23.16.50.37;	author aldo;	state Exp;
branches;
next	1.22;

1.22
date	2000.06.09.16.30.28;	author aldo;	state Exp;
branches;
next	1.21;

1.21
date	99.12.27.09.21.45;	author aldo;	state Exp;
branches;
next	1.20;

1.20
date	99.11.05.20.46.24;	author aldo;	state Exp;
branches;
next	1.19;

1.19
date	99.09.01.11.23.35;	author aldo;	state Exp;
branches;
next	1.18;

1.18
date	98.11.25.17.01.52;	author aldo;	state Exp;
branches;
next	1.17;

1.17
date	98.11.17.18.49.50;	author aldo;	state Exp;
branches;
next	1.16;

1.16
date	98.11.07.09.01.00;	author aldo;	state Exp;
branches;
next	1.15;

1.15
date	98.07.25.06.47.29;	author aldo;	state Exp;
branches;
next	1.14;

1.14
date	98.05.17.08.52.27;	author aldo;	state Exp;
branches;
next	1.13;

1.13
date	98.05.10.08.24.31;	author aldo;	state Exp;
branches;
next	1.12;

1.12
date	98.04.07.12.54.21;	author aldo;	state Exp;
branches;
next	1.11;

1.11
date	98.03.05.08.54.35;	author aldo;	state Exp;
branches;
next	1.10;

1.10
date	98.03.02.17.26.55;	author aldo;	state Exp;
branches;
next	1.9;

1.9
date	98.02.25.17.42.34;	author aldo;	state Exp;
branches;
next	1.8;

1.8
date	98.02.13.16.17.58;	author aldo;	state Exp;
branches;
next	1.7;

1.7
date	98.02.12.16.53.51;	author aldo;	state Exp;
branches;
next	1.6;

1.6
date	98.02.09.17.46.01;	author aldo;	state Exp;
branches;
next	1.5;

1.5
date	98.01.26.16.14.08;	author aldo;	state Exp;
branches;
next	1.4;

1.4
date	98.01.24.12.32.47;	author aldo;	state Exp;
branches;
next	1.3;

1.3
date	98.01.11.09.42.08;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	98.01.07.13.37.51;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	98.01.05.10.32.51;	author aldo;	state Exp;
branches;
next	;


desc
@Implicit timestepping for the turbulence eqn. using PETSc
@


1.39
log
@changes required by petsc release 3.8 and
NodalBcs, which is an array of derived type TS
in now passed using arguments in the calls
@
text
@      SUBROUTINE UPDATE4( NDIM, NTURB, NPOIN, solver, B, RHS, ViscT, DT,
     +                    NIT, IFLAG, NodalBcs )
C
C     $Id: update4.F,v 1.38 2016/11/10 12:06:40 abonfi Exp abonfi $
C
CCC#define DO_NOT_UPDATE
C
C     Implicit timestepping for the one-eqn. turbulence model ..
C
CCC#include "petsc/finclude/petscvec.h"
CCC#include "petsc/finclude/petscmat.h"
#include "petsc/finclude/petscksp.h"
CCC#include "petsc/finclude/petscis.h"
!     use petscvec
!     use petscmat
!     use petscis
      use petscksp
C
      IMPLICIT NONE
C
      INCLUDE 'constants.h'
      INCLUDE 'paramt.h'
      INCLUDE 'implicit.h'
      INCLUDE 'bnd.h'
      INCLUDE 'iset.h'
      INTEGER NDNM
      PARAMETER(NDNM=3*NMAX)
      INCLUDE 'conv.com'
      INCLUDE 'nboun.com'
      INCLUDE 'verbose.com'
      INCLUDE 'io.com'
C
      INTEGER MY_PE
      COMMON/MPICOM/MY_PE
C
C
C
      Mat B
      Vec RHS,DT,ViscT
      Vec X
      KSP solver
      IS, dimension(0:*) :: NodalBcs
C
      INTEGER NDIM,NTURB,NPOIN,IFAIL,ITS,NIT
C
      INTEGER IVAR,I,IFLAG,N
      DOUBLE PRECISION CNST,RES0,RATIO2,RATIO1,EPS
      PARAMETER(EPS=1.d-20)
      SAVE RES0,RATIO2,RATIO1,CNST
C
C     ..
C     .. Local Arrays ..
      DOUBLE PRECISION WKSP1(3,MAXNOFVAR),WKSP2(3,MAXNOFVAR),
     &                 WKSP3(3,MAXNOFVAR),WKSP4(3,MAXNOFVAR),
     &                 WKSP5(3,MAXNOFVAR), 
     &                 AL2(MAXNOFVAR,5),AMAX(MAXNOFVAR,5)
      INTEGER WHEREMAX(MAXNOFVAR,5)
C
      DOUBLE PRECISION DNRM2
      EXTERNAL DNRM2
C
      DATA WKSP1,WKSP2,IFAIL,ITS/NDNM*ZERO,NDNM*ZERO,0,-1/
C
      IFLAG = 100
C
C     store the residual of the turbulence eqn. at the previous
C     time level
C
      IF( NIT .EQ. 1 ) RATIO1 = RESL2(1,2)
C
!     CALL VecNorm(RHS,NORM_2,RESL2(1,2),IFAIL)
!     CALL VecNorm(RHS,NORM_INFINITY,RESMAX(1,2),IFAIL)
C
      CALL FindVecStrideAbsMinMax(RHS,RESL2(1,2),RESMAX(1,2),INMAX(1,2),
     &WKSP1,NDIM)
C
      CALL FindVecStrideMinMax(DT,AL2(1,4),AMAX(1,4),WHEREMAX(1,4),
     &WKSP4,NDIM)
C
C
      IF( NIT .EQ. 1 ) THEN
C
C     RATIO1 = RES(ITER-1,NIT)/RES(ITER,1) where ITER refers to the outer
C             iteration counter 1 <= ITER <= NITER while NIT refers
C             to the inner iteration counter 1 <= NIT <= NSUBIT
C
C     store the residual at the first sub-iteration
C
          RES0 = RESL2(1,2)
          RATIO1 = RATIO1/RES0
      ENDIF
      IF (ITER.EQ.1) RATIO1 = 1.d0
C
C     RATIO2 = RES(ITER,1)/RES(ITER,NIT)
C
      RATIO2 = RES0/RESL2(1,2) 
C
      CNST = MAX(1.d0,RATIO1)*MAX(1.d0,RATIO2)
      CNST = MIN(CFL(2)*CNST,CFLMAX(2))
C
C     divide V_i/Dt by the CFL number ...
C
      CALL VecScale(DT,ONE/CNST,IFAIL)
C
C     Adds V_i/Dt to the diagonal elements of B ...
C
      CALL MatDiagonalSet(B,DT,ADD_VALUES,IFAIL)
C
C     We do not need DT any more
C
      CALL VecDestroy(DT,IFAIL) 
C
C     modify the stiffness matrix structure to account for
C     no-slip wall b.c. this is done only for the first iteration
C
caldo IF( ITER .EQ. 1 )THEN
          CALL LHSBC5( B, NodalBcs )
caldo ENDIF
C
      N=NPOIN*NTURB
C
C     create a vector to store the solution
C
#ifdef MPI
      CALL VecCreateMPI(PETSC_COMM_WORLD,N,PETSC_DECIDE,X,IFAIL)
#else
      CALL VecCreateSeq(PETSC_COMM_SELF,N,X,IFAIL)
#endif
#ifdef DO_NOT_UPDATE
      WRITE(6,*)'Not updating turbulence'
      goto 656
#endif
C
C     Sets the matrix associated with the linear system
C
      CALL KSPSetOperators(solver,B,B,IFAIL)
      CALL KSPSetup(solver,IFAIL)
C
C     Solve THE linear system
C
      CALL KSPSolve(solver,RHS,X,IFAIL)
      CALL KSPGetIterationNumber(solver,ITS,IFAIL)
C
C     Update the nodal unknown vector by forming ViscT := X + ViscT
C
      CALL VecAXPY(ViscT,ONE,X,IFAIL)
  656 continue
C
C     Monitor the norms of the update .. 

      CALL VecNorm(X,NORM_2,DELL2(1,2),IFAIL)
      CALL VecNorm(X,NORM_INFINITY,DELMAX(1,2),IFAIL)
C
C     Monitor the L2 and L infinity norms of the update ..
C
      CALL FindVecStrideAbsMinMax(X,DELL2(1,2),DELMAX(1,2),INDEL(1,2),
     &WKSP2,NDIM)
      CALL FindVecStrideMinMax(ViscT,AL2(1,5),AMAX(1,5),WHEREMAX(1,5),
     &WKSP5,NDIM)
C
C
      IF(MY_PE.EQ.0)THEN
          IF ((ITER/ISTMP)*ISTMP.EQ.ITER) THEN
             WRITE(IWUNIT,200)ITER,ITS,CNST
C
C     Print out the convergence history ..
C
             WRITE(IWUNIT,215)
             DO 20 IVAR = 1 , NTURB
                WRITE(IWUNIT,210)IVAR,DLOG10(MAX(EPS,RESL2(IVAR,2))),
     &          DLOG10(MAX(EPS,RESMAX(IVAR,2))),INMAX(IVAR,2),
     2          (WKSP1(I,IVAR),I=1,3)
   20        CONTINUE
             WRITE(IWUNIT,225)
             DO 30 IVAR = 1 , NTURB
                WRITE(IWUNIT,210)IVAR,DLOG10(MAX(EPS,DELL2(IVAR,2))),
     &          DLOG10(MAX(EPS,DELMAX(IVAR,2))),INDEL(IVAR,2),
     2          (WKSP2(I,IVAR),I=1,3)
   30        CONTINUE
              WRITE (IWUNIT,FMT=240)
              DO 34 IVAR = 1,NTURB
                  WRITE (IWUNIT,FMT=212) IVAR,
     &            AL2(IVAR,4), AMAX(IVAR,4),
     &            WHEREMAX(IVAR,4), (WKSP4(I,IVAR),I=1,3)
   34         CONTINUE
              WRITE (IWUNIT,FMT=230)
              DO 36 IVAR = 1,NTURB
                  WRITE (IWUNIT,FMT=212) IVAR,
     &            AL2(IVAR,5), AMAX(IVAR,5),
     &            WHEREMAX(IVAR,5), (WKSP5(I,IVAR),I=1,3)
   36         CONTINUE
         ENDIF
C
C     Writing convergence history to file ...
C
      WRITE(IHST3,235)NITER,ITS,RESL2(1,2),RESMAX(1,2),CNST
      ENDIF
       
C     clear memory allocated for the solution vector
C
      CALL VecDestroy(X,IFAIL)
C
C     this is the Zingg stuff
C
!     IF(RESL2(1,2).LE.RESL2(IVCNVG,1))IFLAG = 0
C
      RETURN
  200 FORMAT(5X,70('-'),/,14X,'TURBULENCE ITERATION # ',I4,
     +' (',I4,') CFL = ',E10.4/,5X,70('-'),/,
     +5X,70('-'),/,5X,'Var.',4X,'L2-norm',3X,'L_infty',3X,
     +'node #',3X,'(',4X,'x',7X,'y',7X,'z',4X,')',/,5X,70('-'))
  210 FORMAT(5X,I1,5X,F10.5,1X,F10.5,2X,I5,3X,
     +'(',2(F8.5,','),F8.5,')')
  212 FORMAT (5X,I1,5X,E10.3,1X,E10.3,1X,I6,3X,'(', 2(F8.4,','),F8.4,
     +')')
  215 FORMAT(5X,'Nodal Residual'/)
  225 FORMAT(5X,'Nodal Update'/)
  230 FORMAT (5X,'Nodal Values',/)
  235 FORMAT (I5,1X,I4,3 (1X,E10.4))
  240 FORMAT (5X,'Timestep ',/)
C
      END
@


1.38
log
@KSPSetOperators() no longer has the MatStructure argument.
@
text
@d2 1
a2 1
     +                    NIT, IFLAG )
d4 1
a4 1
C     $Id: update4.F,v 1.37 2016/11/10 11:25:13 abonfi Exp abonfi $
a5 1
      IMPLICIT NONE
d10 2
a11 3
#include "petsc/finclude/petscsys.h"
#include "petsc/finclude/petscvec.h"
#include "petsc/finclude/petscmat.h"
d13 5
a17 1
#include "petsc/finclude/petscis.h"
d19 1
a19 4
      Mat B
      Vec RHS,DT,ViscT
      Vec X
      KSP solver
d25 1
a32 2
#include "iset.com"
C
d36 8
d54 3
a56 2
     &  WKSP3(3,MAXNOFVAR),WKSP4(3,MAXNOFVAR),
     &  WKSP5(3,MAXNOFVAR), AL2(MAXNOFVAR,5),AMAX(MAXNOFVAR,5)
d117 1
a117 1
          CALL LHSBC5( B )
@


1.37
log
@changed the location of petsc's header files
when migrating to version 3.6
@
text
@d4 1
a4 1
C     $Id: update4.F,v 1.36 2013/06/06 10:34:38 abonfi Exp abonfi $
d129 1
a129 1
      CALL KSPSetOperators(solver,B,B,SAME_NONZERO_PATTERN,IFAIL)
@


1.36
log
@now includes bnd.h
@
text
@d4 1
a4 1
C     $Id: update4.F,v 1.35 2013/01/26 11:44:02 abonfi Exp abonfi $
d11 5
a15 5
#include "finclude/petscsys.h"
#include "finclude/petscvec.h"
#include "finclude/petscmat.h"
#include "finclude/petscksp.h"
#include "finclude/petscis.h"
@


1.35
log
@ changed the name of an included header file
@
text
@d4 1
a4 1
C     $Id: update4.F,v 1.34 2011/09/16 07:21:18 abonfi Exp abonfi $
a16 2
#include "iset.com"
C
d24 2
a30 1
      INCLUDE 'implicit.h'
d32 3
@


1.34
log
@Changed PETSc header file to comply with version 3.1
@
text
@d4 1
a4 1
C     $Id: update4.F,v 1.33 2009/06/11 13:10:58 abonfi Exp abonfi $
d24 1
a24 1
      INCLUDE 'constants'
@


1.33
log
@location of PETSc include file ahs chanegd with release 3.0.0
@
text
@d4 1
a4 1
C     $Id: update4.F,v 1.32 2008/02/25 09:43:34 abonfi Exp abonfi $
d11 1
a11 1
#include "finclude/petsc.h"
@


1.32
log
@the Zingg trick
@
text
@d4 1
a4 1
C     $Id: update4.F,v 1.31 2007/12/20 09:31:33 abonfi Exp abonfi $
d11 5
a15 5
#include "include/finclude/petsc.h"
#include "include/finclude/petscvec.h"
#include "include/finclude/petscmat.h"
#include "include/finclude/petscksp.h"
#include "include/finclude/petscis.h"
@


1.31
log
@now monitors where min and max occur
@
text
@d4 1
a4 1
C     $Id: update4.F,v 1.30 2005/07/17 19:07:58 aldo Exp abonfi $
d55 2
d194 4
@


1.30
log
@changes require to upgrade to petsc-2.3.0
@
text
@d4 1
a4 1
C     $Id: update4.F,v 1.29 2002/11/02 16:01:10 abonfi Exp $
d7 1
d39 2
a40 1
      DOUBLE PRECISION CNST,RES0,RATIO2,RATIO1
d43 6
a48 1
      DOUBLE PRECISION WKSP1(3,NMAX),WKSP2(3,NMAX)
d53 1
a53 1
      DATA WKSP1,WKSP2,IFAIL/NDNM*ZERO,NDNM*ZERO,0/
d60 9
a68 2
      CALL VecNorm(RHS,NORM_2,RESL2(1,2),IFAIL)
      CALL VecNorm(RHS,NORM_INFINITY,RESMAX(1,2),IFAIL)
d118 4
a134 1
cold  CALL VecAXPY(ONE,X,ViscT,IFAIL)
d136 1
d143 8
d159 3
a161 2
                WRITE(IWUNIT,210)IVAR,DLOG10(RESL2(IVAR,2)),
     &   DLOG10(RESMAX(IVAR,2)),INMAX(IVAR,2),(WKSP1(I,IVAR),I=1,3)
d165 3
a167 2
                WRITE(IWUNIT,210)IVAR,DLOG10(DELL2(IVAR,2)),
     &   DLOG10(DELMAX(IVAR,2)),INDEL(IVAR,2),(WKSP2(I,IVAR),I=1,3)
d169 12
d199 2
d203 1
a203 1
  230 FORMAT(15X,'NONZERO ENTRIES IN THE REDUCED MATRIX ',I8/)
d205 1
@


1.29
log
@now prints each istmp iterations
@
text
@d1 2
d4 1
a4 2
      SUBROUTINE UPDATE4( NDIM, NTURB, NPOIN, sles, B, RHS, ViscT, DT,
     +                    NIT, IFLAG )
a7 1
C
a9 4
C
C     $Id: update4.F,v 1.28 2002/02/19 09:19:00 abonfi Exp abonfi $
C     $Header: /home0/crocco/abonfi/EulFS.0.11.3/src/seq/RCS/update4.F,v 1.28 2002/02/19 09:19:00 abonfi Exp abonfi $
C
d13 1
a13 2
#include "include/finclude/petscpc.h"
#include "include/finclude/petscsles.h"
a15 1
C
d21 1
a21 4
      SLES sles
      PetscScalar RHS_V(1) 
      PetscOffset RHS_I
      PetscTruth flg 
a28 1
      INCLUDE 'nloc'
d37 3
a39 4
      INTEGER IVAR,LOCA,LOCB,IPOIN,i,LOCX,LOCV,LIWORK,IFLAG,
     +ICOUNT,N
      DOUBLE PRECISION CNST,S,RES0,RATIO2,RATIO1,TEMP
      SAVE RES0,RATIO2,RATIO1,TEMP,ICOUNT,CNST
d44 1
a44 2
      integer        ISTKGT,istkst
      EXTERNAL DNRM2,ISTKGT,istkst
d46 1
a46 1
      DATA WKSP1,WKSP2,IFAIL,ICOUNT/NDNM*ZERO,NDNM*ZERO,2*0/
a75 1
C 
d78 1
a78 1
      CALL VecScale(ONE/CNST,DT,IFAIL)
d107 2
a108 1
      CALL SLESSetOperators(sles,B,B,SAME_NONZERO_PATTERN,IFAIL)
d112 2
a113 1
      CALL SLESSolve(sles,RHS,X,ITS,IFAIL)
d115 1
a115 1
C     Update the nodal unknown vector by forming ViscT := ViscT + X
d117 2
a118 1
      CALL VecAXPY(ONE,X,ViscT,IFAIL)
@


1.28
log
@changed Scalar into PetscScalar to comply with PETSc 2.1.1
@
text
@d11 2
a12 2
C     $Id: update4.F,v 1.27 2000/11/15 09:15:09 aldo Exp abonfi $
C     $Header: /home1/navier/abonfi/EulFS.0.10.13/src/seq/RCS/update4.F,v 1.27 2000/11/15 09:15:09 aldo Exp abonfi $
d136 2
a137 1
  299 WRITE(IWUNIT,200)ITER,ITS,CNST
d141 3
a143 3
      WRITE(IWUNIT,215)
      DO 20 IVAR = 1 , NTURB
         WRITE(IWUNIT,210)IVAR,DLOG10(RESL2(IVAR,2)),
d145 4
a148 4
   20 CONTINUE
      WRITE(IWUNIT,225)
      DO 30 IVAR = 1 , NTURB
         WRITE(IWUNIT,210)IVAR,DLOG10(DELL2(IVAR,2)),
d150 2
a151 1
   30 CONTINUE
@


1.27
log
@changed the name of the included file containing I/O devices
@
text
@d11 2
a12 2
C     $Id: update4.F,v 1.26 2000/10/26 15:27:14 aldo Exp aldo $
C     $Header: /usr/people/aldo/CFD_codes/EulFS.0.10.10/src/seq/RCS/update4.F,v 1.26 2000/10/26 15:27:14 aldo Exp aldo $
d28 1
a28 1
      Scalar RHS_V(1) 
@


1.26
log
@parallel version working
@
text
@d11 2
a12 2
C     $Id: update4.F,v 1.25 2000/10/19 16:10:34 aldo Exp aldo $
C     $Header: /usr/people/aldo/CFD_codes/EulFS.0.10.10/src/seq/RCS/update4.F,v 1.25 2000/10/19 16:10:34 aldo Exp aldo $
d26 1
a26 1
      Vec X,V
d41 1
a41 1
      INCLUDE 'IO'
d153 1
a153 1
      WRITE(12,235)NITER,ITS,RESL2(1,2),RESMAX(1,2),CNST
@


1.25
log
@changed include file names for PETSc rev. 2.0.29
@
text
@d2 1
a2 1
      SUBROUTINE UPDATE4( NDIM, NOFVAR, NPOIN, sles, B, RHS, ViscT, DT,
d11 2
a12 2
C     $Id: update4.F,v 1.24 2000/08/18 13:52:20 aldo Exp aldo $
C     $Header: /usr/people/aldo/CFD_codes/EulFS.0.10.10/src/seq/RCS/update4.F,v 1.24 2000/08/18 13:52:20 aldo Exp aldo $
d30 2
a32 4
      DOUBLE PRECISION DSTAK(1)
      COMMON /CSTAK/ DSTAK
      INTEGER ISTAK(1)
      EQUIVALENCE(DSTAK(1),ISTAK(1))
d45 1
a45 1
      INTEGER NDIM,NOFVAR,NPOIN,IFAIL,ITS,NIT
d48 3
a50 4
     +ICOUNT
      DOUBLE PRECISION CNST,S,PREVR,RES0,al,be,RATIO2,RATIO1,TEMP,ROLD
      parameter (al=0.9d0/99.d0,be=0.1d0-al) 
      SAVE RES0,RATIO2,RATIO1,TEMP,ICOUNT,CNST,ROLD
d65 2
a66 7
C     a quite bad fix to overcome the problem with
C     VecGetArray() under LINUX ....... to be removed
C
      CALL VecGetArray(RHS,RHS_V,RHS_I,IFAIL)
      CALL GETNRM(DSTAK(LCORG),WKSP1,RHS_V(RHS_I+1),NDIM,NOFVAR,NPOIN,
     +            INMAX,RESMAX(1,2),RESL2(1,2))
      CALL VecRestoreArray(RHS,RHS_V,RHS_I,IFAIL)
a85 1
c     write(6,*)cnst,ratio1,ratio2
a86 1
c     write(6,*)cnst
d104 1
a104 1
      IF( ITER .EQ. 1 )THEN
d106 3
a108 1
      ENDIF
d112 5
a116 1
      CALL VecCreateSeq(PETSC_COMM_SELF,NPOIN,X,IFAIL)
d141 1
a141 1
      DO 20 IVAR = 1 , NOFVAR
d146 1
a146 1
      DO 30 IVAR = 1 , NOFVAR
a171 8
C     WRITE(6,*)'Solution vector norm is ',S
C     WRITE(6,*)'Z vector norm is ',dnrm2(npoin,dstak(lzroe),1)
C     write(6,*) 'VecScale has returned ',IFAIL
C     write(6,*) 'MatDiagonalShift has returned ',IFAIL
C     write(6,*) 'VecCreateSeqWithArray has returned ',IFAIL
C     write(6,*) 'SetBC4 has returned ',IFAIL
C     write(6,*) 'SLESSolve has returned ',IFAIL
C     write(6,*) 'SLESSetOperators has returned ',IFAIL
a172 1
C
@


1.24
log
@changed the dimension of some arrays in conv.com
also the SER strategy has slightly changed
@
text
@d11 2
a12 2
C     $Id: update4.F,v 1.23 2000/06/23 16:50:37 aldo Exp aldo $
C     $Header: /usr/people/aldo/CFD_codes/EulFS.0.10.7/src/seq/RCS/update4.F,v 1.23 2000/06/23 16:50:37 aldo Exp aldo $
d15 5
a19 5
#include "include/finclude/vec.h"
#include "include/finclude/mat.h"
#include "include/finclude/pc.h"
#include "include/finclude/sles.h"
#include "include/finclude/is.h"
d105 1
a105 1
      CALL MatDiagonalShift(B,DT,IFAIL)
@


1.23
log
@minor change in the CFL ramp startegy
@
text
@d11 2
a12 2
C     $Id: update4.F,v 1.22 2000/06/09 16:30:28 aldo Exp aldo $
C     $Header: /usr/people/aldo/CFD_codes/EulFS.0.10.7/src/seq/RCS/update4.F,v 1.22 2000/06/09 16:30:28 aldo Exp aldo $
d51 1
a51 1
      DOUBLE PRECISION CNST,S,PREVR,RES0,al,be,ALPHA,BETA,TEMP
d53 1
a53 1
      SAVE PREVR,ALPHA,BETA,TEMP,ICOUNT,CNST
d63 5
d73 1
a73 1
     +            INMAX,RESMAX,RESL2)
d76 1
a76 7
      IF( ITER .EQ. 1 )PREVR  = RESL2(1)
      IF( ITER .EQ. 1 )THEN
          CNST = CFLSTART
      ELSE
          CNST = CNST*CFLRATIO
      ENDIF
C     GOTO 55
d78 2
a79 2
C     ALPHA = RES(ITER-1,NIT)/RES(ITER,NIT) where n refers to the outer
C             iteration counter 1 <= ITER <= NITER while k refers
d82 1
a82 1
C     BETA = RES(ITER,1)/RES(ITER,NIT)
d84 2
a85 7
C     TEMP = RES(ITER,NIT-1)/RES(ITER,NIT)
C
      IF( NIT .EQ. 1 )THEN
          BETA = RESL2(1)
          ALPHA = PREVR/BETA
          PREVR = RESL2(1)
          TEMP = RESL2(1)
d87 1
a87 5
      CNST = ALPHA*BETA/RESL2(1)
      GOTO 55
C
C     IFLAG is a flag stating whether the sub-iterations are
C           converging or not
d89 1
a89 17
      IF( TEMP/RESL2(1) .LE. ONE )THEN
          IFLAG = -1
          ICOUNT = 0
      ELSE
C
C     make sure to perform at least NSUBIT iterations once
C          the residual starts decreasing 
C
          IF( ICOUNT .GE. NSUBIT )THEN
              IFLAG = 0
              ICOUNT = 0
          ELSE 
              ICOUNT = ICOUNT + 1
              IFLAG = 10
          ENDIF 
      ENDIF
      TEMP = RESL2(1) 
d91 1
a91 1
   55 CONTINUE
d93 4
a96 3
      IF(CNST.LT.1.d0)CNST=1.d0
C     CNST = MAX( 0.5d0, CNST )
      CNST = MIN( CFL_MAX,CNST )
a97 1
C     if( iter .lt. 100 )CNST = al * iter + be
d136 2
a137 2
      CALL VecNorm(X,NORM_2,DELL2(1),IFAIL)
      CALL VecNorm(X,NORM_INFINITY,DELMAX(1),IFAIL)
d146 2
a147 2
         WRITE(IWUNIT,210)IVAR,DLOG10(RESL2(IVAR)),DLOG10(RESMAX(IVAR)),
     &   INMAX(IVAR),(WKSP1(I,IVAR),I=1,3)
d151 2
a152 2
         WRITE(IWUNIT,210)IVAR,DLOG10(DELL2(IVAR)),DLOG10(DELMAX(IVAR)),
     &   INDEL(IVAR),(WKSP2(I,IVAR),I=1,3)
d157 1
a157 1
      WRITE(12,235)NITER,ITS,RESL2(1),RESMAX(1),CNST
@


1.22
log
@now includes index sets from iset.com
@
text
@d11 2
a12 2
C     $Id: update4.F,v 1.21 1999/12/27 09:21:45 aldo Exp aldo $
C     $Header: /usr/people/aldo/CFD_codes/EulFS.0.10.5/src/seq/RCS/update4.F,v 1.21 1999/12/27 09:21:45 aldo Exp aldo $
d77 1
a77 1
      GOTO 55
d94 1
d119 1
@


1.21
log
@add a pre-processor flag that allows to reuse the
solution as an initial guess for the next SLES solve
@
text
@d11 2
a12 2
C     $Id: update4.F,v 1.20 1999/11/05 20:46:24 aldo Exp aldo $
C     $Header: /home/aldo/EulFS.0.10.1/src/seq/RCS/update4.F,v 1.20 1999/11/05 20:46:24 aldo Exp aldo $
d19 4
@


1.20
log
@changed integer into PEtscOffset
@
text
@d11 2
a12 2
C     $Id: update4.F,v 1.19 1999/09/01 11:23:35 aldo Exp $
C     $Header: /c9/tracs/aldo/EulFS.0.9.7/src/seq/RCS/update4.F,v 1.19 1999/09/01 11:23:35 aldo Exp $
d140 1
a140 1
      CALL VecCreateSeq(MPI_COMM_SELF,NPOIN,X,IFAIL)
@


1.19
log
@unused declaration removed
@
text
@d11 2
a12 2
C     $Id: update4.F,v 1.18 1998/11/25 17:01:52 aldo Exp aldo $
C     $Header: /c9/tracs/aldo/EulFS.0.9.7/src/seq/RCS/update4.F,v 1.18 1998/11/25 17:01:52 aldo Exp aldo $
d25 1
d45 1
a45 1
      INTEGER IVAR,LOCA,LOCB,IPOIN,i,LOCX,LOCV,LIWORK,IFLAG,RHS_I,
@


1.18
log
@naming of I/O devices has changed
@
text
@d11 2
a12 2
C     $Id$
C     $Header: update4.F,v 1.17 98/11/17 18:49:50 aldo Exp $
d53 2
a54 2
      integer        NNZERO,ISTKGT,istkst
      EXTERNAL DNRM2,NNZERO,ISTKGT,istkst
@


1.17
log
@Turbulent viscosity is now stored as a PETSC vector;
also changed call to LHSBC5
@
text
@d12 1
a12 1
C     $Header$
a60 10
#ifdef PARCH_linux
      LOCV = ISTKGT(NPOIN,4)
      CALL VecCreateSeqWithArray(MPI_COMM_SELF,NPOIN,
     +                           DSTAK(LOCV),V,IFAIL)
      CALL VecCopy(RHS,V,IFAIL)
      CALL GETNRM(DSTAK(LCORG),WKSP1,DSTAK(LOCV),NDIM,NOFVAR,NPOIN,
     +            INMAX,RESMAX,RESL2)
      CALL VecDestroy(V,IFAIL)
      CALL ISTKRL(1)
#else
a64 1
#endif
d159 1
a159 1
  299 WRITE(NOUT,200)ITER,ITS,CNST
d163 1
a163 1
      WRITE(NOUT,215)
d165 1
a165 1
         WRITE(6,210)IVAR,DLOG10(RESL2(IVAR)),DLOG10(RESMAX(IVAR)),
d168 1
a168 1
      WRITE(NOUT,225)
d170 1
a170 1
         WRITE(6,210)IVAR,DLOG10(DELL2(IVAR)),DLOG10(DELMAX(IVAR)),
@


1.16
log
@Add automatic identification flag
@
text
@d2 1
a2 1
      SUBROUTINE UPDATE4( NDIM, NOFVAR, NPOIN, sles, B, RHS, DT,
d12 1
d21 1
a21 1
      Vec RHS,DT
d39 2
d145 1
a145 4
          LIWORK = ISTKGT(NPOIN6+NPOIN7,2)
          CALL IINIT(NPOIN6+NPOIN7,0,ISTAK(LIWORK),1)
          CALL LHSBC5( NPOIN, ISTAK(LNODCOD), B, ISTAK(LIWORK) )
          CALL ISTKRL(1)
d150 1
a150 3
      LOCX = ISTKGT(NPOIN,4)
      CALL VecCreateSeqWithArray(MPI_COMM_SELF,NPOIN,DSTAK(LOCX),X,
     +                           IFAIL)
d160 1
a160 1
C     Update the nodal unknown vector by forming Z := Z + X
d162 1
a162 5
      DO 5 IPOIN = 0, NPOIN-1
	 LOCA = LTURB + IPOIN
	 LOCB = LOCX + IPOIN
         DSTAK(LOCA) = DSTAK(LOCA) + DSTAK(LOCB)
    5 CONTINUE
d164 1
a164 1
C     .. Monitor the norms of the update .. 
d166 2
a167 2
      CALL GETNRM(DSTAK(LCORG),WKSP2,DSTAK(LOCX),NDIM,NOFVAR,NPOIN,
     +            INDEL,DELMAX,DELL2)
d169 1
d172 1
a172 1
C     .. Print out the convergence history ..
a186 1
C     ELATIME = PetscGetTime()
d188 1
a192 1
      CALL ISTKRL(1) 
@


1.15
log
@CFLMAX replaced with CFL_MAX
@
text
@d7 6
a23 3
C
C     Implicit timestepping for the one-eqn. turbulence model ..
C
@


1.14
log
@another timestepping strategy
@
text
@d119 1
a119 1
      CNST = MIN( CFLMAX,CNST )
@


1.13
log
@Include files path for PETSC fortran header files
has been changed to comply to rev. 2.0.22 of PETSc
@
text
@d42 1
a42 1
      SAVE PREVR,ALPHA,BETA,TEMP,ICOUNT
d72 6
a113 1
C     write(6,*)iter,nit,alpha,beta,temp/resl2(1),icount,iflag
d116 3
a118 1
      CNST = MAX( 0.5d0, CNST )
@


1.12
log
@now dealing with boundary edges type 7
@
text
@d2 2
a3 1
      SUBROUTINE UPDATE4( NDIM, NOFVAR, NPOIN, sles, B, RHS, DT )
d7 5
a11 5
#include "include/FINCLUDE/petsc.h"
#include "include/FINCLUDE/vec.h"
#include "include/FINCLUDE/mat.h"
#include "include/FINCLUDE/pc.h"
#include "include/FINCLUDE/sles.h"
d36 1
a36 1
      INTEGER NDIM,NOFVAR,NPOIN,IFAIL,ITS
d39 2
a40 2
     +IOFF
      DOUBLE PRECISION CNST,S,PREVR,RES0,al,be
d42 1
a42 1
      SAVE PREVR,RES0
d50 1
a50 1
      DATA WKSP1,WKSP2,IFLAG/NDNM*ZERO,NDNM*ZERO,0/
d73 39
a111 4
      CNST = PREVR/RESL2(1)
      PREVR = RESL2(1)
      CNST = MAX( 1.0d0, CNST )
      IF( CNST .GT. 1.d0 )CNST = MIN( CFLMAX,3.d0*CNST )
d113 2
a114 1
      if( iter .lt. 100 )CNST = al * iter + be
@


1.11
log
@keep trying to get a good timestepping scheme
@
text
@d95 2
a96 2
          LIWORK = ISTKGT(NPOIN6,2)
          CALL IINIT(NPOIN6,0,ISTAK(LIWORK),1)
@


1.10
log
@changed CNST onece more
@
text
@d39 2
a40 1
      DOUBLE PRECISION CNST,S,PREVR,RES0
a73 14
C     IF( CNST .LT. 1.d0 )THEN
C           CNST = 1.d0
C           IFLAG = 0
C     ELSE
C         IF( IFLAG .EQ. 0 )THEN
C             RES0 = RESL2(1) 
C             IFLAG = 1
C             IOFF = ITER
C             CNST = 1.d0
C         ELSE
C             CNST = 3.d0*RES0/RESL2(1)
C             CNST = REAL(ITER-IOFF)
C         ENDIF 
C     ENDIF 
d77 1
a77 1
      CNST = 1.d0
@


1.9
log
@corrected preprocessor directive for Linux boxes
@
text
@d90 1
@


1.8
log
@modified timestepping
@
text
@d53 1
a53 1
#ifdef ARCH_linux
@


1.7
log
@Modified timestepping
@
text
@d37 2
a38 1
      INTEGER IVAR,LOCA,LOCB,IPOIN,i,LOCX,LOCV,LIWORK,IFLAG,RHS_I
d73 16
a88 12
      IF( CNST .LT. 1.d0 )THEN
            CNST = 1.d0
      ELSE
          IF( IFLAG .EQ. 0 )THEN
              RES0 = RESL2(1) 
              IFLAG = 1
              CNST = 1.d0
          ELSE
              CNST = 3.d0*RES0/RESL2(1)
          ENDIF 
      ENDIF 
C     CNST = MAX( 1.0d0, CNST )
d158 1
a158 1
      WRITE(12,235)NITER,ITS,RESL2(1),RESMAX(1)
d175 1
a175 1
  235 FORMAT (I5,1X,I4,2 (1X,E10.4))
@


1.6
log
@modified CFl
@
text
@d16 1
d37 3
a39 3
      INTEGER IVAR,LOCA,LOCB,IPOIN,i,LOCX,LOCV,LIWORK
      DOUBLE PRECISION CNST,S,PREVR,ELATIME
      SAVE PREVR
d47 1
a47 1
      DATA WKSP1,WKSP2/NDNM*ZERO,NDNM*ZERO/
d52 1
a52 1
C#ifdef ARCH_linux
d61 6
a66 1
C#else
d72 13
a84 2
      CNST = MAX( 0.3d0, CNST )
      IF( CNST .GT. 1.0d0 )CNST = MIN( CFLMAX,3.d0*CNST )
@


1.5
log
@removed ELATIME from the write statement
D
@
text
@d66 2
a67 3
      CNST = MAX( 1.0d0, CNST )
      IF( CNST .GT. 1.d0 )CNST = MIN( CFLMAX,3.d0*CNST )
      
@


1.4
log
@# of linear iterations are now written to file
@
text
@d136 2
a137 2
      ELATIME = PetscGetTime()
      WRITE(12,235)NITER,ITS,RESL2(1),RESMAX(1),ELATIME
@


1.3
log
@*** empty log message ***
@
text
@d137 1
a137 1
      WRITE(12,235)NITER,RESL2(1),RESMAX(1),ELATIME
d154 2
a155 1
  235 FORMAT (I5,7 (1X,E10.4))
@


1.2
log
@Call to PetscGetTime added
@
text
@d38 1
a61 5
C     IF( ITER .EQ. 1 )THEN 
C        RESMAX0 = RESMAX(1)
C        RESL20  = RESL2(1)
C     ENDIF
C
d66 3
a68 2
      CNST = MIN( CFLMAX, 2.d0*CNST )
      CNST = 1.d0
@


1.1
log
@Initial revision
@
text
@d37 1
a37 1
      DOUBLE PRECISION CNST,S,PREVR
d50 1
a50 1
C#ifdef PARCH_linux
d139 3
@
