head	1.12;
access
	abonfi
	tesistim;
symbols
	release3_4_1:1.12
	release3_4_0:1.12
	release3_3_5:1.12
	release3_3_4:1.12
	release3_3_3:1.12
	release3_3_2:1.12
	release3_3_1:1.11
	release3_3_0:1.10;
locks
	abonfi:1.12; strict;
comment	@c @;


1.12
date	2013.01.29.14.40.49;	author abonfi;	state Exp;
branches;
next	1.11;

1.11
date	2013.01.26.11.42.18;	author abonfi;	state Exp;
branches;
next	1.10;

1.10
date	2011.09.16.07.19.48;	author abonfi;	state Exp;
branches;
next	1.9;

1.9
date	2009.06.11.13.12.51;	author abonfi;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.26.15.25.37;	author aldo;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.25.13.23.57;	author aldo;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.19.16.10.34;	author aldo;	state Exp;
branches;
next	1.5;

1.5
date	2000.08.18.13.51.04;	author aldo;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.14.15.36.25;	author aldo;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.14.13.49.52;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.14.13.03.43;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.23.16.41.36;	author aldo;	state Exp;
branches;
next	;


desc
@set constant pressure b.c. in the jacobian
@


1.12
log
@The adiabatic index is now a variable, not any longer a parameter
@
text
@      subroutine lhsbc2(A,X,IBGN,NDIM,NOFVAR,COMPRESSIBLE)
C
C     $Id: lhsbc2.F,v 1.11 2013/01/26 11:42:18 abonfi Exp abonfi $
C
C     set b.c. for constant pressure
C
      implicit none
C
#include "finclude/petscsys.h"
#include "finclude/petscvec.h"
#include "finclude/petscmat.h"
#include "finclude/petscis.h"
C
      INCLUDE 'paramt.h'
      INCLUDE 'bnd.h'
      INCLUDE 'constants.h'
      INCLUDE 'pfcgas.com'
      INCLUDE 'visco.com'
      INCLUDE 'stream.com'
C
#include "iset.com"
C
C  Input/output parameters:
      integer     ndim,NOFVAR,IBGN
      double precision x(*)
      Mat              A
      LOGICAL COMPRESSIBLE

C  Local variables:
      integer     is_array(1)
      PetscOffset i_is
      integer maxcols
      parameter(maxcols=50)
      double precision y(maxcols)
      integer          i,IFAIL,nrows,ncols,irow(maxcols),icol(maxcols)
      integer          i1,i2,i3,i4,i5
      double precision sum
C
      CALL ISGetSize(CnstPressure,Nrows,IFAIL)
      IF(NROWS.EQ.0)RETURN 
C
C     for incompressible flows, it is only required to set
C     \Delta(p) = 0. 
C
      IF(.NOT.COMPRESSIBLE)RETURN
C
      CALL ISGetIndices(CnstPressure,is_array,i_is,IFAIL)
C
C     irow and icol(*) must address global rows (0-based), while
C     i1,..,i5 must address local entries (1-based)
C
      DO 1 I = 1, Nrows
C
C     irow(1) addresses the row where rE is stored .....
C
         irow(1) = is_array(i_is + I)
         icol(1) = irow(1)-1
         icol(2) = irow(1)
         icol(3) = icol(2)+1
         icol(4) = icol(3)+1
         icol(5) = icol(4)+1
         i2 = irow(1)+1-IBGN
         i1 = i2-1
         i3 = i2+1
         i4 = i3+1
         i5 = i4+1
         sum = x(i3)*x(i3)+x(i4)*x(i4)
         if(ndim.eq.3)sum=sum+x(i5)*x(i5)
         sum = 0.5 *sum /(x(i1)*x(i1))
         y(1) = gm1*sum
         y(2) = gm1
         y(3) =-gm1*x(i3)/x(i1)
         y(4) =-gm1*x(i4)/x(i1)
         if(ndim.eq.3)y(5) =-gm1*x(i5)/x(i1)
         CALL MatSetValues(A,1,irow,nofvar,icol,y,INSERT_VALUES,IFAIL)
    1 CONTINUE 
C
      CALL ISRestoreIndices(CnstPressure,is_array,i_is,IFAIL)
C
      RETURN
      END
@


1.11
log
@changed the name of an included header file
@
text
@d3 1
a3 1
C     $Id: lhsbc2.F,v 1.10 2011/09/16 07:19:48 abonfi Exp abonfi $
d17 1
@


1.10
log
@Changed PETSc header file to comply with version 3.1
@
text
@d3 1
a3 1
C     $Id: lhsbc2.F,v 1.9 2009/06/11 13:12:51 abonfi Exp abonfi $
d16 1
a16 1
      INCLUDE 'constants'
@


1.9
log
@location of PETSc include file has changed with release 3.0.0
@
text
@d3 1
a3 1
C     $Id: lhsbc2.F,v 1.8 2000/10/26 15:25:37 aldo Exp $
d9 1
a9 1
#include "finclude/petsc.h"
@


1.8
log
@routine name changed
@
text
@d3 1
a3 1
C     $Id: lhsbc2.F,v 1.7 2000/10/25 13:23:57 aldo Exp aldo $
d9 4
a12 4
#include "include/finclude/petsc.h"
#include "include/finclude/petscvec.h"
#include "include/finclude/petscmat.h"
#include "include/finclude/petscis.h"
@


1.7
log
@now works also in the parallel case
@
text
@d1 1
a1 1
      subroutine CnstPress(A,X,IBGN,NDIM,NOFVAR,COMPRESSIBLE)
d3 1
a3 1
C     $Id: lhsbc2.F,v 1.6 2000/10/19 16:10:34 aldo Exp aldo $
@


1.6
log
@changed include file names for PETSc rev. 2.0.29
@
text
@d3 1
a3 1
C     $Id: lhsbc2.F,v 1.5 2000/08/18 13:51:04 aldo Exp aldo $
d48 3
d52 10
a61 2
         irow(1) = is_array(i_is + I)-IBGN
         i2 = irow(1)+1
a73 9
         icol(1) = irow(1)-1
         icol(2) = irow(1)
         icol(3) = icol(2)+1
         icol(4) = icol(3)+1
         icol(5) = icol(4)+1
#ifdef MPI
         CALL MatSetValuesLocal(A,1,irow,nofvar,icol,y,INSERT_VALUES,
     &                          IFAIL)
#else
a74 1
#endif
@


1.5
log
@introduced offset for the parallel case
(as returned by VecGetOwnerShipRange)
@
text
@d3 1
a3 1
C     $Id: lhsbc2.F,v 1.4 2000/08/14 15:36:25 aldo Exp aldo $
d10 3
a12 3
#include "include/finclude/vec.h"
#include "include/finclude/mat.h"
#include "include/finclude/is.h"
@


1.4
log
@brought calls to MatZeroRows into the calling routine
@
text
@d1 1
a1 1
      subroutine CnstPress(A,X,NDIM,NOFVAR,COMPRESSIBLE)
d3 1
a3 1
C     $Id: lhsbc2.F,v 1.3 2000/08/14 13:49:52 aldo Exp aldo $
d23 1
a23 1
      integer     ndim,NOFVAR
d34 1
a34 1
      integer          i,IFAIL,nrows,ncols,irow(maxcols),icol(maxcols),j
d36 1
a36 4
      PetscOffset      i_x
      Scalar           x_array(1)
      integer cols(maxcols)
      double precision vals(maxcols),sum
d49 1
a49 1
         irow(1) = is_array(i_is + I)
@


1.3
log
@the final MatAssembly has been moved to the
calling routine
@
text
@d3 1
a3 1
C     $Id: cnstpress.F,v 1.2 2000/08/14 13:03:43 aldo Exp aldo $
a42 7
C
C
#ifdef MPI
      CALL MatZeroRowsLocal(A,CnstPressure,1.d0,IFAIL)
#else
      CALL MatZeroRows(A,CnstPressure,1.d0,IFAIL)
#endif
@


1.2
log
@minor changes
@
text
@d3 1
a3 1
C     $Id: cnstpress.F,v 1.1 2000/06/23 16:41:36 aldo Exp aldo $
d86 1
a86 3
      CALL MatAssemblyBegin(A,MAT_FINAL_ASSEMBLY,IFAIL)
C
      CALL MatAssemblyEnd(A,MAT_FINAL_ASSEMBLY,IFAIL)
a87 1
      CALL ISRestoreIndices(CnstPressure,is_array,i_is,IFAIL)
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
C     $Id$
d41 2
a42 1
C     diagonal element corresponding to the energy eqn.
d44 1
a55 3
      CALL ISGetSize(CnstPressure,Nrows,IFAIL)
      IF(NROWS.EQ.0)RETURN 
C
a87 2
C     CALL ISRestoreIndices(CnstPressure,is_array,i_is,IFAIL)
C
a88 7
caldo
C     DO 2 I = 1, Nrows
C        irow(1) = is_array(i_is + I)
C        CALL MatGetRow(A,irow(1),ncols,icol,vals,IFAIL)
C        write(6,*)irow(1),(icol(j),vals(j),j=1,ncols)
C        CALL MatRestoreRow(A,irow(1),ncols,icol,vals,IFAIL)
C   2 continue
@
