head	1.14;
access
	abonfi
	tesistim;
symbols
	release3_4_1:1.14
	release3_4_0:1.14
	release3_3_5:1.14
	release3_3_4:1.14
	release3_3_3:1.14
	release3_3_2:1.14
	release3_3_1:1.13
	release3_3_0:1.12;
locks
	abonfi:1.14; strict;
comment	@c @;


1.14
date	2013.01.29.14.40.49;	author abonfi;	state Exp;
branches;
next	1.13;

1.13
date	2013.01.26.11.42.18;	author abonfi;	state Exp;
branches;
next	1.12;

1.12
date	2011.09.16.07.19.48;	author abonfi;	state Exp;
branches;
next	1.11;

1.11
date	2009.06.11.13.10.58;	author abonfi;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.27.11.49.19;	author abonfi;	state Exp;
branches;
next	1.9;

1.9
date	2001.05.24.10.25.07;	author abonfi;	state Exp;
branches;
next	1.8;

1.8
date	2001.05.05.11.03.49;	author abonfi;	state Exp;
branches;
next	1.7;

1.7
date	2001.01.20.13.50.34;	author aldo;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.25.14.31.13;	author aldo;	state Exp;
branches;
next	1.5;

1.5
date	2000.10.19.16.10.34;	author aldo;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.18.13.51.04;	author aldo;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.14.15.36.25;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.14.13.48.41;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	2000.08.03.10.06.37;	author aldo;	state Exp;
branches;
next	;


desc
@subsonic inflow boundary conditions
@


1.14
log
@The adiabatic index is now a variable, not any longer a parameter
@
text
@      subroutine lhsbc0(A,X,VRATIO,IBGN,NDIM,NOFVAR,COMPRESSIBLE)
C
C     $Id: lhsbc0.F,v 1.13 2013/01/26 11:42:18 abonfi Exp abonfi $
C
C     set inflow b.c. for internal flows:
C     total enthalpy, entropy and flow angle in the compressible case
C     total pressure and flow angle in the INcompressible case
C
      implicit none
C
#include "finclude/petscsys.h"
#include "finclude/petscvec.h"
#include "finclude/petscmat.h"
#include "finclude/petscis.h"
#include "finclude/petscts.h"
C
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
      INCLUDE 'pfcgas.com'
      INCLUDE 'visco.com'
      INCLUDE 'stream.com'
C
#include "iset.com"
C
C  Input/output parameters:
      integer ndim,nofvar
      double precision x(*),vratio(3,*)
      Mat              A
      logical compressible
 
C  Local variables:
      PetscOffset i_is
      integer     is_array(1)
      integer maxcols
      parameter(maxcols=50)
      double precision amt(25)
      double precision cosb1,sinb1,kinetic,asqr,hh,denom
      integer          i,IFAIL,nrows,irow(maxcols),jcol(maxcols),j
      integer          i1,i2,i3,i4,i5,ibgn
      integer          ipiv(maxcols)
      integer lda
      double precision pressc
      external pressc
C
      integer iadd
      iadd(i,j,lda) = (j-1)*lda + i
C
      cosb1 = flowdir(1)
      sinb1 = flowdir(2)
C
C     set diagonal element to 0.d0
C
      call ISGetIndices(Internal_inflow,is_array,i_is,IFAIL)
      call ISGetSize(Internal_inflow,Nrows,IFAIL)
C
C     outermost loop on inflow nodes
C
C     lda equals the no. of incoming characteristics, hence
C     the number of rows that need to be modified;
C
      j = 0
      IF(COMPRESSIBLE)THEN
C
          lda = ndim + 1
          DO 1 I = 1, Nrows, lda
              j = j+1
C
C     row (and column) pointers (0-based indexing) for the NOFVAR eqns.
C     irow(1) and irow(2) always address (r,rE) while
C     irow(3) and irow(4) can address any two of (ru,rv,rw)
C     jcol(*) addresses the whole vector of conserved variables
C     irow,jcol address rows and colums by global number,
C     while i1,..,i5 address local entries
C
              irow(1) = is_array(i_is + I)
              irow(2) = is_array(i_is + I+1)
              irow(3) = is_array(i_is + I+2)
              IF(NDIM.EQ.3)irow(4) = is_array(i_is + I+3)
              jcol(1) = irow(1)
              jcol(2) = jcol(1)+1
              jcol(3) = jcol(2)+1
              jcol(4) = jcol(3)+1
              jcol(5) = jcol(4)+1
C
C        1-based (FORTRAN) indexing and local numbering (-IBGN)
C
              i1 = jcol(1)+ 1-IBGN
              i2 = jcol(2)+ 1-IBGN
              i3 = jcol(3)+ 1-IBGN
              i4 = jcol(4)+ 1-IBGN
              i5 = jcol(5)+ 1-IBGN
C
C        write(6,*)irow(1),i1,i2,i3,i4
C        write(6,*)x(i1)
C        write(6,*)x(i2)
C        write(6,*)x(i3)
C        write(6,*)x(i4)
C        pause
C
C     amt is:
C
C        r |rE|ru|rv|rw|
C       +---------------
C     r |  |  |  |  |  |
C    rE |  |  |  |  |  |
C    rv |  |  |  |  |  |
C    rw |  |  |  |  |  |
C
C
C
C     compute kinetic energy from the conserved variables
C
              kinetic = x(i3)*x(i3)+x(i4)*x(i4)
              if(ndim.eq.3)kinetic=kinetic+x(i5)*x(i5)
              kinetic = half*kinetic /(x(i1)*x(i1))
C
C        first row, entropy equation
C
              denom = 1.d0/(x(i1)**GAM)
              asqr = gam*gm1*(x(i2)/x(i1)-kinetic)
              amt(iadd(1,1,lda)) =(gm1*kinetic-asqr)*denom
              amt(iadd(1,2,lda)) =(gm1)*denom
              amt(iadd(1,3,lda)) =(-gm1*x(i3)/x(i1))*denom
              amt(iadd(1,4,lda)) =(-gm1*x(i4)/x(i1))*denom
              if(ndim.eq.3)amt(iadd(1,5,lda)) =(-gm1*x(i5)/x(i1))*denom
C
C        second row, energy equation
C
              hh = asqr / gm1 + kinetic
              amt(iadd(2,1,lda)) = (gm1*kinetic-hh)/x(i1)
              amt(iadd(2,2,lda)) = gam/x(i1)
              amt(iadd(2,3,lda)) =-gm1*x(i3)/x(i1)/x(i1)
              amt(iadd(2,4,lda)) =-gm1*x(i4)/x(i1)/x(i1)
              if(ndim.eq.3)amt(iadd(2,5,lda)) =-gm1*x(i5)/x(i1)/x(i1)
C
C        third or fourth row, flow angle
C
              amt(iadd(3,1,lda)) = (x(i4)*cosb1-x(i3)*sinb1)/(x(i1)*x
     +        (i1))
              amt(iadd(3,2,lda)) = 0.d0
              amt(iadd(3,3,lda)) = sinb1/x(i1)
              amt(iadd(3,4,lda)) = -cosb1/x(i1)
              if(ndim.eq.3)amt(iadd(3,5,lda)) = 0.d0
C
C        in 3D the b.c. is \Delta (w) = 0.
C
              if(ndim.eq.3)then
                  amt(iadd(4,1,lda)) = 0.d0
                  amt(iadd(4,2,lda)) = 0.d0
                  amt(iadd(4,3,lda)) = 0.d0
                  amt(iadd(4,4,lda)) = 0.d0
                  amt(iadd(4,5,lda)) = 1.d0/x(i1)
              endif
C
C        CALL X04CAF('General',' ',lda,NOFVAR,amt,
C    +   lda,'matrix for inflow b.c. ',IFAIL)
C        pause
C
              CALL MatSetValues(A,lda,irow,nofvar,jcol,amt,
     +        INSERT_VALUES, IFAIL)
    1     CONTINUE
C
      ELSE
C
C     Incompressible case
C
C
          lda = ndim
          DO 2 I = 1, Nrows, lda
              j = j+1
C
C     row (and column) pointers (0-based indexing) for the NOFVAR eqns.
C     irow(1) always address (p) while
C     irow(3) and irow(4) can address any two of (u,v,w)
C     jcol(*) addresses the whole vector of primitive variables
C             for the current meshpoint
C     irow,jcol address rows and colums by global number,
C     while i1,..,i4 address local entries
C
              irow(1) = is_array(i_is + I)
              irow(2) = is_array(i_is + I+1)
              IF(NDIM.EQ.3)irow(3) = is_array(i_is + I+2)
              jcol(1) = irow(1)
              jcol(2) = jcol(1)+1
              jcol(3) = jcol(2)+1
              jcol(4) = jcol(3)+1
C
C        1-based (FORTRAN) indexing and local numbering (-IBGN)
C
              i1 = jcol(1)+ 1-IBGN
              i2 = jcol(2)+ 1-IBGN
              i3 = jcol(3)+ 1-IBGN
              i4 = jcol(4)+ 1-IBGN
C
C        write(6,*)irow(1),i1,i2,i3,i4
C        write(6,*)x(i1)
C        write(6,*)x(i2)
C        write(6,*)x(i3)
C        write(6,*)x(i4)
C        pause
C
C     amt is:
C
C        dp|du|dv|dw|
C       +------------
C     p | 1| u| v| w|
C     u |  |  |  |  |
C     v |  |  |  |  |
C     w |  |  |  |  |
C
C
C
C     compute kinetic energy from the conserved variables
C
              kinetic = x(i2)*x(i2)+x(i3)*x(i3)
              if(ndim.eq.3)kinetic=kinetic+x(i4)*x(i4)
              kinetic = half*kinetic
C
C        first row, total pressure equation
C
              amt(iadd(1,1,lda)) = vratio(3,j)**2
c      write(6,*)j,vratio(3,j)**2
              amt(iadd(1,2,lda)) = x(i2)
              amt(iadd(1,3,lda)) = x(i3)
              if(ndim.eq.3)amt(iadd(1,4,lda)) = x(i4)
C
C        third or fourth row, flow angle
C
              amt(iadd(2,1,lda)) = zero
              amt(iadd(2,2,lda)) = sinb1
              amt(iadd(2,3,lda)) = -cosb1
              if(ndim.eq.3)amt(iadd(2,4,lda)) = 0.d0
C
C        in 3D the b.c. is \Delta (w) = 0.
C
              if(ndim.eq.3)then
                  amt(iadd(3,1,lda)) = 0.d0
                  amt(iadd(3,2,lda)) = 0.d0
                  amt(iadd(3,3,lda)) = 0.d0
                  amt(iadd(3,4,lda)) = 1.d0
              endif
C    +   lda,'matrix for inflow b.c. ',IFAIL)
C        pause
C
              CALL MatSetValues(A,lda,irow,nofvar,jcol,amt,
     +        INSERT_VALUES, IFAIL)
C
C        CALL X04CAF('General',' ',lda,NOFVAR,amt,
C    +   lda,'matrix for inflow b.c. ',IFAIL)
C        CALL DGETRF(3,3,amt,3,ipiv,ifail)
C if( ifail .GT. 0 )then
C            write(6,*)i,IFAIL
C     pause
C        endif
    2     CONTINUE
C
      ENDIF
C
      CALL ISRestoreIndices(Internal_inflow,is_array,i_is,IFAIL)
C
      RETURN
      END
@


1.13
log
@changed the name of an included header file
@
text
@d3 1
a3 1
C     $Id: lhsbc0.F,v 1.12 2011/09/16 07:19:48 abonfi Exp abonfi $
d19 1
@


1.12
log
@Changed PETSc header file to comply with version 3.1
@
text
@d3 1
a3 1
C     $Id: lhsbc0.F,v 1.11 2009/06/11 13:10:58 abonfi Exp abonfi $
d18 1
a18 2
!     INCLUDE 'bnd.h'
      INCLUDE 'constants'
@


1.11
log
@location of PETSc include file ahs chanegd with release 3.0.0
@
text
@d3 1
a3 1
C     $Id: lhsbc0.F,v 1.10 2005/12/27 11:49:19 abonfi Exp abonfi $
d11 1
a11 1
#include "finclude/petsc.h"
@


1.10
log
@an included common has been renamed
@
text
@d3 1
a3 1
C     $Id: lhsbc0.F,v 1.9 2001/05/24 10:25:07 abonfi Exp $
d11 5
a15 5
#include "include/finclude/petsc.h"
#include "include/finclude/petscvec.h"
#include "include/finclude/petscmat.h"
#include "include/finclude/petscis.h"
#include "include/finclude/petscts.h"
@


1.9
log
@allows specifying an inlet profile
@
text
@d3 1
a3 1
C     $Id: lhsbc0.F,v 1.8 2001/05/05 11:03:49 abonfi Exp abonfi $
d18 1
a18 1
      INCLUDE 'bnd.h'
@


1.8
log
@bug on the computation of kinetic energy from
conserved variables
@
text
@d1 1
a1 1
      subroutine lhsbc0(A,X,IBGN,NDIM,NOFVAR,COMPRESSIBLE)
d3 1
a3 1
C     $Id: lhsbc0.F,v 1.7 2001/01/20 13:50:34 aldo Exp abonfi $
d27 1
a27 1
      double precision x(*)
d40 1
a59 1
C     once again, this is currently implemented ONLY for compressible flows
d61 1
d66 1
d170 1
d221 2
a222 1
              amt(iadd(1,1,lda)) = one
a241 2
C
C        CALL X04CAF('General',' ',lda,NOFVAR,amt,
d247 8
@


1.7
log
@add variable inlet profile for total pressure and also
extended to INcompressible flows
@
text
@d3 1
a3 1
C     $Id: lhsbc0.F,v 1.6 2000/10/25 14:31:13 aldo Exp aldo $
d113 1
a113 1
              kinetic = 0. 5*kinetic /(x(i1)*x(i1))
d214 1
a214 1
              kinetic = 0. 5*kinetic
@


1.6
log
@now works in parallel case
@
text
@d3 1
a3 1
C     $Id: lhsbc0.F,v 1.5 2000/10/19 16:10:34 aldo Exp aldo $
d6 2
a7 1
C     total enthalpy, entropy and flow angle
d30 1
a30 1

d61 1
a61 2
      lda = ndim + 1
      DO 1 I = 1, Nrows, lda
d63 3
d73 9
a81 9
         irow(1) = is_array(i_is + I)
         irow(2) = is_array(i_is + I+1)
         irow(3) = is_array(i_is + I+2)
         IF(NDIM.EQ.3)irow(4) = is_array(i_is + I+3)
         jcol(1) = irow(1)
         jcol(2) = jcol(1)+1
         jcol(3) = jcol(2)+1
         jcol(4) = jcol(3)+1
         jcol(5) = jcol(4)+1
d85 5
a89 5
         i1 = jcol(1)+1  -IBGN
         i2 = jcol(2)+1  -IBGN
         i3 = jcol(3)+1  -IBGN
         i4 = jcol(4)+1  -IBGN
         i5 = jcol(5)+1  -IBGN
d100 1
a100 1
C        r |rE|ru|rv|rw| 
d111 3
a113 3
         kinetic = x(i3)*x(i3)+x(i4)*x(i4)
         if(ndim.eq.3)kinetic=kinetic+x(i5)*x(i5)
         kinetic = 0.5 *kinetic /(x(i1)*x(i1))
d117 7
a123 7
         denom = 1.d0/(x(i1)**GAM)
         asqr = gam*gm1*(x(i2)/x(i1)-kinetic)
         amt(iadd(1,1,lda)) =(gm1*kinetic-asqr)*denom
         amt(iadd(1,2,lda)) =(gm1)*denom
         amt(iadd(1,3,lda)) =(-gm1*x(i3)/x(i1))*denom
         amt(iadd(1,4,lda)) =(-gm1*x(i4)/x(i1))*denom
         if(ndim.eq.3)amt(iadd(1,5,lda)) =(-gm1*x(i5)/x(i1))*denom
d127 57
a183 6
         hh = asqr / gm1 + kinetic
         amt(iadd(2,1,lda)) = (gm1*kinetic-hh)/x(i1)
         amt(iadd(2,2,lda)) = gam/x(i1)
         amt(iadd(2,3,lda)) =-gm1*x(i3)/x(i1)/x(i1)
         amt(iadd(2,4,lda)) =-gm1*x(i4)/x(i1)/x(i1)
         if(ndim.eq.3)amt(iadd(2,5,lda)) =-gm1*x(i5)/x(i1)/x(i1)
d185 38
d225 4
a228 5
         amt(iadd(3,1,lda)) = (x(i4)*cosb1-x(i3)*sinb1)/(x(i1)*x(i1))
         amt(iadd(3,2,lda)) = 0.d0
         amt(iadd(3,3,lda)) =  sinb1/x(i1)
         amt(iadd(3,4,lda)) = -cosb1/x(i1)
         if(ndim.eq.3)amt(iadd(3,5,lda)) = 0.d0
d232 6
a237 7
         if(ndim.eq.3)then
             amt(iadd(4,1,lda)) = 0.d0
             amt(iadd(4,2,lda)) = 0.d0
             amt(iadd(4,3,lda)) = 0.d0
             amt(iadd(4,4,lda)) = 0.d0
             amt(iadd(4,5,lda)) = 1.d0
         endif
d243 5
a247 3
         CALL MatSetValues(A,lda,irow,nofvar,jcol,amt,INSERT_VALUES,
     &                          IFAIL)
    1 CONTINUE 
@


1.5
log
@changed include file names for PETSc rev. 2.0.29
@
text
@d1 1
a1 1
      subroutine Inflow(A,X,IBGN,NDIM,NOFVAR,COMPRESSIBLE)
d3 1
a3 1
C     $Id: lhsbc0.F,v 1.4 2000/08/18 13:51:04 aldo Exp aldo $
d56 5
a60 1
      lda = 3
d64 10
a73 5
C
         irow(1) = is_array(i_is + I) -IBGN
         irow(2) = is_array(i_is + I+1) -IBGN
         irow(3) = is_array(i_is + I+2) -IBGN
         IF(NDIM.EQ.3)irow(4) = is_array(i_is + I+3) -IBGN
d80 1
a80 1
C        1-based (FORTRAN) indexing
d82 5
a86 5
         i1 = jcol(1)+1 
         i2 = i1+1
         i3 = i2+1
         i4 = i3+1
         i5 = i4+1
d95 8
d104 2
d139 1
a139 1
C        leave the last row unchanged
d141 7
a147 1
         if(ndim.eq.3) STOP 'Subr. Inflow not yet ready for 3D'
d152 1
a152 4
#ifdef MPI
         CALL MatSetValuesLocal(A,lda,irow,nofvar,jcol,amt,
     &                          INSERT_VALUES,IFAIL)
#else
a154 1
#endif
@


1.4
log
@introduced offset for the parallel case
(as returned by VecGetOwnerShipRange)
@
text
@d3 1
a3 1
C     $Id: lhsbc0.F,v 1.3 2000/08/14 15:36:25 aldo Exp aldo $
d11 4
a14 4
#include "include/finclude/vec.h"
#include "include/finclude/mat.h"
#include "include/finclude/is.h"
#include "include/finclude/ts.h"
@


1.3
log
@brought calls to MatZeroRows into the calling routine
@
text
@d1 1
a1 1
      subroutine Inflow(A,X,NDIM,NOFVAR,COMPRESSIBLE)
d3 1
a3 1
C     $Id: lhsbc0.F,v 1.2 2000/08/14 13:48:41 aldo Exp aldo $
a27 2
      integer     is_array(1)
      PetscOffset i_is
d31 2
d35 4
a38 4
      double precision alpha,y(maxcols),amt(25)
      double precision cosb1,sinb1,kinetic,asqr,dens,hh,denom
      integer          i,IFAIL,nrows,ncols,irow(maxcols),jcol(maxcols),j
      integer          i1,i2,i3,i4,i5
d61 4
a64 4
         irow(1) = is_array(i_is + I)
         irow(2) = is_array(i_is + I+1)
         irow(3) = is_array(i_is + I+2)
         IF(NDIM.EQ.3)irow(4) = is_array(i_is + I+3)
d84 1
a84 1
C         pause
d128 2
a129 2
         CALL MatSetValuesLocal(A,lda,irow,nofvar,jcol,amt,INSERT_VALUES,
     &                          IFAIL)
@


1.2
log
@the final Matrix Assembly has been moved into the
calling routine
@
text
@d3 1
a3 1
C     $Id: inflow.F,v 1.1 2000/08/03 10:06:37 aldo Exp aldo $
a48 3
C     MUST do a FINAL_ASSEMBLY, NOT FLUSH_ASSEMBLY otherwise 
C     MatZeroRows will complain
C
a49 6
C
#ifdef MPI
      call MatZeroRowsLocal(A,Internal_inflow,1.d0,IFAIL)
#else
      call MatZeroRows(A,Internal_inflow,1.d0,IFAIL)
#endif
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
C     $Id: isothwall.F,v 1.1 2000/06/23 16:37:40 aldo Exp aldo $
d145 1
a145 3
      CALL MatAssemblyBegin(A,MAT_FINAL_ASSEMBLY,IFAIL)
C
      CALL MatAssemblyEnd(A,MAT_FINAL_ASSEMBLY,IFAIL)
a146 1
      CALL ISRestoreIndices(Internal_inflow,is_array,i_is,IFAIL)
@
