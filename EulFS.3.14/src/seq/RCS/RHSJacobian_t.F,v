head	1.7;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.7
	release3_13_0:1.7
	release3_12_0:1.7
	release3_11_0:1.7
	release3_10_0:1.7
	release3_8_0:1.7
	release3_7_1:1.6
	release3_7_0:1.6
	release3_4_5:1.5
	release3_4_4:1.5
	release3_4_3:1.5
	release3_4_2:1.5
	release3_4_1:1.5
	release3_4_0:1.5
	release3_3_5:1.5
	release3_3_4:1.5
	release3_3_3:1.5
	release3_3_2:1.5
	release3_3_1:1.5
	release3_3_0:1.5;
locks; strict;
comment	@c @;


1.7
date	2020.04.23.09.37.34;	author abonfi;	state Exp;
branches;
next	1.6;

1.6
date	2016.11.10.11.25.13;	author abonfi;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.16.07.19.48;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.11.13.14.35;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.19.16.10.34;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	2000.08.18.14.04.43;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	2000.08.14.14.34.08;	author aldo;	state Exp;
branches;
next	;


desc
@function RHSJacobian for the turbulence model
@


1.7
log
@changes required by petsc release 3.8
@
text
@      subroutine RHSJacobian_t(ts,t,global_in,A,B,str,ctx)
C
C     $Id: RHSJacobian_t.F,v 1.6 2016/11/10 11:25:13 abonfi Exp abonfi $
C
C
#include "petsc/finclude/petscvec.h"
#include "petsc/finclude/petscmat.h"
#include "petsc/finclude/petscts.h"
              use petscts
              use petscvec
              use petscmat
C
      implicit none
C
C  Input/output parameters:
      TS               ts
      double precision t
      Vec              global_in
      Mat              A,B
      MatStructure     str
      integer          ctx

      integer          IFAIL
C
      CALL MatAssemblyBegin(A,MAT_FINAL_ASSEMBLY,IFAIL) 
      CALL MatAssemblyEnd(A,MAT_FINAL_ASSEMBLY,IFAIL) 
C

      return
      end
@


1.6
log
@changed the location of petsc's header files
when migrating to version 3.6
@
text
@a1 2
      implicit none

d3 1
a3 1
C     $Id: RHSJacobian_t.F,v 1.5 2011/09/16 07:19:48 abonfi Exp abonfi $
a5 1
#include "petsc/finclude/petscsys.h"
d9 5
@


1.5
log
@Changed PETSc header file to comply with version 3.1
@
text
@d5 1
a5 1
C     $Id: RHSJacobian_t.F,v 1.4 2009/06/11 13:14:35 abonfi Exp abonfi $
d8 4
a11 4
#include "finclude/petscsys.h"
#include "finclude/petscvec.h"
#include "finclude/petscmat.h"
#include "finclude/petscts.h"
@


1.4
log
@changed location of PETSc include files with 3.0.0
@
text
@d5 1
a5 1
C     $Id: RHSJacobian_t.F,v 1.3 2000/10/19 16:10:34 aldo Exp $
d8 1
a8 1
#include "finclude/petsc.h"
@


1.3
log
@changed include file names for PETSc rev. 2.0.29
@
text
@d5 1
a5 1
C     $Id: RHSJacobian_t.F,v 1.2 2000/08/18 14:04:43 aldo Exp aldo $
d8 4
a11 4
#include "include/finclude/petsc.h"
#include "include/finclude/petscvec.h"
#include "include/finclude/petscmat.h"
#include "include/finclude/petscts.h"
@


1.2
log
@for release 0.10.9
@
text
@d5 1
a5 1
C     $Id: RHSJacobian_t.F,v 1.1 2000/08/14 14:34:08 aldo Exp aldo $
d9 3
a11 3
#include "include/finclude/vec.h"
#include "include/finclude/mat.h"
#include "include/finclude/ts.h"
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
C     $Id$
a10 4
#include "include/finclude/sles.h"
#include "include/finclude/ksp.h"
#include "include/finclude/pc.h"
#include "include/finclude/is.h"
a12 3
      INCLUDE 'implicit.h'
      INCLUDE 'flags.com'
      INCLUDE 'var.com'
d15 1
a15 1
      double precision t,dtmin
d21 1
a21 6
C  Local variables:
      Vec              local_in,dummy
      integer          bs,i,ierr
      PetscOffset      i_x
      Scalar           x_array(1)
      PLogDouble       tbeg,tend
d23 2
a24 1
#include "iset.com"
a25 98
#ifdef MPI
C
C     get local representation of the u vector
C
      CALL VecGhostGetLocalForm(global_in,local_in,IERR)
C     
C     we need to set the BlockSize on the local representation
C     of the vector ONLY as long as it is not defined yet
C
      CALL VecGetBlockSize(local_in,bs,IERR)
      IF(BS.NE.NTURB.AND.NTURB.GT.1)
     &   CALL VecSetBlockSize(local_in,NTURB,IERR)
C
C
#else
C
C     for the uniprocessor case local and global numbering 
C     are the same, maybe the following assignement
C     is already done in VecGhostGetLocalForm(), controlla!
C
      local_in=global_in
C
#endif
C
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
C  Complete the matrix assembly process and set some options
C - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
C
      BUILD_JAC = .TRUE. 
      BUILD_RHS = .NOT. BUILD_JAC
      CALL TSGetRHSJacobian(ts,A,A,PETSC_NULL_OBJECT,IERR)
C
      CALL VecGetArray(local_in,x_array,i_x,IERR) 
C
      CALL PetscGetTime(tbeg,IERR)
      CALL ApplicationFunction(A,x_array(i_x+1),dummy,dtmin,IERR)
      CALL PetscGetTime(tend,IERR)
      WRITE(6,*)'Build Jacobian in ',tend-tbeg
C
      CALL VecRestoreArray(local_in,x_array,i_x,IERR) 
C
C  Assemble matrix, using the 2-step process:
C       MatAssemblyBegin(), MatAssemblyEnd()
C  Computations can be done while messages are in transition,
C  by placing code between these two statements.

      call MatAssemblyBegin(A,MAT_FINAL_ASSEMBLY,ierr)
      call MatAssemblyEnd(A,MAT_FINAL_ASSEMBLY,ierr)
C
C
#ifdef MPI
          CALL MatZeroRowsLocal(A,NoSlipNodes,1.d0,IERR)
#else
          CALL MatZeroRows(A,NoSlipNodes,1.d0,IERR)
#endif
C
C
C     This will remove the entries from the matrix; but when
C     you assemble the matrix for the next time-step it will not
C     insert those unneeded values (the values that would be zeroed
C     in the next call to MatZeroRows()). This is a very efficient
C     way to do multiple linear systems BUT assumes
C
C     1) the rows you want to zero remain the same for each successive
C        linear system in the series
C     2) you are not adding new nonzeros in other parts of the matrix
C        at later timesteps (because the above option will cause those
C        new values to be ignored).
C
          CALL MatSetOption(A,MAT_NO_NEW_NONZERO_LOCATIONS,IERR)
C
C
C  Set flag to indicate that the Jacobian matrix retains an identical
C  nonzero structure throughout all timestepping iterations (although the
C  values of the entries change). Thus, we can save some work in setting
C  up the preconditioner (e.g., no need to redo symbolic factorization for
C  ILU/ICC preconditioners).
C   - If the nonzero structure of the matrix is different during
C     successive linear solves, then the flag DIFFERENT_NONZERO_PATTERN
C     must be used instead.  If you are unsure whether the matrix
C     structure has changed or not, use the flag DIFFERENT_NONZERO_PATTERN.
C   - Caution:  If you specify SAME_NONZERO_PATTERN, PETSc
C     believes your assertion and does not check the structure
C     of the matrix.  If you erroneously claim that the structure
C     is the same when it actually is not, the new preconditioner
C     will not function correctly.  Thus, use this optimization
C     feature with caution!
C
      STR = SAME_NONZERO_PATTERN
C
caldo
      CALL MatScale(-1.d0,A,IERR)
caldo

C  Set and option to indicate that we will never add a new nonzero location 
C  to the matrix. If we do, it will generate an error.

cxxx  call MatSetOption(A,MAT_NEW_NONZERO_LOCATION_ERR,ierr)
@
