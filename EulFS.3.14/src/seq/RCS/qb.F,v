head	1.8;
access
	tesistim;
symbols
	release3_14_0:1.8
	release3_13_0:1.8
	release3_12_0:1.8
	release3_11_0:1.8
	release3_10_0:1.8
	release3_8_0:1.8
	release3_7_1:1.7
	release3_7_0:1.7
	release3_4_5:1.6
	release3_4_4:1.6
	release3_4_3:1.6
	release3_4_2:1.6
	release3_4_1:1.6
	release3_4_0:1.6
	release3_3_5:1.6
	release3_3_4:1.6
	release3_3_3:1.6
	release3_3_2:1.6
	release3_3_1:1.6
	release3_3_0:1.5;
locks; strict;
comment	@c @;


1.8
date	2020.04.23.09.37.34;	author abonfi;	state Exp;
branches;
next	1.7;

1.7
date	2016.11.10.11.25.13;	author abonfi;	state Exp;
branches;
next	1.6;

1.6
date	2013.01.26.11.30.51;	author abonfi;	state Exp;
branches;
next	1.5;

1.5
date	2011.09.16.07.19.48;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2009.06.11.13.10.58;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	2005.12.23.10.06.01;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	2005.10.21.14.44.36;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2005.10.11.09.44.07;	author abonfi;	state Exp;
branches;
next	;


desc
@computes circumferential averages and ISRE
@


1.8
log
@changes required by petsc release 3.8
@
text
@      subroutine circum_av(a,ja,ia,degree,rcline,zroe,zcl,wksp,
     &                     nofvar,ncl,lda)
c
c     $Id: qb.F,v 1.7 2016/11/10 11:25:13 abonfi Exp abonfi $
c
#include "petsc/finclude/petscsys.h"
      use petscsys
C
      implicit none
C
      include 'paramt.h'
      include 'bnd.h'
      include 'constants.h'
      include 'periodic.com'
      include 'stream.com'
      INTEGER MY_PE
      COMMON/MPICOM/MY_PE
      integer nofvar,ncl,lda
      integer ja(lda,*),ia(ncl+1),degree(ncl)
      double precision a(lda,*),rcline(ncl),zcl(nofvar,ncl),
     &ZROE(nofvar,*),wksp(*)
c
c     rcline radial coord for the current c-line
c     zcl    parameter vector for the current c-line
c     ia(3,j) indices of the three meshpoints surrounding a node
c     on a c-line
c     a(3,j)  area coordinates of c-line vertex j
c     a(4,j)  theta coordinate of c-line vertex j
c
      integer j,j1,j2,k,il,jbgn,jend,ipoin,ivar,IFAIL
      double precision denom,ux,uy,uz,ur,ut,sint,cost,wght,theta,dth,
     &help
c
!     write(6,*)'Hello world! This is ia on # ',MY_PE,
!    &(ia(il),il=1,ncl+1)
!     write(6,*)'Hello world! This is deg on # ',MY_PE,
!    &(degree(il),il=1,ncl)
c
      do 1 il = 1, ncl ! loop over clines
         do 7 ivar = 1, nofvar
              zcl(ivar,il) = ZERO
    7    continue
         jbgn = ia(il)     ! first vertex for the current cline
         jend = ia(il+1)-1 ! last  vertex for the current cline
c        write(6,*)il,jbgn,jend
         if( jend .LT. jbgn )goto 1
c
c        the integration formula to average over a c-line is:
c
c        int = 1/2*[z(1)+z(2)]*(th(2)-th(1))+
c              1/2*[z(2)+z(3)]*(th(3)-th(2))+
c              ..........
c              1/2*[z(n-1)+z(n)]*(th(n)-th(n-1))
c
c        which can be re-written as: 
c
c        int = 1/2*[z(1)*(th(2)-th(1))+z(2)*(th(3)-th(1))+..
c                   z(i)*(th(i+1)-th(i-1))+..+z(n)*(th(n)-th(n-1)]
c
c
         do 3 j = jbgn,jend ! loop over vertices of the current clines
         if    (j.EQ.jbgn)then
            j2 = j+1
            j1 = j
         elseif(j.EQ.jend)then
            j2 = jend
            j1 = jend-1
         else
            j2 = j+1
            j1 = j-1
         endif
c
c        we get the absolute value since the c-line might be traversed
c        for decreasing values of theta, but at the end we average by
c        the positive pitch
c
         dth = HALF*ABS(a(4,j2)-a(4,j1))
             do 4 ivar = 1, nofvar
                wksp(ivar) = ZERO
    4        continue
             theta = a(4,j)
             do 5 k = 1,3 ! loop over the vertices of the bndry face
                 ipoin = ja(k,j)
c     write( 6,*)ipoin,(zroe(ivar,ipoin),ivar=1,nofvar)
                 wght  =  a(k,j)
                 do 5 ivar = 1,nofvar
                    wksp(ivar) = wksp(ivar) + ZROE(ivar,ipoin)*wght
    5        continue
c
c     perform rotation 
c
!            wksp(1) = poutlet
             ux = wksp(2)
             uy = wksp(3)
             uz = wksp(4)
             cost = cos(theta)
             sint = sin(theta)
             ur = uy*cost+uz*sint
             ut =-uy*sint+uz*cost
             zcl(1,il) = zcl(1,il) + wksp(1) * dth
             zcl(2,il) = zcl(2,il) + ux * dth
             zcl(3,il) = zcl(3,il) + ur * dth
             zcl(4,il) = zcl(4,il) + ut * dth
    3    continue ! end loop over vertices of the current c-line
    1 continue ! end loop over c-line
#ifdef MPI
      CALL MPI_Allreduce(zcl,wksp,ncl*NOFVAR,MPI_DOUBLE_PRECISION,
     &                   MPI_SUM,PETSC_COMM_WORLD,IFAIL)
      CALL DCOPY(ncl*NOFVAR,wksp,1,zcl,1)
#endif
c
c
      call dscal(ncl*nofvar,ONE/pitch,zcl,1)
!     write(6,*)'p on all c-lines is ',(zcl(1,il),il=1,ncl)
c
      return
      end
c
      subroutine isre(rcline,zcl,nofvar,ncl)
c
c     purpose: compute pressure distribution over the clines
c              based on simple radial equilibrium
c
      implicit none
      include 'paramt.h'
      include 'bnd.h'
      include 'constants.h'
      include 'stream.com'
      INTEGER MY_PE
      COMMON/MPICOM/MY_PE
      integer nofvar,ncl
      double precision rcline(ncl),zcl(nofvar,ncl)
      double precision ut
      integer il,ilm1
c
c     rcline radial coord for the current c-line
c     zcl    parameter vector for the current c-line
c
      do 1 il = 1, ncl ! loop over clines
         ut = zcl(4,il)
         zcl(2,il) = ut*ut/ rcline(il)
    1 continue ! end loop over clines
!        write(6,*)'ut**2 is ',(zcl(2,il),il=1,ncl)
         zcl(1,1) = poutlet
      do 3 il = 2, ncl ! loop over clines
         ilm1 = il-1
         zcl(1,il) = zcl(1,ilm1) + HALF*(zcl(2,il)+zcl(2,ilm1))*
     &   (rcline(il)-rcline(ilm1)) 
!        zcl(1,il) = poutlet
    3    continue
!        write(6,*)(rcline(il),il=1,ncl)
!        write(16+MY_PE,*)(zcl(1,il),il=1,ncl)
!        write(6,*)'press is ',(zcl(1,il),il=1,ncl)
c
      return
      end
@


1.7
log
@changed the location of petsc's header files
when migrating to version 3.6
@
text
@a2 1
      implicit none
d4 1
a4 1
c     $Id: qb.F,v 1.6 2013/01/26 11:30:51 abonfi Exp abonfi $
d7 4
@


1.6
log
@changed the name of included header/common files
@
text
@d5 1
a5 1
c     $Id: qb.F,v 1.5 2011/09/16 07:19:48 abonfi Exp abonfi $
d7 1
a7 1
#include "finclude/petscsys.h"
@


1.5
log
@Changed PETSc header file to comply with version 3.1
@
text
@d5 1
a5 1
c     $Id: qb.F,v 1.4 2009/06/11 13:10:58 abonfi Exp abonfi $
d10 1
a10 1
      include 'constants'
d124 1
a124 1
      include 'constants'
@


1.4
log
@location of PETSc include file ahs chanegd with release 3.0.0
@
text
@d5 1
a5 1
c     $Id: qb.F,v 1.3 2005/12/23 10:06:01 abonfi Exp abonfi $
d7 1
a7 1
#include "finclude/petsc.h"
@


1.3
log
@working MPI version
@
text
@d5 1
a5 1
c     $Id: qb.F,v 1.2 2005/10/21 14:44:36 abonfi Exp abonfi $
d7 1
a7 1
#include "include/finclude/petsc.h"
@


1.2
log
@add the leading dimension for ja,a
@
text
@d5 1
a5 1
c     $Id: qb.F,v 1.1 2005/10/11 09:44:07 abonfi Exp abonfi $
d9 1
d11 2
d27 3
a29 2
      integer j,k,il,jbgn,jend,ipoin,ivar,IFAIL
      double precision denom,ux,uy,uz,ur,ut,sint,cost,wght,theta
d33 2
a34 2
c     write(6,*)'Hello world! This is deg on # ',MY_PE,
c    &(degree(il),il=1,ncl)
d40 1
a40 1
         jbgn = ia(il)   ! first vertex for the current cline
d44 14
d59 16
d79 1
a79 1
             do 5 k = 1,3
d89 1
d97 6
a102 6
             zcl(1,il) = zcl(1,il) + wksp(1)
             zcl(2,il) = zcl(2,il) + ux
             zcl(3,il) = zcl(3,il) + ur
             zcl(4,il) = zcl(4,il) + ut
    3    continue ! end loop over vertices of the current clines
    1 continue ! end loop over clines
a107 1
c     write(6,*)'p on all c-line ',(zcl(1,il),il=1,ncl)
a108 1
c     arithmetic average over each c-line 
d110 2
a111 5
      do 8 il = 1,ncl
         denom = ONE / real(degree(il))
         do 8 ivar = 1, nofvar
            zcl(ivar,il) = zcl(ivar,il) * denom
    8    continue
d140 1
a140 1
c        write(6,*)'ut**2 is ',(zcl(2,il),il=1,ncl)
d148 1
a148 1
c        write(6,*)(rcline(il),il=1,ncl)
d150 1
a150 1
c        write(6,*)(zcl(1,il),il=1,ncl)
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
     &                     nofvar,ncl)
d5 1
a5 1
c     $Id:$
d12 3
a14 3
      integer nofvar,ncl
      integer ja(4,*),ia(ncl+1),degree(ncl)
      double precision a(4,*),rcline(ncl),zcl(nofvar,ncl),
d19 2
a20 1
c     ia(3,j) indices of the three meshpoints surrounding 
d22 1
d27 2
a28 2
      write(6,*)'Hello world! This is ia on # ',MY_PE,
     &(ia(il),il=1,ncl+1)
d31 1
a31 1
      stop
d38 1
a38 1
         write(6,*)il,jbgn,jend
d47 1
a47 1
c     write( 6,*)(zroe(ivar,ipoin),ivar=1,nofvar)
a51 2
c     write( 6,*)(wksp(ivar),ivar=1,nofvar)
c     pause
a67 2
      write(6,*)'Hello world! I am about to call MPI # ',MY_PE
      stop
d73 4
a76 1
!     write(26+MY_PE,*)'all c-line ',(zcl(1,il),il=1,ncl)
d110 1
a110 1
         write(6,*)'ut**2 is ',(zcl(2,il),il=1,ncl)
d119 2
a120 1
         write(16+MY_PE,*)(zcl(1,il),il=1,ncl)
@
