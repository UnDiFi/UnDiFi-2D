head	1.33;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.33
	release3_13_0:1.33
	release3_12_0:1.33
	release3_11_0:1.33
	release3_10_0:1.33
	release3_8_0:1.33
	release3_7_1:1.32
	release3_7_0:1.32
	release3_4_5:1.31
	release3_4_4:1.31
	release3_4_3:1.31
	release3_4_2:1.31
	release3_4_1:1.30
	release3_4_0:1.27
	release3_3_5:1.27
	release3_3_4:1.27
	release3_3_3:1.27
	release3_3_2:1.27
	release3_3_1:1.26
	release3_3_0:1.26;
locks; strict;
comment	@c @;


1.33
date	2020.04.23.09.46.19;	author abonfi;	state Exp;
branches;
next	1.32;

1.32
date	2016.11.10.11.25.13;	author abonfi;	state Exp;
branches;
next	1.31;

1.31
date	2013.07.16.13.10.47;	author abonfi;	state Exp;
branches;
next	1.30;

1.30
date	2013.06.06.10.48.43;	author abonfi;	state Exp;
branches;
next	1.29;

1.29
date	2013.06.04.16.32.22;	author abonfi;	state Exp;
branches;
next	1.28;

1.28
date	2013.06.04.15.22.26;	author abonfi;	state Exp;
branches;
next	1.27;

1.27
date	2013.01.29.14.40.49;	author abonfi;	state Exp;
branches;
next	1.26;

1.26
date	2011.09.16.07.19.48;	author abonfi;	state Exp;
branches;
next	1.25;

1.25
date	2011.03.30.09.01.09;	author abonfi;	state Exp;
branches;
next	1.24;

1.24
date	2009.06.11.13.10.58;	author abonfi;	state Exp;
branches;
next	1.23;

1.23
date	2008.02.25.09.42.17;	author abonfi;	state Exp;
branches;
next	1.22;

1.22
date	2004.12.20.14.36.48;	author aldo;	state Exp;
branches;
next	1.21;

1.21
date	2002.10.25.06.02.17;	author abonfi;	state Exp;
branches;
next	1.20;

1.20
date	2002.02.19.09.25.46;	author abonfi;	state Exp;
branches;
next	1.19;

1.19
date	2001.07.04.06.51.55;	author abonfi;	state Exp;
branches;
next	1.18;

1.18
date	2001.05.24.10.26.58;	author abonfi;	state Exp;
branches;
next	1.17;

1.17
date	2001.01.20.13.50.34;	author aldo;	state Exp;
branches;
next	1.16;

1.16
date	2000.10.26.15.11.54;	author aldo;	state Exp;
branches;
next	1.15;

1.15
date	2000.10.19.16.10.34;	author aldo;	state Exp;
branches;
next	1.14;

1.14
date	2000.08.18.14.05.50;	author aldo;	state Exp;
branches;
next	1.13;

1.13
date	2000.08.15.13.06.42;	author aldo;	state Exp;
branches;
next	1.12;

1.12
date	2000.08.03.10.09.23;	author aldo;	state Exp;
branches;
next	1.11;

1.11
date	2000.06.23.16.50.00;	author aldo;	state Exp;
branches;
next	1.10;

1.10
date	2000.06.20.15.52.44;	author aldo;	state Exp;
branches;
next	1.9;

1.9
date	2000.06.09.16.28.01;	author aldo;	state Exp;
branches;
next	1.8;

1.8
date	99.11.05.20.39.30;	author aldo;	state Exp;
branches;
next	1.7;

1.7
date	98.11.07.09.01.00;	author aldo;	state Exp;
branches;
next	1.6;

1.6
date	98.08.13.13.16.44;	author aldo;	state Exp;
branches;
next	1.5;

1.5
date	98.08.07.13.23.13;	author aldo;	state Exp;
branches;
next	1.4;

1.4
date	98.07.29.12.58.14;	author aldo;	state Exp;
branches;
next	1.3;

1.3
date	98.05.10.08.24.31;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	98.02.10.08.53.46;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	98.01.02.15.33.14;	author aldo;	state Exp;
branches;
next	;


desc
@set b.c. on the rhs. for scalar euler/NS problems
@


1.33
log
@changes required by petsc release 3.8 and
NodalBcs, which is an array of derived type TS
in now passed using arguments in the calls
@
text
@      SUBROUTINE RHSBC4(X,RHS,NodalBcs,ibgn,NDIM,PRATIO,COMPRESSIBLE)
C
C     This routine sets the boundary conditions in the
C     nodal residual ..
C
C     $Id: rhsbc4.F,v 1.32 2016/11/10 11:25:13 abonfi Exp abonfi $
C
C
#include "petsc/finclude/petscvec.h"
      use petscvec
C
      IMPLICIT NONE
C
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
      INCLUDE 'bnd.h'
      INCLUDE 'bctype.h'
      INCLUDE 'iset.h'
C
      DOUBLE PRECISION X(*),RHS(*),PRATIO(3,*)
      LOGICAL COMPRESSIBLE
C
C
      INCLUDE 'stream.com'
      INCLUDE 'flags.com'
      INCLUDE 'visco.com'
      INCLUDE 'pfcgas.com'
C
C
      Integer IDX_V(1),IDX_X(1)
      PetscScalar X_V(1)
C
      PetscOffset RHS_I,IDX_I
      IS, dimension(0:*) :: NodalBcs
C
      INTEGER IPOIN,I,NI,IFAIL,I1,I2,I3,I4,I5,IBGN,NDIM,LDA,J
      DOUBLE PRECISION ALPHA,DUM,U1,U2
!     DOUBLE PRECISION KINETIC,ASQR,MACHSQR,P0,TEMP,DENS
      DOUBLE PRECISION PRESSC
      EXTERNAL PRESSC 
C
C    EXPLICIT Treatment of supersonic and/or 
C             viscous nodes
C
C    note that the indices for are
C         given in global numbering (and 0-based indexing)
C         the reason for using global numbering is that
C         these index sets are among the arguments
C         of the call to MatZeroRows
C
C ********************************************************************
C Supersonic variables: a Dirichlet condition (IBC=1)
C this is in the form of NO increment
C d(r,rE,ru,rv,rw) = 0
C ********************************************************************
      CALL ISGetSize(NodalBcs(SupersonicVariables),NI,IFAIL)
      IF(NI.NE.0)THEN
         CALL ISGetIndices(NodalBcs(SupersonicVariables),IDX_V,IDX_I,
     &                     IFAIL)
         DO 100 I = 1,NI
             IPOIN = IDX_V(IDX_I+I)+1-IBGN
             RHS(IPOIN) = ZERO
  100    CONTINUE
         CALL ISRestoreIndices(NodalBcs(SupersonicVariables),IDX_V,
     &                         IDX_I,IFAIL)
      ENDIF
C ********************************************************************
C No-slip & no-penetration boundary condition (IBC=6)
C this is in the form of NO increment
C d(ru,rv,rw) = 0
C so a NON zero velocity would be preserved
C ********************************************************************
      CALL ISGetSize(NodalBcs(NoSlipVelocities),NI,IFAIL)
      IF(NI.NE.0)THEN
         CALL ISGetIndices(NodalBcs(NoSlipVelocities),IDX_V,IDX_I,IFAIL)
         DO 110 I = 1,NI
             IPOIN = IDX_V(IDX_I+I)+1-IBGN
             RHS(IPOIN) = ZERO
  110    CONTINUE
         CALL ISRestoreIndices(NodalBcs(NoSlipVelocities),IDX_V,IDX_I,
     &                         IFAIL)
      ENDIF
C
C ********************************************************************
C Fixed temperature wall boundary condition (IBC=6,IADIA=1)
C this is in the form
C d(T) = T(required) - T^n
C so can also be applied with the ``wrong'' initial condition
C
C ************* W A R N I N G ******************
C this is currently implemented only for 
C -nondimensionalisation external
C
C
C ********************************************************************
C
      CALL ISGetSize(NodalBcs(Isothermal),NI,IFAIL)
      IF(NI.NE.0)THEN
         CALL ISGetIndices(NodalBcs(Isothermal),IDX_V,IDX_I,IFAIL)
c
c
C        ALPHA = TWALL/GAM/GM1/(M_infty*M_infty)
         ALPHA = RSTAR*TWALL/GM1
C
         DO 120 I = 1,NI
C
C N.B. X is the parameter vector 
C
C
C I2  1-based address of the location where \sqrt(\rho) H is stored
C     (+1) because of the 0-based indexing in the index set
             I2 = IDX_V(IDX_I+I)+1-IBGN
             I1 = I2-1
             I3 = I2+1
             I4 = I3+1
             I5 = I4+1
             DUM = X(I3)*X(I3)+X(I4)*X(I4)
             IF(NDIM.EQ.3)DUM = DUM + X(I5)*X(I5)
             U2 = GINV * X(I1)*X(I2)+HALF*GM1OG*DUM
             U1 = X(I1)*X(I1)
             RHS(I2) = ALPHA*U1-U2
!            write(6,*)i2,DUM,alpha*U1,U2
  120    CONTINUE
         CALL ISRestoreIndices(NodalBcs(Isothermal),IDX_V,IDX_I,IFAIL)
      ENDIF
C
C ********************************************************************
C Dirichlet condition (IBC=1)
C this is in the form of NO increment
C d(phi) = 0
C ********************************************************************
      IF( LAPLACE )THEN
         CALL ISGetSize(NodalBcs(Dirichlet4Poisson),NI,IFAIL)
         IF(NI.NE.0)THEN
            CALL ISGetIndices(NodalBcs(Dirichlet4Poisson),IDX_V,IDX_I,
     &                        IFAIL)
            DO 104 I = 1,NI
               IPOIN = IDX_V(IDX_I+I)+1-IBGN
               RHS(IPOIN) = ZERO
  104       CONTINUE
            CALL ISRestoreIndices(NodalBcs(Dirichlet4Poisson),IDX_V,
     &                            IDX_I,IFAIL)
         ENDIF
      ENDIF ! test on Poisson
C
      RETURN
      END
@


1.32
log
@changed the location of petsc's header files
when migrating to version 3.6
@
text
@d1 1
a1 1
      SUBROUTINE RHSBC4(X,RHS,ibgn,NDIM,PRATIO,COMPRESSIBLE)
d6 1
a6 1
C     $Id: rhsbc4.F,v 1.31 2013/07/16 13:10:47 abonfi Exp abonfi $
d9 3
a13 4
#include "petsc/finclude/petscsys.h"
#include "petsc/finclude/petscvec.h"
#include "petsc/finclude/petscis.h"
C
d18 1
a28 1
#include "iset.com"
d34 1
d37 2
a38 2
      DOUBLE PRECISION ALPHA,SUM,U1,U2,KINETIC,ASQR,MACHSQR,
     +P0,TEMP,DENS
d56 1
a56 1
      CALL ISGetSize(SupersonicVariables,NI,IFAIL)
d58 2
a59 1
         CALL ISGetIndices(SupersonicVariables,IDX_V,IDX_I,IFAIL)
d64 2
a65 1
         CALL ISRestoreIndices(SupersonicVariables,IDX_V,IDX_I,IFAIL)
d73 1
a73 1
      CALL ISGetSize(NoSlipVelocities,NI,IFAIL)
d75 1
a75 1
         CALL ISGetIndices(NoSlipVelocities,IDX_V,IDX_I,IFAIL)
d80 2
a81 1
         CALL ISRestoreIndices(NoSlipVelocities,IDX_V,IDX_I,IFAIL)
d97 1
a97 1
      CALL ISGetSize(Isothermal,NI,IFAIL)
d99 1
a99 1
         CALL ISGetIndices(Isothermal,IDX_V,IDX_I,IFAIL)
d117 3
a119 3
             SUM = X(I3)*X(I3)+X(I4)*X(I4)
             IF(NDIM.EQ.3)SUM = SUM + X(I5)*X(I5)
             U2 = GINV * X(I1)*X(I2)+HALF*GM1OG*SUM
d122 1
a122 1
!            write(6,*)i2,SUM,alpha*U1,U2
d124 1
a124 1
         CALL ISRestoreIndices(Isothermal,IDX_V,IDX_I,IFAIL)
d133 1
a133 1
         CALL ISGetSize(Dirichlet4Poisson,NI,IFAIL)
d135 2
a136 1
            CALL ISGetIndices(Dirichlet4Poisson,IDX_V,IDX_I,IFAIL)
d141 2
a142 1
            CALL ISRestoreIndices(Dirichlet4Poisson,IDX_V,IDX_I,IFAIL)
d144 1
a144 1
      ENDIF ! test on poisson
@


1.31
log
@removed symmetry bcs
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.30 2013/06/06 10:48:43 abonfi Exp abonfi $
d11 3
a13 3
#include "finclude/petscsys.h"
#include "finclude/petscvec.h"
#include "finclude/petscis.h"
@


1.30
log
@removed stuff related to the "strong" boundary conditions
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.29 2013/06/04 16:32:22 abonfi Exp abonfi $
a79 16
C ********************************************************************
C ``strong'' symmetry boundary condition (IBC=6)
C this is in the form of NO increment
C d(ru,rv,rw) = 0
C so a NON zero velocity would be preserved
C ********************************************************************
      CALL ISGetSize(YSymmetry,NI,IFAIL)
      IF(NI.NE.0)THEN
         CALL ISGetIndices(YSymmetry,IDX_V,IDX_I,IFAIL)
         DO 112 I = 1,NI
             IPOIN = IDX_V(IDX_I+I)+1-IBGN
             RHS(IPOIN) = ZERO
  112    CONTINUE
         CALL ISRestoreIndices(YSymmetry,IDX_V,IDX_I,IFAIL)
      ENDIF
C
@


1.29
log
@retrieves pointer for Dirichlet nodes on Laplace's equation
only when the LAPLACE flag is TRUE
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.28 2013/06/04 15:22:26 abonfi Exp abonfi $
a95 42
      IF(IBCTYPE.EQ.BC_TYPE_STRONG)THEN
C ********************************************************************
C Constant pressure boundary condition (IBC=2)
C for compressible flow
C     ------------
C this is in the form
C d(ru,rv,rw) = p(required) - p^n
C so can also be applied with the ``wrong'' initial condition
C while for INcompressible flow
C           --------------
C this is in the form
C d(ru,rv,rw) = 0.
C so it MUST be applied with the ``right'' initial condition
C ********************************************************************
      CALL ISGetSize(CnstPressure,NI,IFAIL)
C     write(6,*)'Constant pressure ',NI
      IF(NI.NE.0)THEN
         CALL ISGetIndices(CnstPressure,IDX_V,IDX_I,IFAIL)
         IF(.NOT.COMPRESSIBLE)THEN
             DO 210 I = 1,NI
                 IPOIN = IDX_V(IDX_I+I)+1-IBGN
                 RHS(IPOIN) = POUTLET - X(IPOIN)
C                write(6,*)ipoin,POUTLET,X(IPOIN)
  210        CONTINUE
          ELSE
             DO 220 I = 1,NI
C
C N.B. X is the parameter vector 
C
C I2  1-based address of the location where \sqrt(\rho) H is stored
C     (+1) because of the 0-based indexing in the index set
C
C
                 I2 = IDX_V(IDX_I+I)+1-IBGN
                 I1 = I2-1
                 RHS(I2) = POUTLET-PRESSC(NDIM,X(I1))
C                write(6,*)i2,POUTLET,PRESSC(NDIM,X(I1))
  220        CONTINUE
          ENDIF
          CALL ISRestoreIndices(CnstPressure,IDX_V,IDX_I,IFAIL)
      ENDIF
      ENDIF
@


1.28
log
@removed support for strong boundary conditions
and added support for Laplace's equation
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.27 2013/01/29 14:40:49 abonfi Exp abonfi $
d187 11
a197 9
      CALL ISGetSize(Dirichlet4Poisson,NI,IFAIL)
      IF(NI.NE.0)THEN
         CALL ISGetIndices(Dirichlet4Poisson,IDX_V,IDX_I,IFAIL)
         DO 104 I = 1,NI
             IPOIN = IDX_V(IDX_I+I)+1-IBGN
             RHS(IPOIN) = ZERO
  104    CONTINUE
         CALL ISRestoreIndices(Dirichlet4Poisson,IDX_V,IDX_I,IFAIL)
      ENDIF
@


1.27
log
@The adiabatic index is now a variable, not any longer a parameter
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.26 2011/09/16 07:19:48 abonfi Exp abonfi $
d183 3
a185 5
C Inlet boundary condition for internal flows (IBC=8)
C this is in the form
C d(Q) = Q(required)-Q^n
C The IndexSet Internal_inflow addresses all rows
C where the b.c. is applied 
d187 8
a194 106
C
      IF(IBCTYPE.EQ.BC_TYPE_STRONG)THEN
C
      CALL ISGetSize(Internal_inflow,NI,IFAIL)
      IF(NI.NE.0.AND.COMPRESSIBLE)THEN
         LDA = NDIM+1
         CALL ISGetIndices(Internal_inflow,IDX_V,IDX_I,IFAIL)
c
         J=0
c
         DO 135 I = 1,NI,LDA
C
             J=J+1
C
C N.B. X is the parameter vector 
C
C I1  1-based address of the location where \sqrt(\rho) is stored
C     (+1) because of the 0-based indexing in the index set
C
             I1 = IDX_V(IDX_I+I)+1-IBGN
             I2 = I1+1
             I3 = I2+1
             I4 = I3+1
             I5 = I4+1
C
C in a better implementation the b.c. for the flow angles
C should be set using IDX_V(IDX_I+I+2) 
C
             KINETIC = X(I3)*X(I3)+X(i4)*X(I4)
             IF(NDIM.EQ.3)KINETIC = KINETIC + X(I5)*X(I5)
             KINETIC = HALF * KINETIC /(X(I1)*X(I1))
             ASQR = GM1*(X(I2)/X(I1)-KINETIC)
             MACHSQR = TWO*KINETIC/ASQR
             TEMP = ONE + HALF*GM1*MACHSQR
             P0 = PRESSC(NDIM,X(I1)) * (TEMP**GOGM1)
             DENS = X(I1)*X(I1)
C
caldo        RHS(I1) = ONE - PRESSC(NDIM,X(I1))/DENS**GAM
caldo
caldo        Entropy
caldo
caldo        RHS(I1) = PRATIO(1,J)**(-GM1) - 
caldo&                 PRESSC(NDIM,X(I1))/DENS**GAM
caldo
caldo        write(6,*)j,PRATIO(1,J)**(-GM1),PRESSC(NDIM,X(I1))/DENS**GAM
             RHS(I1) = ONE - PRESSC(NDIM,X(I1))/DENS**GAM
C
C        non-dimensional total enthalpy is GOGM1
C
             RHS(I2) = GOGM1 - X(I2)/X(I1)
caldo        write(6,*)j,GOGM1,X(I2)/X(I1)
             RHS(I4) = (-X(I3)*FLOWDIR(2)+X(I4)*FLOWDIR(1))
     +                          /X(I1)
C
C a simplyfied b.c. that assumes w=w^0=0.
C
             IF(NDIM.EQ.3)RHS(I5) = ZERO
  135    CONTINUE
         CALL ISRestoreIndices(Internal_inflow,IDX_V,IDX_I,IFAIL)
C
C
C
      ELSEIF(NI.NE.0.AND.(.NOT.COMPRESSIBLE))THEN
C
C
C
         LDA = NDIM
         CALL ISGetIndices(Internal_inflow,IDX_V,IDX_I,IFAIL)
c
         J=0
c
         DO 136 I = 1,NI,LDA
C
             J=J+1
C
C N.B. X is the primitive variables (p,u,v,w) vector 
C
C I1  1-based address of the location where pressure is stored
C     (+1) because of the 0-based indexing in the index set
C
             I1 = IDX_V(IDX_I+I)+1-IBGN
             I2 = I1+1
             I3 = I2+1
             I4 = I3+1
C
             KINETIC = X(I2)*X(I2)+X(i3)*X(I3)
             IF(NDIM.EQ.3)KINETIC = KINETIC + X(I4)*X(I4)
             KINETIC = HALF * KINETIC
             P0 = X(I1) + KINETIC
C
C            Total pressure
C
caldo        write(6,*)1+((i1-1)/3),PRATIO(1,J)
caldo        RHS(I1) = PRATIO(1,J) - P0
             RHS(I1) = ONE - P0
caldo        RHS(I1) = PRATIO(3,J)**2*(PRATIO(1,J)-X(I1))-KINETIC
C
C
             RHS(I3) = (-X(I2)*FLOWDIR(2)+X(I3)*FLOWDIR(1))
C
C a simplyfied b.c. that assumes w=w^0=0.
C
             IF(NDIM.EQ.3)RHS(I4) = ZERO
  136    CONTINUE
         CALL ISRestoreIndices(Internal_inflow,IDX_V,IDX_I,IFAIL)
      ENDIF
@


1.26
log
@Changed PETSc header file to comply with version 3.1
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.25 2011/03/30 09:01:09 abonfi Exp abonfi $
d27 1
@


1.25
log
@sets constant for the dimensionless equation of state
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.24 2009/06/11 13:10:58 abonfi Exp abonfi $
d11 1
a11 1
#include "finclude/petsc.h"
@


1.24
log
@location of PETSc include file ahs chanegd with release 3.0.0
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.23 2008/02/25 09:42:17 abonfi Exp abonfi $
d16 1
a23 1
      INCLUDE 'constants'
d156 2
a157 1
         ALPHA = TWALL/GAM/GM1/(M_infty*M_infty)
@


1.23
log
@changed variable names
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.22 2004/12/20 14:36:48 aldo Exp abonfi $
d11 3
a13 3
#include "include/finclude/petsc.h"
#include "include/finclude/petscvec.h"
#include "include/finclude/petscis.h"
@


1.22
log
@add Y-symmetry boundary condition
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.21 2002/10/25 06:02:17 abonfi Exp aldo $
d37 1
a37 1
     +PTOT,TEMP,DENS
d221 1
a221 1
             PTOT = PRESSC(NDIM,X(I1)) * (TEMP**GOGM1)
d275 1
a275 1
             PTOT = X(I1) + KINETIC
d280 2
a281 2
caldo        RHS(I1) = PRATIO(1,J) - PTOT
             RHS(I1) = ONE - PTOT
@


1.21
log
@re-implemented strong bcs for inlet/outlet
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.20 2002/02/19 09:25:46 abonfi Exp abonfi $
d79 16
d175 1
@


1.20
log
@changed Scalar into PetscScalar to comply to ver. 2.1.1
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.19 2001/07/04 06:51:55 abonfi Exp abonfi $
d17 1
d25 1
d79 1
a79 1
#if 0
d94 1
d101 1
d115 1
a115 1
caldo            write(6,*)i2,POUTLET,PRESSC(NDIM,X(I1))
d120 1
a120 1
#endif
d171 1
a171 1
#if 0
d211 2
a212 2
             RHS(I1) = PRATIO(1,J)**(-GM1) - 
     &                 PRESSC(NDIM,X(I1))/DENS**GAM
d215 1
a215 1
caldo        RHS(I1) = ONE - PRESSC(NDIM,X(I1))/DENS**GAM
a259 1
C
d263 3
a265 2
C            RHS(I1) = PRATIO(1,J) - PTOT
             RHS(I1) = PRATIO(3,J)**2*(PRATIO(1,J)-X(I1))-KINETIC
d276 1
a276 1
#endif
@


1.19
log
@changed boundary conditions for inflow/outflow
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.18 2001/05/24 10:26:58 abonfi Exp abonfi $
d29 1
a29 1
      Scalar X_V(1)
@


1.18
log
@allow specifying an inlet velocity profile
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.17 2001/01/20 13:50:34 aldo Exp abonfi $
d77 1
d116 1
d167 1
d272 1
@


1.17
log
@add variable inlet profile for total pressure and also
extended to INcompressible flows
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.16 2000/10/26 15:11:54 aldo Exp aldo $
d18 1
a18 1
      DOUBLE PRECISION X(*),RHS(*),PRATIO(*)
d96 1
a96 1
                 RHS(IPOIN) = ZERO
d110 1
a110 1
                 write(6,*)i2,POUTLET,PRESSC(NDIM,X(I1))
d204 2
a205 1
             RHS(I1) = PRATIO(J)**(-GM1) - PRESSC(NDIM,X(I1))/DENS**GAM
d207 1
a207 1
caldo        write(6,*)j,PRATIO(J)**(-GM1),PRESSC(NDIM,X(I1))/DENS**GAM
d256 3
a258 1
             RHS(I1) = PRATIO(J)*1.5d0 - PTOT
@


1.16
log
@some bug fixes for the parallel case
@
text
@d1 1
a1 1
      SUBROUTINE RHSBC4(X,RHS,ibgn,NDIM,COMPRESSIBLE)
d6 1
a6 1
C     $Id: rhsbc4.F,v 1.15 2000/10/19 16:10:34 aldo Exp $
d18 1
a18 1
      DOUBLE PRECISION X(*),RHS(*)
d33 1
a33 1
      INTEGER IPOIN,I,NI,IFAIL,I1,I2,I3,I4,I5,IBGN,NDIM,LDA
d110 1
d124 1
a124 1
C -nondimensionalisation internal
d160 1
a160 1
C d(Q) = 0
a162 4
C
C ************* W A R N I N G ******************
C this is currently implemented only for 
C COMPRESSIBLE flows
a165 1
      LDA = NDIM+1
d167 2
a168 1
      IF(NI.NE.0)THEN
d171 1
d175 2
d188 3
d200 8
a207 2
             RHS(I1) = ONE - PRESSC(NDIM,X(I1))/DENS**GAM
caldo        RHS(I1) = ZERO
d211 2
a212 1
             RHS(I2) = (GOGM1 - X(I2)/X(I1))
d220 44
a263 1
c        pause
@


1.15
log
@changed include file names for PETSc rev. 2.0.29
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.14 2000/08/18 14:05:50 aldo Exp aldo $
d79 2
d84 5
a105 1
C to be still checked in the parallel case
d107 1
a107 1
                 I2 = IDX_V(IDX_I+I)+1
d120 6
d162 4
d169 1
a169 1
      LDA = NDIM+1 
d205 4
@


1.14
log
@the RHS is now a FORTRAN array; also introduced
the row offset for the MPI case
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.13 2000/08/15 13:06:42 aldo Exp aldo $
d12 2
a13 2
#include "include/finclude/vec.h"
#include "include/finclude/is.h"
d181 2
a182 2
c            RHS(I1) = ONE - PRESSC(NDIM,X(I1))/DENS**GAM
             RHS(I1) = ZERO
@


1.13
log
@bug fixed with the subsonic inflow boundary conditions
@
text
@d1 1
a1 1
      SUBROUTINE RHSBC4(X,RHS,NDIM,COMPRESSIBLE)
d6 1
a6 1
C     $Id: rhsbc4.F,v 1.12 2000/08/03 10:09:23 aldo Exp aldo $
d18 1
a18 2
      Vec RHS
      DOUBLE PRECISION X(*)
d29 1
a29 1
      Scalar RHS_V(1),X_V(1)
d33 1
a33 1
      INTEGER IPOIN,I,NI,IFAIL,I1,I2,I3,I4,I5,ROWBGN,ROWEND,NDIM,LDA
d42 2
a43 4
C    note that the indices for
C         SupersonicVariables and NoSlipVelocities are
C         given in global numbering
C         this is the reason ROWBGN is substracted
a47 1
      CALL VecGetOwnershipRange(RHS,ROWBGN,ROWEND,IFAIL)
a55 1
         CALL VecGetArray(RHS,RHS_V,RHS_I,IFAIL)
d57 2
a58 2
             IPOIN = IDX_V(IDX_I+I)+1-ROWBGN
             RHS_V(RHS_I+IPOIN) = ZERO
a60 1
         CALL VecRestoreArray(RHS,RHS_V,RHS_I,IFAIL)
a70 1
         CALL VecGetArray(RHS,RHS_V,RHS_I,IFAIL)
d72 2
a73 2
             IPOIN = IDX_V(IDX_I+I)+1-ROWBGN
             RHS_V(RHS_I+IPOIN) = ZERO
a75 1
         CALL VecRestoreArray(RHS,RHS_V,RHS_I,IFAIL)
a85 1
         CALL VecGetArray(RHS,RHS_V,RHS_I,IFAIL)
d88 2
a89 2
                 IPOIN = IDX_V(IDX_I+I)+1-ROWBGN
                 RHS_V(RHS_I+IPOIN) = ZERO
d101 1
a101 1
                 I2 = IDX_V(IDX_I+I)+1-rowbgn
d103 1
a103 1
                 RHS_V(RHS_I+I2) = POUTLET-PRESSC(NDIM,X(I1))
a106 1
          CALL VecRestoreArray(RHS,RHS_V,RHS_I,IFAIL)
a119 1
         CALL VecGetArray(RHS,RHS_V,RHS_I,IFAIL)
d130 1
a130 1
             I2 = IDX_V(IDX_I+I)+1
d139 1
a139 1
             RHS_V(RHS_I+I2) = ALPHA*U1-U2
a141 1
         CALL VecRestoreArray(RHS,RHS_V,RHS_I,IFAIL)
a157 1
         CALL VecGetArray(RHS,RHS_V,RHS_I,IFAIL)
d166 1
a166 1
             I1 = IDX_V(IDX_I+I)+1
d181 2
a182 3
c            RHS_V(RHS_I+I1) = ONE - PRESSC(NDIM,X(I1))/DENS**GAM
             RHS_V(RHS_I+I1) = ZERO
c            write(6,*)one-ptot,ptot
d186 2
a187 5
             RHS_V(RHS_I+I2) = (GOGM1 - X(I2)/X(I1))
c            RHS_V(RHS_I+I2) = 0.d0
c            write(6,*)RHS_V(RHS_I+I2),X(I2)/X(I1)
c            RHS_V(RHS_I+I4) = 0.d0
             RHS_V(RHS_I+I4) = (-X(I3)*FLOWDIR(2)+X(I4)*FLOWDIR(1))
a188 1
c            write(6,*)RHS_V(RHS_I+I3)
a191 1
         CALL VecRestoreArray(RHS,RHS_V,RHS_I,IFAIL)
@


1.12
log
@subsonic inlet boundary conditions
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.11 2000/06/23 16:50:00 aldo Exp aldo $
a21 1
C     must be the global representation of RHS 
d29 1
a29 2
C
      INTEGER IDX_V(1),IDX_X(1)
d203 2
a204 2
c            RHS_V(RHS_I+I3) = 0.d0
             RHS_V(RHS_I+I3) = (-X(I3)*FLOWDIR(2)+X(I4)*FLOWDIR(1))
@


1.11
log
@add isothermal and constant pressure boundary conditions
@
text
@d6 1
a6 1
C     $Id: rhsbc4.F,v 1.10 2000/06/20 15:52:44 aldo Exp aldo $
d34 1
a34 1
      PetscOffset RHS_I,IDX_I,IDX_X
d36 3
a38 2
      INTEGER IPOIN,I,NI,IFAIL,I1,I2,I3,I4,I5,ROWBGN,ROWEND,NDIM
      DOUBLE PRECISION ALPHA,R,RE,SUM,PRES0
d48 4
a51 1
C         this is the reaon ROWBGN is substracted
d54 5
a58 1
C
d70 6
a75 2
C
C
d87 6
a92 2
C
C
d97 22
a118 6
         DO 210 I = 1,NI
             IPOIN = IDX_V(IDX_I+I)+1-ROWBGN
             RHS_V(RHS_I+IPOIN) = ZERO
  210    CONTINUE
         CALL ISRestoreIndices(CnstPressure,IDX_V,IDX_I,IFAIL)
         CALL VecRestoreArray(RHS,RHS_V,RHS_I,IFAIL)
d121 6
a126 1
C     Fixed temperature wall boundary condition
a127 1
      IF(IADIA.EQ.0)GOTO 10
d147 1
d150 3
a152 3
             RE = GINV * X(I1)*X(I2)+HALF*GM1OG*SUM
             R = X(I1)*X(I1)
             RHS_V(RHS_I+I2) = ALPHA*R-RE
d158 13
a170 4
   10 CONTINUE
      CALL ISGetSize(CnstPressure,NI,IFAIL)
      IF(NI.NE.0.AND.COMPRESSIBLE)THEN
         CALL ISGetIndices(CnstPressure,IDX_V,IDX_I,IFAIL)
d174 1
a174 2
         PRES0 = PRESSC(NDIM,U_INFTY)
         write(6,*)'ref. pressure ',pres0
d176 1
a176 1
         DO 220 I = 1,NI
d178 2
a179 1
C N.B. X is the parameter vector 
d181 5
d187 25
a211 8
C I2  1-based address of the location where \sqrt(\rho) H is stored
C     (+1) because of the 0-based indexing in the index set
             I2 = IDX_V(IDX_I+I)+1
             I1 = I2-1
             RHS_V(RHS_I+I2) = PRES0-PRESSC(NDIM,X(I1))
C            write(6,*)PRES0,PRESSC(NDIM,X(I1))
  220    CONTINUE
         CALL ISRestoreIndices(CnstPressure,IDX_V,IDX_I,IFAIL)
a214 3
C
C
C
d216 1
a216 1
      END 
@


1.10
log
@add constant pressure bounday conditions
@
text
@d1 1
a1 1
      SUBROUTINE RHSBC4(RHS)
d6 1
a6 1
C     $Id: rhsbc4.F,v 1.9 2000/06/09 16:28:01 aldo Exp aldo $
d16 1
d19 2
d25 2
d31 2
a32 2
      INTEGER IDX_V(1)
      Scalar RHS_V(1)
d34 1
a34 1
      PetscOffset RHS_I,IDX_I
d36 4
a39 1
      INTEGER IPOIN,I,NI,IFAIL,ROWBGN,ROWEND
d88 61
@


1.9
log
@now including index sets in common iset.com
@
text
@a0 2
C
C
d6 1
a6 1
C     $Id: rhsbc4.F,v 1.8 1999/11/05 20:39:30 aldo Exp aldo $
d65 13
@


1.8
log
@solved bug by using IS instead of integer
@
text
@d8 1
a8 1
C     $Id$
d24 3
a26 5
      IS SupersonicNodes,SupersonicVariables,
     +NoSlipNodes,NoSlipVelocities

      COMMON/COMISET/SupersonicNodes,SupersonicVariables,
     +NoSlipNodes,NoSlipVelocities
@


1.7
log
@Add automatic identification flag
@
text
@d15 1
a15 1
#include "include/finclude/viewer.h"
a22 2
      PetscOffset RHS_I,IDX_I
C
d24 5
a28 1
      INCLUDE 'iset.com'
d31 1
a31 1
      DOUBLE PRECISION RHS_V(1)
d33 1
@


1.6
log
@removed unused arguments in the calling sequence
@
text
@d8 3
@


1.5
log
@nodes are addressed using global numbering
@
text
@d3 1
a3 2
      SUBROUTINE RHSBC4( NPOIN, NDIM, NOFVAR, RHS, 
     +                   IX, Y, LEN, NODCODE) 
d6 1
a6 1
C     "EXPLICIT" residual ..
d18 4
a23 1
      INCLUDE 'flags.com'
d25 1
a25 2
      INTEGER NPOIN,NDIM,NOFVAR,LEN
      INTEGER RHS_I,IDX_I,IDX_V(1)
a27 1
      INTEGER NODCODE(NPOIN),IX(*)
d29 1
a29 2
      INTEGER IPOIN,I,IOFF,NI,IDIM,IBGN,IFAIL,ROWBGN,ROWEND
      DOUBLE PRECISION Y(*)
d34 1
a34 1
C    note that then indices for
@


1.4
log
@parallel version using pre-processor directives
@
text
@d23 1
a23 1
      INTEGER NPOIN,NDIM,NOFVAR
d29 1
a29 1
      INTEGER IPOIN,I,IOFF,NI,IDIM,IBGN,IFAIL,LEN
d35 7
a42 1
C     write(6,*)'ISGetSize SupersonicVariables ',ifail
d47 1
a47 1
             IPOIN = IDX_V(IDX_I+I)+1
a55 1
C     write(6,*)'ISGetSize NoSlipVelocities ',ifail
d60 1
a60 1
             IPOIN = IDX_V(IDX_I+I)+1
@


1.3
log
@Include files path for PETSC fortran header files
has been changed to comply to rev. 2.0.22 of PETSc
@
text
@d20 1
a20 1
      INCLUDE 'visco.com'
d24 2
d29 1
a29 1
      INTEGER IPOIN,ICODE,IOFF,NI,IDIM,IBGN,IFAIL,LEN
a31 15
C     CALL ViewerFileOpenASCII(MPI_COMM_SELF,"vec.before",
C    +                         VIEWER_STDOUT_SELF,IFAIL) 
C     CALL ViewerSetFormat(VIEWER_STDOUT_SELF,
C    +                     VIEWER_FORMAT_ASCII_DEFAULT,"pippo",IFAIL)
C
C     CALL VecView(RHS,VIEWER_STDOUT_SELF,IFAIL)
C
C     zero indexed indexes
C
      IF( IABS(KAN) .EQ. 2 )THEN
         IOFF = 0
      ELSE
         IOFF = 1
      ENDIF
C
d35 12
a46 5
      NI=0 
C
      DO 1000 IPOIN = 1 , NPOIN
C
      ICODE = NODCODE( IPOIN )
a47 17
C     viscous wall ..
C
      IF( ICODE .EQ. 1000 )THEN
C
C        No slip condition ..
C
          IBGN = (IPOIN-1)*NOFVAR+IOFF
          DO 900 IDIM = 1, NDIM
              NI=NI+1
              IX(NI) = IBGN + IDIM
  900 CONTINUE
      ELSEIF( ICODE .LT. 0 )THEN
          IBGN = (IPOIN-1)*NOFVAR-1
          DO 800 IDIM = 1, NOFVAR
              NI=NI+1
              IX(NI) = IBGN + IDIM
  800 CONTINUE
d49 11
a61 22
      IF( NI .GT. LEN )STOP 'LEN too short'
C
 1000 CONTINUE
C
      CALL DINIT(NI,ZERO,Y,1)
      CALL VecSetValues(RHS,NI,IX,Y,INSERT_VALUES,IFAIL)
C
C
      CALL VecAssemblyBegin(RHS,IFAIL)
      CALL VecAssemblyEnd(RHS,IFAIL)
C
C     CALL ViewerFileOpenASCII(MPI_COMM_SELF,"vec.output",
C    +                         VIEWER_STDOUT_SELF,IFAIL) 
C     CALL ViewerSetFormat(VIEWER_STDOUT_SELF,
C    +                     VIEWER_FORMAT_ASCII_DEFAULT,"pippo",IFAIL)
C
C     CALL VecView(RHS,VIEWER_STDOUT_SELF,IFAIL)
C
C     CALL VecNorm(RHS,NORM_2,S,IFAIL)
C     write(6,*)s 
C
C
a62 5
C     write(6,*)ipoin,ni,(y(i),i=1,ni),(ix(i),i=1,ni)
C     write(6,*)'VecSetValues has returned ',ifail
C     write(6,*)'VecAssemblyBegin has returned ',ifail
C     write(6,*)'VecAssemblyEnd has returned ',ifail
C     write(6,*)'Leaving SETBC1'
a63 2
C
C
@


1.2
log
@Unused variables removed
@
text
@d11 3
a13 3
#include "include/FINCLUDE/petsc.h"
#include "include/FINCLUDE/vec.h"
#include "include/FINCLUDE/viewer.h"
@


1.1
log
@Initial revision
@
text
@d27 1
a27 1
      INTEGER IPOIN,IVAR,ICODE,IOFF,NI,IDIM,IBGN,i,IFAIL,LEN
@
