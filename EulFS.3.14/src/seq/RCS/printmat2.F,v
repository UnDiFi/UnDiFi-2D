head	1.9;
access
	tesistim;
symbols
	release3_14_0:1.9
	release3_13_0:1.9
	release3_12_0:1.9
	release3_11_0:1.9
	release3_10_0:1.9
	release3_8_0:1.9
	release3_7_1:1.8
	release3_7_0:1.6
	release3_4_5:1.5
	release3_4_4:1.5
	release3_4_3:1.5
	release3_4_2:1.5
	release3_4_1:1.5
	release3_4_0:1.5
	release3_3_5:1.4
	release3_3_4:1.4
	release3_3_3:1.4
	release3_3_2:1.4
	release3_3_1:1.4
	release3_3_0:1.4;
locks; strict;
comment	@c @;


1.9
date	2020.04.23.09.37.34;	author abonfi;	state Exp;
branches;
next	1.8;

1.8
date	2020.03.28.09.42.37;	author abonfi;	state Exp;
branches;
next	1.7;

1.7
date	2020.03.25.15.27.16;	author abonfi;	state Exp;
branches;
next	1.6;

1.6
date	2016.11.10.11.25.13;	author abonfi;	state Exp;
branches;
next	1.5;

1.5
date	2013.05.15.10.43.03;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2011.12.14.09.53.31;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	2011.09.16.07.19.48;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	2011.03.30.09.02.40;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2009.06.11.13.10.58;	author abonfi;	state Exp;
branches;
next	;


desc
@print matrix to file
@


1.9
log
@changes required by petsc release 3.8
@
text
@      SUBROUTINE PrintMatCSR(A,RHS,X,ia,ja,mat_array,nr,nz_a,ordsqr,
     &ITER,JOB)
C
C     $Id: printmat2.F,v 1.8 2020/03/28 09:42:37 abonfi Exp abonfi $
C
CCCC#include "petsc/finclude/petscvec.h"
CCCC#include "petsc/finclude/petscmat.h"
#include "petsc/finclude/petscksp.h"
#include "petsc/finclude/petscpc.h"
CCCC#include "petsc/finclude/petscis.h"
#include "petsc/finclude/petscviewer.h"
              use petscpc
              use petscksp
C
      IMPLICIT NONE
#include "io.com"
C
      Mat A
      Vec RHS,X
      INTEGER ITER,JOB
      INTEGER nr,nz_a,nnz,ix
      integer ia(*),ja(*)
C     local vars
      double  precision info(MAT_INFO_SIZE)
!     double  precision dnrm2
!     double  precision smax,sl2
      integer idamax
      INTEGER jbgn,jend,ncols,i,j,k,iout,shift,iwrite,ordsqr
      PetscScalar mat_array(1)
      PetscOffset i_mat,i_ia,i_ja
      PetscErrorCode ierr
      PetscBool done,blockcompressed
      MatType type
      PARAMETER(blockcompressed=PETSC_TRUE)
!     PARAMETER(blockcompressed=PETSC_FALSE,ifmt=4)
C
C
C     .. Parameters ..
C     ..
C     .. Scalar Arguments ..
C     ..
C     .. Arrays in Common ..
C     ..
C     .. Local Scalars ..
      INTEGER IFAIL,MY_PE
C     ..
C     .. Local Arrays ..
      INTEGER*8 ij
      CHARACTER* 6 matfile,rhsfile,solfile
      PetscScalar x_array(1)
      PetscOffset i_x
      PetscInt n
!     PetscErrorCode IFAIL
C     ..
C     .. External Functions ..
C     ..
C     .. External Subroutines ..
C     ..
C
C     .. Intrinsic Functions ..
C     ..
C     .. Common blocks ..
      COMMON /MPICOM/MY_PE
C     ..
C     .. Equivalences ..
C     ..
C     .. Data statements ..
      DATA matfile,rhsfile,solfile/"matXXX","rhsXXX","solXXX"/
C     ..
C     Executable statements 
C
      IF(JOB.EQ.0)THEN
         call MatGetInfo(A,MAT_LOCAL,info,IFAIL)
         IF(IFAIL.NE.0)CALL EXIT(IFAIL)
         nz_a = info(MAT_INFO_NZ_USED)
         ordsqr = info(MAT_INFO_BLOCK_SIZE)
!        CALL VecGetLocalSize(rhs,n,IFAIL)
!        maxcols = max(maxcols,n)
         call MatGetType(A,type,IFAIL)
         IF(IFAIL.NE.0)CALL EXIT(IFAIL)
         write(6,*)'PE # ',MY_PE,' nnz = ',nz_a,' nr = ',nr,
     &' bs = ',ordsqr,' type = ',type
         RETURN
      ENDIF
C
C     IF( ITER. NE. 3 )RETURN
C
      WRITE(matfile(4:6),FMT="(I3.3)")MY_PE
!     WRITE(rhsfile(4:6),FMT="(I3.3)")0
!     WRITE(solfile(4:6),FMT="(I3.3)")0
      done = PETSC_FALSE
c     use Fortran based indexing
      shift = 1
      write(6,*)'blockcompressed = ',blockcompressed,
     &' TRUE = ',PETSC_TRUE
         CALL MatGetRowIJ(A,shift,PETSC_FALSE,blockcompressed,nr,
     &   ia,i_ia,ja,i_ja,done,IFAIL)
      IF((done.NEQV.PETSC_TRUE) .OR. (IFAIL.NE.0) )then
         write(6,*)' MatGetRowIJ has ret done = ',done,PETSC_FALSE
         write(6,*)' MatGetRowIJ has ret IFAIL = ',IFAIL
         STOP
      endif
!
      nnz = ia(i_ia+nr+1)-ia(i_ia+1)
      write(NOUT,*)' Nof rows = ',nr
      write(NOUT,*)' Nof non-zero block entries is = ',nnz
!     write(NOUT,*)(ia(i+i_ia),i=1,nr+1)
!     do i = 1,nr
!        jbgn = ia(i_ia+i)
!        jend = ia(i_ia+i+1)-1
!     write(NOUT,*)'row = ',i,(ja(j+i_ja),j=jbgn,jend)
!     enddo
c
!     call dump (1,nr,.FALSE.,mat_array(1),ja(i_ja+1),
!    &ia(i_ia+1),iout)
         call MatSeqAIJGetArray(A,mat_array,i_mat,IFAIL)
         IF(IFAIL.NE.0)CALL EXIT(IFAIL)
         nz_a = nz_a/ordsqr
         if( nnz .NE. nz_a )then
             write(6,*)'There is a mismatch btw nnz,nz_a ',
     &       nnz,nz_a,ordsqr
             STOP
         else
             write(6,*)' nnz,nz_a match ',nnz,nz_a,ordsqr
         endif
         iwrite = 99
cnag     call x04abf(1,iwrite) ! removed in release 3.7.1 when the NAG library has been removed
         do i = 1,nr
         call printrow(mat_array(i_mat+1),ia(i_ia+1),ja(i_ja+1),i,
     &ordsqr,iwrite)
         enddo
         CALL EXIT(0)
         return
!        ix = idamax(nnz,mat_array(i_mat+1),1)
!        smax = mat_array(i_mat+ix)
!        sl2 = dnrm2(nnz,mat_array(i_mat+1),1)
!        write(NOUT,*)' Inf/L2 norms of ILU on PE # ',MY_PE,
!    &   'at Newton step ',ITER,' are : ',smax,sl2
!        call dump (1,nr,.TRUE.,mat_array(i_mat+1),ja(i_ja+1),
!    &ia(i_ia+1),iout)
         iout = 10+MY_PE
         open(iout,FILE=matfile)
!        call skit (nr,mat_array(i_mat+1),ja(i_ja+1),
!    &ia(i_ia+1),ifmt,iout,IFAIL)
         close(iout)
         call MatSeqAIJRestoreArray(A,mat_array,i_mat,ierr)
!     ENDIF
      CALL MatRestoreRowIJ(A,shift,PETSC_FALSE,blockcompressed,nr,
     &   ia,i_ia,ja,i_ja,done,IFAIL)
         IF(IFAIL.NE.0)CALL EXIT(IFAIL)
C
c
      RETURN
      END
      subroutine printrow(a,ia,ja,ir,ordsqr,iwrite)
      implicit none
      include 'paramt.h'
      double precision a(*) 
      integer ia(*),ja(*)
      integer ir,iwrite
      integer ordsqr
      integer jbgn,jend,iaddr,IFAIL,j,jcol,n,i
      character*25 label
      double precision deta
      double precision work(MAX_NOFVAR_SQR)
      integer ipiv(MAXNOFVAR)
      jbgn = ia(ir) 
      jend = ia(ir+1) -1
      n = int(sqrt(real(ordsqr)))
      write(iwrite,*)'*********************************************'
      write(iwrite,*)' block row i = ',ir
      write(iwrite,*)'*********************************************'
      do j = jbgn,jend
         jcol = ja(j)
         iaddr = (j-1)*ordsqr +1 
         write(label,FMT=100)ir,jcol
         CALL R8Mat_Print('General',' ',n,n,a(iaddr),
     +   n,label,IFAIL)
         if(ir.EQ.jcol)THEN
            deta = 1.d0
            CALL DCOPY(ordsqr,a(iaddr),1,work,1)
            CALL DGETRF( n, N, work, n, IPIV, IFAIL )
            IF(IFAIL.NE.0)THEN
                WRITE(iwrite,*)'DGETRF has ret IFAIL = ',IFAIL
                CALL EXIT(IFAIL)
            ELSE
                do i = 1,ordsqr,n+1
                   deta = deta * work(i) 
                enddo
            ENDIF
         CALL R8Mat_Print('General',' ',n,n,work,
     +   n,'LU factor',IFAIL)
            WRITE(iwrite,*)'det(A) = ',deta
         endif
      enddo
  100 FORMAT('row = ',I6,' col = ',I6)
      return
      end
@


1.8
log
@renamed a call
@
text
@d4 1
a4 3
      IMPLICIT NONE
C
C     $Id: printmat2.F,v 1.7 2020/03/25 15:27:16 abonfi Exp abonfi $
d6 2
a7 3
#include "petsc/finclude/petscsys.h"
#include "petsc/finclude/petscvec.h"
#include "petsc/finclude/petscmat.h"
d10 1
a10 1
#include "petsc/finclude/petscis.h"
d12 4
@


1.7
log
@removed a call to the NAG library (X04ABF)
@
text
@d6 1
a6 1
C     $Id: printmat2.F,v 1.6 2016/11/10 11:25:13 abonfi Exp abonfi $
d176 1
a176 1
         CALL X04CAF('General',' ',n,n,a(iaddr),
d190 1
a190 1
         CALL X04CAF('General',' ',n,n,work,
@


1.6
log
@changed the location of petsc's header files
when migrating to version 3.6
@
text
@d6 1
a6 1
C     $Id: printmat2.F,v 1.5 2013/05/15 10:43:03 abonfi Exp abonfi $
d126 1
a126 1
         call x04abf(1,iwrite)
@


1.5
log
@MatGetArray()/MatRestoreArray() have been removed
in petsc-3.4.0
@
text
@d6 1
a6 1
C     $Id: printmat2.F,v 1.4 2011/12/14 09:53:31 abonfi Exp abonfi $
d8 7
a14 7
#include "finclude/petscsys.h"
#include "finclude/petscvec.h"
#include "finclude/petscmat.h"
#include "finclude/petscksp.h"
#include "finclude/petscpc.h"
#include "finclude/petscis.h"
#include "finclude/petscviewer.h"
@


1.4
log
@changes required due to the upgrade to petsc-3.2
@
text
@d6 1
a6 1
C     $Id: printmat2.F,v 1.3 2011/09/16 07:19:48 abonfi Exp abonfi $
d115 1
a115 1
         call MatGetArray(A,mat_array,i_mat,IFAIL)
d145 1
a145 1
         call MatRestoreArray(A,mat_array,i_mat,ierr)
@


1.3
log
@Changed PETSc header file to comply with version 3.1
@
text
@d6 1
a6 1
C     $Id: printmat2.F,v 1.2 2011/03/30 09:02:40 abonfi Exp abonfi $
d31 1
a31 1
      PetscTruth done
a32 1
      PetscTruth blockcompressed
@


1.2
log
@now dumps the jacobian matrix row by row
@
text
@d6 1
a6 1
C     $Id: printmat2.F,v 1.1 2009/06/11 13:10:58 abonfi Exp abonfi $
d8 1
a8 1
#include "finclude/petsc.h"
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
      SUBROUTINE PrintMatCSR(A,RHS,X,ia,ja,mat_array,nr,nz_a,ITER,JOB)
d6 1
a6 1
C     $Id: printmat.F,v 1.3 2006/11/10 08:31:31 abonfi Exp abonfi $
d24 2
a25 2
      double  precision dnrm2
      double  precision smax,sl2
d27 1
a27 1
      INTEGER jbgn,jend,ncols,i,j,k,iout,shift,bs,ifmt
d34 2
a35 2
!     PARAMETER(blockcompressed=PETSC_TRUE)
      PARAMETER(blockcompressed=PETSC_FALSE,ifmt=4)
d74 1
d76 1
a76 2
         nr = info(MAT_INFO_ROWS_LOCAL)
         bs = info(MAT_INFO_BLOCK_SIZE)
d80 3
a82 1
         write(6,*)'PE # ',MY_PE,nz_a,nr,bs,type
d98 1
a98 1
      IF(done.NE.PETSC_TRUE .OR. IFAIL.NE.0 )then
d104 3
a106 2
!     write(NOUT,*)' No rows = ',nr
!     write(NOUT,*)' No non-zero entries is = ',ia(i_ia+nr+1)-ia(i_ia+1)
d114 2
a115 4
      IF(blockcompressed.EQ.PETSC_TRUE)then
         call dump (1,nr,.FALSE.,mat_array(1),ja(i_ja+1),
     &ia(i_ia+1),iout)
      ELSE 
d117 2
a118 1
         nnz = ia(i_ia+nr+1)-ia(i_ia+1)
d121 1
a121 1
     &       nnz,nz_a
d123 2
d126 13
a138 5
         ix = idamax(nnz,mat_array(i_mat+1),1)
         smax = mat_array(i_mat+ix)
         sl2 = dnrm2(nnz,mat_array(i_mat+1),1)
         write(NOUT,*)' Inf/L2 norms of ILU on PE # ',MY_PE,
     &   'at Newton step ',ITER,' are : ',smax,sl2
d147 1
a147 1
      ENDIF
d150 1
d155 44
@
