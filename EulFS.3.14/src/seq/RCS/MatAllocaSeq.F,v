head	1.19;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.19
	release3_13_0:1.19
	release3_12_0:1.19
	release3_11_0:1.19
	release3_10_0:1.19
	release3_8_0:1.19
	release3_7_1:1.18
	release3_7_0:1.18
	release3_4_5:1.15
	release3_4_4:1.15
	release3_4_3:1.15
	release3_4_2:1.15
	release3_4_1:1.15
	release3_4_0:1.15
	release3_3_5:1.15
	release3_3_4:1.14
	release3_3_3:1.12
	release3_3_2:1.12
	release3_3_1:1.12
	release3_3_0:1.11;
locks; strict;


1.19
date	2020.04.23.09.37.34;	author abonfi;	state Exp;
branches;
next	1.18;

1.18
date	2020.02.05.15.00.37;	author abonfi;	state Exp;
branches;
next	1.17;

1.17
date	2018.01.22.14.07.45;	author abonfi;	state Exp;
branches;
next	1.16;

1.16
date	2016.11.10.11.25.13;	author abonfi;	state Exp;
branches;
next	1.15;

1.15
date	2013.05.03.10.53.58;	author abonfi;	state Exp;
branches;
next	1.14;

1.14
date	2013.04.27.06.32.11;	author abonfi;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.15.15.31.02;	author abonfi;	state Exp;
branches;
next	1.12;

1.12
date	2013.01.26.11.30.51;	author abonfi;	state Exp;
branches;
next	1.11;

1.11
date	2011.09.16.07.19.48;	author abonfi;	state Exp;
branches;
next	1.10;

1.10
date	2009.06.11.13.10.01;	author abonfi;	state Exp;
branches;
next	1.9;

1.9
date	2000.11.15.09.15.09;	author aldo;	state Exp;
branches;
next	1.8;

1.8
date	2000.11.08.11.51.39;	author aldo;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.26.15.12.19;	author aldo;	state Exp;
branches;
next	1.6;

1.6
date	2000.10.19.16.10.34;	author aldo;	state Exp;
branches;
next	1.5;

1.5
date	2000.09.29.09.18.36;	author aldo;	state Exp;
branches;
next	1.4;

1.4
date	2000.08.18.14.08.18;	author aldo;	state Exp;
branches;
next	1.3;

1.3
date	2000.06.23.16.41.04;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	99.09.15.14.43.45;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	98.12.02.09.19.48;	author aldo;	state Exp;
branches;
next	;


desc
@Memory allocation for the PETSc matrices, sequential version
@


1.19
log
@changes required by petsc release 3.8
@
text
@      SUBROUTINE MatAllocaSeq(A,NDIM,NOFVERT,NBLK,NELEM,NR,NGHOST,
     +                        OPT,NOPT,TITLE)
C
C     $Id: MatAllocaSeq.F,v 1.18 2020/02/05 15:00:37 abonfi Exp abonfi $
C
CCCCC#define DEBUG
CCCCC#define CSR_PRINT
C
C
C     This routine creates the Compressed Sparse Row structure
C        of the stiffness matrix, i.e. the arrays:
C        ia(1:NR+1) and ja(1:NNZ)
C
C     $Id: MatAllocaSeq.F,v 1.18 2020/02/05 15:00:37 abonfi Exp abonfi $
C
C
#include "petsc/finclude/petscmat.h"
CCCC#include "petsc/finclude/petscvec.h"
CCCC#include "petsc/finclude/petscviewer.h"
#include "petsc/finclude/petscis.h"
              use petscis
              use petscmat
C
      IMPLICIT NONE
C
      INCLUDE 'constants.h'
      INCLUDE 'implicit.h'
      INCLUDE 'verbose.com'
      INCLUDE 'flags.com'
      INCLUDE 'io.com'
      INCLUDE 'nloc.com'
C
C     .. Scalar Arguments ..
      INTEGER NBLK,NDIM,NELEM,NOFVERT,NR,NGHOST,NOPT
      CHARACTER*(*) TITLE
C
C     .. Petsc Arrays ..
C     ..
      Mat A
      MatOption OPT(NOPT)
C
C     Input:
C     -----
C     NR          numerb of (block) rows in the matrix
C     NBLK        block dimension of the matrix
C     NGHOST      number of ghost points on this processor
C
C     ..
C     .. Arrays in Common ..
      DOUBLE PRECISION DSTAK(1)
C     ..
C     .. Local Scalars ..
      INTEGER IFAIL,LDEGREE,NNZR,N,IOPT,IBGN,IEND,I
      DOUBLE PRECISION HELP
#ifdef DEBUG
      INTEGER LIWK,LJWK,LIA,LIAO,LJA,LJAO,JOB,IOUT,IPOS
#endif
      LOGICAL VERBOSE
C     ..
C     .. Local Arrays ..
      INTEGER ISTAK(1)
      DOUBLE PRECISION INFO(MAT_INFO_SIZE)
#ifdef DEBUG
      DOUBLE PRECISION AMAT(1),BMAT(1)
#endif
C     ..
C     .. External Functions ..
      INTEGER ISTKGT,ISTKST
      EXTERNAL ISTKGT,ISTKST
C     ..
C     .. External Subroutines ..
      EXTERNAL DINIT,IINIT,ISTKRL
C     ..
C     .. Common blocks ..
      COMMON /CSTAK/DSTAK
C     ..
C     .. Equivalences ..
      EQUIVALENCE (ISTAK(1),DSTAK(1))
C     ..
C
C     ------ Allocate space for the stiffness matrix -------
C
      VERBOSE = (IVERBOSE.GT.0)
      VERBOSE = .TRUE.
C
      LDEGREE = ISTKGT(NR+1,2)
C
C     MatGetSizeSeq finds the number of non zero entries (NNZR)
C     of the stiffness matrix and returns in DEGREE(i) the number
C     of non zero entries in the i-th row of the stiffness matrix ..
C
      CALL MatGetSizeSeq(ISTAK(LCELNOD),ISTAK(LDEGREE),ISTAK(LCELCEL),
     +              ISTAK(LNODCOD),NDIM,NOFVERT,NELEM,NR,NNZR,NOUT,
     +              VERBOSE,IFAIL)
caldo
!     IFAIL = 3
caldo
C
C     If MatGetSizeSeq fails, we use tet_mesh_order4_adj_count
C
      IF(IFAIL.NE.0)THEN
      WRITE(NOUT,FMT=300)IFAIL
         IF( NDIM .EQ. 3)THEN
            WRITE(NOUT,FMT=302)"tet_mesh_order4_adj_count"
            CALL tet_mesh_order4_adj_count ( NR, NELEM, ISTAK(LCELNOD),
     &        NNZR, ISTAK(LDEGREE) )
         ELSEIF( NDIM .EQ. 2 )THEN
            GOTO 44
#ifdef CSR_PRINT
            OPEN(87,FILE="csr_1.log")
            do I = 1,NR
               WRITE(87,FMT=*)I,ISTAK(LDEGREE+I-1)
            ENDDO
            CLOSE(87)
#endif
caldo
caldo looks like triangulation_order3_adj_count does NOT work properly
caldo tested on 26.01.2019
caldo
            CALL EXIT(IFAIL)
caldo
caldo triangulation_order3_adj_count has been modified in such a way that
caldo icelcel is set to a negative value whenever icelcel > NELEM
caldo
            WRITE(NOUT,FMT=302)"triangulation_order3_adj_count"
            CALL triangulation_order3_adj_count ( NR,
     &      NELEM, ISTAK(LCELNOD), ISTAK(LCELCEL), NNZR,
     &      ISTAK(LDEGREE) )
         ENDIF ! test on NDIM
C
#ifdef CSR_PRINT
         OPEN(87,FILE="csr_2.log")
#endif
         DO I = LDEGREE,LDEGREE+NR-1
            IBGN = ISTAK(I)
            IEND = ISTAK(I+1)
            N = IEND-IBGN+1            
            ISTAK(I) = N
         ENDDO
         IBGN = 1000000
         IEND = 0
         HELP = ZERO
         DO I = LDEGREE,LDEGREE+NR-1
            N = ISTAK(I)
#ifdef CSR_PRINT
            WRITE(87,FMT=*)I-LDEGREE+1,N
#endif
            HELP = HELP + REAL(N)/REAL(NR)
            IBGN = MIN(IBGN,N)
            IEND = MAX(IEND,N)
         ENDDO
#ifdef CSR_PRINT
         CLOSE(87)
#endif
         WRITE(NOUT,FMT=320)IBGN,IEND,HELP,NNZR
      ENDIF ! test on IFAIL
C
#ifdef DEBUG
C
C     BAIJ matrix
C
      lia = istkgt(nr+1,2)
      lja = istkgt(nnzr,2)
      liwk = istkgt(nr+1,2)
      ljwk = istkgt(nnzr,2)
c
c     copy degree into ia, since the routine csrfmt needs
c     needs the info stored in degree
c
      call icopy(nr+1,istak(ldegree),1,istak(lia),1)
c
      call CSRFMT(NR,NELEM,NOFVERT,istak(lcelnod),
     >istak(lia),istak(lja),istak(liwk),istak(ljwk))
c
c     release liwk ljwk
c
      call istkrl(2)
c
c     AIJ matrix
c
      liao = istkgt(nblk*(nr+1),2)
      ljao = istkgt((nblk**2)*nnzr,2)
c
c     values are NOT copied
c
      job=0
c
      IF( NBLK .EQ. 1 )THEN
         ipos = 1
         call copmat (nr,amat,ISTAK(LJA),ISTAK(LIA),bmat,
     &                ISTAK(Ljao),ISTAK(Liao),ipos,job)
      ELSE 
c
c     convert BAIJ into AIJ (not in place)
c
c
         call bsrcsr (job, nr, nblk, nblk, amat, istak(lja), istak(lia),
     >bmat, istak(ljao), istak(liao) )
      ENDIF
c

      iout=100
      write(6,*)'Writing sparsity pattern to matAIJ'
      open(unit=iout,file='matAIJ',status='unknown')
c
c     dump the sparsity pattern of the AIJ matrix
c
      call dump (1,nr*nblk,.false.,amat,istak(ljao),istak(liao),iout)
      write(6,*)'....done'
      close(iout)
C
      call istkrl(4)
!     stop
C
#endif
C
   44 CONTINUE
      N=NR*NBLK
C
      IF( NBLK .EQ. 1 )THEN
          CALL MatCreateSeqAIJ(PETSC_COMM_SELF,NR,NR,NNZR/NR,
     +                         ISTAK(LDEGREE),A,IFAIL)
      ELSE
          CALL MatCreateSeqBAIJ(PETSC_COMM_SELF,NBLK,N,N,NNZR/NR,
     +                          ISTAK(LDEGREE),A,IFAIL)
      ENDIF
C
C     Blocks to be inserted in A will be COLUMN ORIENTED
C
      WRITE(NOUT,348)
      WRITE(NOUT,349)0,MAT_ROW_ORIENTED
      CALL MatSetOption(A,MAT_ROW_ORIENTED,PETSC_FALSE,IFAIL) 
      DO 12 IOPT = 1, NOPT
          WRITE(NOUT,349)IOPT,OPT(IOPT)
          CALL MatSetOption(A,OPT(IOPT),PETSC_TRUE,IFAIL) 
   12 CONTINUE
      CALL MatZeroEntries(A,IFAIL)
C
C     free DEGREE
C
      CALL ISTKRL(1)
C
      CALL MatGetInfo(A,MAT_LOCAL,INFO,IFAIL)
      WRITE(NOUT,346)TITLE
C
      WRITE(NOUT,347)N,N,
     +            INT(INFO(MAT_INFO_BLOCK_SIZE)),
     +            INT(INFO(MAT_INFO_NZ_ALLOCATED)),
     +            INFO(MAT_INFO_MEMORY)
C
      RETURN
C
  300 FORMAT(/,/,5X,'SUBR. MatGetSizeSeq has RETURNED IFAIL = ',I6)
  302 FORMAT(/,/,5X,'Calling subr. ',A,/,/)
! 305 FORMAT(/,/,5X,'SUBR. MatGetSizeSeq has RETURNED IFAIL = ',I6,/,
!    &15X,'using triangulation_order3_adj_count',/,/)
  320 FORMAT (/,/,'MatGetSizeSeq; STIFFNESS MATRIX',/,' ',15 ('='),/,
     +       10X,'MIN/MAX/AVG VERTEX DEGREE : ',2 (I2,2X),F4.1,/,10X,
     +       'NNZR = ',I12,' NONZERO BLOCK ENTRIES',/)
  346 FORMAT(10X,5("*"),A)
  347 FORMAT(10X,'Number of rows and columns    ',2(I8,1X),/,
     +       10X,'Block size                    ',I2,/,
     +       10X,'Number of allocated  nonzeros ',I14,/,
     +       10X,'Memory allocated              ',F16.0)
  348 FORMAT(10X,'Setting matrix options :',/)
  349 FORMAT(10X,'Matrix option # ',I2,' is ',I2)
C
      END  
@


1.18
log
@looks like triangulation_order3_adj_count does NOT work properly
@
text
@d4 1
a4 1
C     $Id: MatAllocaSeq.F,v 1.17 2018/01/22 14:07:45 abonfi Exp abonfi $
a9 2
      IMPLICIT NONE
C
d14 1
a14 1
C     $Id: MatAllocaSeq.F,v 1.17 2018/01/22 14:07:45 abonfi Exp abonfi $
a16 1
#include "petsc/finclude/petscsys.h"
d18 2
a19 2
#include "petsc/finclude/petscvec.h"
#include "petsc/finclude/petscviewer.h"
d21 4
@


1.17
log
@changed FORMAT to fit large numbers
@
text
@d4 1
a4 1
C     $Id: MatAllocaSeq.F,v 1.16 2016/11/10 11:25:13 abonfi Exp abonfi $
d7 1
d16 1
a16 1
C     $Id: MatAllocaSeq.F,v 1.16 2016/11/10 11:25:13 abonfi Exp abonfi $
d94 3
d101 1
d103 1
a103 1
            WRITE(NOUT,FMT=300)IFAIL
d107 12
a118 1
            WRITE(NOUT,FMT=305)IFAIL
a119 1
caldo    this is untested
d121 4
a124 2
caldo    CALL triangulation_order3_neighbor_triangles (
caldo&  triangle_num, triangle_node, triangle_neighbor )
d129 4
d144 3
d151 3
a153 1
         WRITE(NOUT,FMT=*)IBGN,IEND,HELP,NNZR
d216 1
d252 6
a257 6
  300 FORMAT(/,/,5X,'SUBR. MatGetSizeSeq has RETURNED IFAIL = ',I4,/,
     &15X,'using tet_mesh_order4_adj_count',/,/)
  305 FORMAT(/,/,5X,'SUBR. MatGetSizeSeq has RETURNED IFAIL = ',I4,/,
     &15X,'using triangulation_order3_adj_count',/,/)
  320 FORMAT (/,/,' STIFFNESS MATRIX',/,' ',15 ('='),/,10X,
     +       'MIN/MAX/AVG VERTEX DEGREE : ',2 (I2,2X),F4.1,/,10X,
@


1.16
log
@changed the location of petsc's header files
when migrating to version 3.6
@
text
@d4 1
a4 1
C     $Id: MatAllocaSeq.F,v 1.15 2013/05/03 10:53:58 abonfi Exp abonfi $
d15 1
a15 1
C     $Id: MatAllocaSeq.F,v 1.15 2013/05/03 10:53:58 abonfi Exp abonfi $
d231 1
a231 1
     +       'NNZR = ',I10,' NONZERO BLOCK ENTRIES',/)
d233 1
a233 1
  347 FORMAT(10X,'Number of rows and columns    ',2(I6,1X),/,
d235 1
a235 1
     +       10X,'Number of allocated  nonzeros ',I12,/,
@


1.15
log
@a few more debugging options
@
text
@d4 1
a4 1
C     $Id: MatAllocaSeq.F,v 1.14 2013/04/27 06:32:11 abonfi Exp abonfi $
d15 1
a15 1
C     $Id: MatAllocaSeq.F,v 1.14 2013/04/27 06:32:11 abonfi Exp abonfi $
d18 5
a22 5
#include "finclude/petscsys.h"
#include "finclude/petscmat.h"
#include "finclude/petscvec.h"
#include "finclude/petscviewer.h"
#include "finclude/petscis.h"
@


1.14
log
@moved a badly place write statement
@
text
@d4 1
a4 1
C     $Id: MatAllocaSeq.F,v 1.13 2013/03/15 15:31:02 abonfi Exp abonfi $
d6 1
a6 1
C#define DEBUG
d15 1
a15 1
C     $Id: MatAllocaSeq.F,v 1.13 2013/03/15 15:31:02 abonfi Exp abonfi $
d54 1
a54 1
      INTEGER LIWK,LJWK,LIA,LIAO,LJA,LJAO,JOB,IOUT
d97 3
a99 2
         WRITE(NOUT,FMT=300)IFAIL
         CALL tet_mesh_order4_adj_count ( NR, NELEM, ISTAK(LCELNOD),
d101 11
d129 1
a129 1
      ENDIF
d157 10
a168 1
      job=0
d170 1
a170 1
      call bsrcsr (job, nr, nblk, nblk, amat, istak(lja), istak(lia),
d172 1
d175 1
a175 1
      iout=12
d183 1
d186 1
a186 1
      stop
d202 2
d206 1
d227 2
d237 2
@


1.13
log
@when MatGetSizeSeq fails, uses tet_mesh_order4_adj_count
@
text
@d4 1
a4 1
C     $Id: MatAllocaSeq.F,v 1.12 2013/01/26 11:30:51 abonfi Exp abonfi $
d15 1
a15 1
C     $Id: MatAllocaSeq.F,v 1.12 2013/01/26 11:30:51 abonfi Exp abonfi $
d115 2
a117 1
         WRITE(NOUT,FMT=320)IBGN,IEND,HELP,NNZR
@


1.12
log
@changed the name of included header/common files
@
text
@d4 1
a4 1
C     $Id: MatAllocaSeq.F,v 1.11 2011/09/16 07:19:48 abonfi Exp abonfi $
d15 1
a15 1
C     $Id: MatAllocaSeq.F,v 1.11 2011/09/16 07:19:48 abonfi Exp abonfi $
d51 2
a52 1
      INTEGER IFAIL,LDEGREE,NNZR,N,IOPT
d92 25
a116 1
     +              VERBOSE)
d198 5
@


1.11
log
@Changed PETSc header file to comply with version 3.1
@
text
@d4 1
a4 1
C     $Id: MatAllocaSeq.F,v 1.10 2009/06/11 13:10:01 abonfi Exp abonfi $
d15 1
a15 1
C     $Id: MatAllocaSeq.F,v 1.10 2009/06/11 13:10:01 abonfi Exp abonfi $
d24 2
a25 2
      INCLUDE 'nloc'
      INCLUDE 'constants'
d29 1
a29 1
      INCLUDE 'implicit.h'
@


1.10
log
@location of PETSc include file ahs chanegd with release 3.0.0
@
text
@d4 1
a4 1
C     $Id: MatAllocaSeq.F,v 1.9 2000/11/15 09:15:09 aldo Exp $
d15 1
a15 1
C     $Id: MatAllocaSeq.F,v 1.9 2000/11/15 09:15:09 aldo Exp $
d18 1
a18 1
#include "finclude/petsc.h"
@


1.9
log
@changed the name of the included file containing I/O devices
@
text
@d4 1
a4 1
C     $Id: MatAllocaSeq.F,v 1.8 2000/11/08 11:51:39 aldo Exp aldo $
d15 1
a15 1
C     $Id: MatAllocaSeq.F,v 1.8 2000/11/08 11:51:39 aldo Exp aldo $
d18 5
a22 5
#include "include/finclude/petsc.h"
#include "include/finclude/petscmat.h"
#include "include/finclude/petscvec.h"
#include "include/finclude/petscviewer.h"
#include "include/finclude/petscis.h"
d153 1
a153 1
      CALL MatSetOption(A,MAT_COLUMN_ORIENTED,IFAIL) 
d155 1
a155 1
          CALL MatSetOption(A,OPT(IOPT),IFAIL) 
d166 1
a166 2
      WRITE(NOUT,347)INT(INFO(MAT_INFO_ROWS_GLOBAL)),
     +            INT(INFO(MAT_INFO_COLUMNS_GLOBAL)),
@


1.8
log
@moved a declaration
@
text
@d4 1
a4 1
C     $Id: MatAllocaSeq.F,v 1.7 2000/10/26 15:12:19 aldo Exp aldo $
d15 1
a15 1
C     $Id: MatAllocaSeq.F,v 1.7 2000/10/26 15:12:19 aldo Exp aldo $
d28 1
a28 1
      INCLUDE 'IO'
@


1.7
log
@some restructuring; now called twice to create the flow eqns.
and turbulence eqn. matrices
@
text
@d4 1
a4 1
C     $Id$
d15 1
a15 1
C     $Id: MatAllocaSeq.F,v 1.6 2000/10/19 16:10:34 aldo Exp aldo $
a29 1
caldo INCLUDE 'mapping.com'
d31 3
a38 3
C     .. Scalar Arguments ..
      INTEGER NBLK,NDIM,NELEM,NOFVERT,NR,NGHOST,NOPT
      CHARACTER*(*) TITLE
a125 3
c     release liwk ljwk
c
      call istkrl(2)
d136 1
a136 1
      call istkrl(6)
@


1.6
log
@changed include file names for PETSc rev. 2.0.29
@
text
@d1 2
a2 1
      SUBROUTINE MatAllocaSeq(A,B,NDIM,NOFVERT,NBLK,NELEM,NR,NGHOST)
d4 1
a7 2
C STIFMAT  : is the driver for allocating memory and building the
C            stiffness matrix
a8 2
C
C
d15 1
a15 2
C     $Id: MatAllocaSeq.F,v 1.5 2000/09/29 09:18:36 aldo Exp aldo $
C     $Header: /usr/people/aldo/CFD_codes/EulFS.0.10.10/src/seq/RCS/MatAllocaSeq.F,v 1.5 2000/09/29 09:18:36 aldo Exp aldo $
d30 1
a30 1
      INCLUDE 'mapping.com'
d35 2
a36 1
      Mat A,B
d38 9
a46 1
      INTEGER NBLK,NDIM,NELEM,NOFVERT,NR,NGHOST
d52 1
a52 1
      INTEGER IFAIL,LDEGREE,NNZR,N
d86 1
a86 1
C     STIFSIZE finds the number of non zero entries (NNZR)
d158 3
a160 1
      IF(ABS(KAN).NE.1)CALL MatSetOption(A,MAT_KEEP_ZEROED_ROWS,IFAIL) 
a162 9
C     Create matrix for turbulence equation
C
      IF( TURBULENT )THEN 
      CALL MatCreateSeqAIJ(PETSC_COMM_SELF,NR,NR,NNZR/NR,
     +                     ISTAK(LDEGREE),B,IFAIL)
      CALL MatSetOption(B,MAT_COLUMN_ORIENTED,IFAIL) 
      CALL MatZeroEntries(B,IFAIL)
      ENDIF
C
d168 1
a168 9
      WRITE(NOUT,346)' Flow equation matrix'
C
      WRITE(NOUT,347)INT(INFO(MAT_INFO_ROWS_GLOBAL)),
     +            INT(INFO(MAT_INFO_COLUMNS_GLOBAL)),
     +            INT(INFO(MAT_INFO_BLOCK_SIZE)),
     +            INT(INFO(MAT_INFO_NZ_ALLOCATED)),
     +            INFO(MAT_INFO_MEMORY)
C
      IF( .NOT. TURBULENT )RETURN
a169 2
      CALL MatGetInfo(B,MAT_LOCAL,INFO,IFAIL)
      WRITE(NOUT,346)' Turbulence equation matrix'
a174 1
C
@


1.5
log
@can now dump the sparsity pattern to a file
@
text
@d17 2
a18 2
C     $Id: MatAllocaSeq.F,v 1.4 2000/08/18 14:08:18 aldo Exp aldo $
C     $Header: /usr/people/aldo/CFD_codes/EulFS.0.10.9/src/seq/RCS/MatAllocaSeq.F,v 1.4 2000/08/18 14:08:18 aldo Exp aldo $
d22 4
a25 4
#include "include/finclude/mat.h"
#include "include/finclude/vec.h"
#include "include/finclude/viewer.h"
#include "include/finclude/is.h"
@


1.4
log
@add call to MatSetOption with MAT_KEEP_ZEROED_ROWS
@
text
@d1 1
d4 1
a9 1
      SUBROUTINE MatAllocaSeq(A,B,NDIM,NOFVERT,NBLK,NELEM,NR,NGHOST)
d17 2
a18 2
C     $Id: MatAllocaSeq.F,v 1.3 2000/06/23 16:41:04 aldo Exp aldo $
C     $Header: /usr/people/aldo/CFD_codes/EulFS.0.10.7/src/seq/RCS/MatAllocaSeq.F,v 1.3 2000/06/23 16:41:04 aldo Exp aldo $
d47 3
d55 3
d88 50
@


1.3
log
@add option MAT_KEEP_ZEROED_ROWS
@
text
@d16 2
a17 2
C     $Id: MatAllocaSeq.F,v 1.2 1999/09/15 14:43:45 aldo Exp aldo $
C     $Header: /usr/people/aldo/CFD_codes/EulFS.0.10.7/src/seq/RCS/MatAllocaSeq.F,v 1.2 1999/09/15 14:43:45 aldo Exp aldo $
d95 1
a95 1
      CALL MatSetOption(A,MAT_KEEP_ZEROED_ROWS,IFAIL) 
@


1.2
log
@bug fixed replacing MPI_COMM_SELF with PETSC_COMM_SELF
@
text
@d16 2
a17 2
C     $Id: MatAllocaSeq.F,v 1.1 1998/12/02 09:19:48 aldo Exp aldo $
C     $Header: /c9/tracs/aldo/EulFS.0.9.7/src/seq/RCS/MatAllocaSeq.F,v 1.1 1998/12/02 09:19:48 aldo Exp aldo $
d95 1
@


1.1
log
@Initial revision
@
text
@d16 2
a17 2
C     $Id$
C     $Header: stiffmat.F,v 1.10 98/11/25 17:01:42 aldo Exp $
d85 1
a85 1
          CALL MatCreateSeqAIJ(MPI_COMM_SELF,NR,NR,NNZR/NR,
d88 1
a88 1
          CALL MatCreateSeqBAIJ(MPI_COMM_SELF,NBLK,N,N,NNZR/NR,
d100 1
a100 1
      CALL MatCreateSeqAIJ(MPI_COMM_SELF,NR,NR,NNZR/NR,
@
