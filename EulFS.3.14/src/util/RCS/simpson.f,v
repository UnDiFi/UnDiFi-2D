head	1.7;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.7
	release3_13_0:1.7
	release3_12_0:1.7
	release3_11_0:1.7
	release3_10_0:1.7
	release3_8_0:1.7
	release3_7_1:1.7
	release3_7_0:1.6
	release3_4_5:1.5
	release3_4_4:1.5
	release3_4_3:1.4
	release3_4_2:1.4
	release3_4_1:1.3
	release3_4_0:1.3
	release3_3_5:1.3
	release3_3_4:1.3
	release3_3_3:1.3
	release3_3_2:1.3
	release3_3_0:1.3
	release3_3_1:1.3;
locks; strict;
comment	@c @;


1.7
date	2020.03.28.09.54.05;	author abonfi;	state Exp;
branches;
next	1.6;

1.6
date	2020.02.18.09.51.03;	author abonfi;	state Exp;
branches;
next	1.5;

1.5
date	2014.04.03.09.26.51;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2013.08.22.12.04.48;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	2012.12.20.11.07.11;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.01.09.43.47;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2011.04.01.09.34.42;	author abonfi;	state Exp;
branches;
next	;


desc
@Simpson's rule in 2d
@


1.7
log
@renamed subroutine call
@
text
@!> \par Purpose
!>
!> Compute the integral of the flux \c FLUXF through a linear/triangular face
!> using Simpson's rule
!>
!> @@param[in] NDIM dimension of the space
!> @@param[in] NOFVERT nof vertices for a cell = NDIM+1
!> @@param[in] NDOF nof degrees of freedom in vector ZROE, also leading dimension of FLXN
!> @@param[in] ZROE Roe's parameter vector
!> @@param[in] XYZDOT the cartesian components of the grid velocity \f$ \mathbf{b}\f$
!> @@param[in] FACN the cartesian components of the scaled inward normal to the face
!> @@param[out] FLXN the eulerian (inviscid) nodal fluxes: the first NDIM columns return the fluxes in the NDIM vertices of the face,
!>             the last one (NOFVERT) is used to store the face value computed according to Simpson's rule
!> @@param[in] FLUXF is the subroutine used to compute the flux
!>            the calling sequence is: 
!> \verbatim
!> FLUXF((NDIM,FACN,ZROE(1,I),XYZDOT,FLXN(1,I))
!> \endverbatim
C
!> \author $Author: abonfi $
!> \version $Revision: 1.6 $
!> \date $Date: 2020/02/18 09:51:03 $
C
!> \bug In 3D it uses the midpoint rule, NOT Simpson's
      SUBROUTINE SIMPSON(NDIM,NOFVERT,NDOF,ZROE,XYZDOT,FACN,FLXN,FLUXF)
      IMPLICIT NONE
C
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
C
      INTEGER NDIM,NOFVERT,NDOF
C
      DOUBLE PRECISION FACN(NDIM),ZROE(NDOF,NOFVERT),
     &                 XYZDOT(NDIM,NOFVERT),FLXN(NDOF,NOFVERT)
C
      DOUBLE PRECISION WC,WO,WD,HELP
      DOUBLE PRECISION DNRM2
C
      EXTERNAL FLUXF
C
      INTEGER I ,IFAIL
      LOGICAL VERBOSE
      PARAMETER(VERBOSE=.FALSE.)
!     PARAMETER(VERBOSE=.TRUE.)
C
      IF(NDIM.EQ.2)THEN
         WC = 4.d0/6.d0
         WO = ONE/6.d0
      ELSE
!        WRITE(6,*)"Simpson's flux in 3D should be checked"
!
! the rule should be Area/3*(f((1+2)/2)+f((2+3)/2)+f((3+1)/2)) i.e.
! compute the flux ad midpoints
!
! https://math.stackexchange.com/questions/1353599/quadrature-formula-on-triangle?answertab=active#tab-top
!
!
         WC = 0.d0
         WO = ONE/3.d0
      ENDIF
      WD = ONE/REAL(NOFVERT-1)
C
      CALL DINIT(NDOF,ZERO,ZROE(1,NOFVERT),1)
      CALL DINIT(NDOF,ZERO,FLXN(1,NOFVERT),1)
      CALL DINIT(NDIM,ZERO,XYZDOT(1,NOFVERT),1)
      DO I = 1,(NOFVERT-1)
            CALL DAXPY(NDOF,ONE,ZROE(1,I),1,ZROE(1,NOFVERT),1)
            CALL DAXPY(NDIM,ONE,XYZDOT(1,I),1,XYZDOT(1,NOFVERT),1) ! compute average grid velocity
            CALL FLUXF(NDIM,FACN,ZROE(1,I),XYZDOT(1,I),FLXN(1,I)) ! compute flux in the vertices of the face
      ENDDO
      CALL DSCAL(NDOF,WD,ZROE(1,NOFVERT),1) ! compute average Z in the edge/face
      CALL DSCAL(NDIM,WD,XYZDOT(1,NOFVERT),1) ! compute average grid velocity in the edge/face
      CALL FLUXF(NDIM,FACN,ZROE(1,NOFVERT),XYZDOT(1,NOFVERT),
     &           FLXN(1,NOFVERT)) ! compute flux in the center of gravity of the face
C
      IF(VERBOSE)THEN
         CALL R8Mat_Print('General',' ',NDOF,NOFVERT,FLXN,
     +            NDOF,'Nodal fluxes (vertex + gravity) ',IFAIL)
      ENDIF
C
      CALL DSCAL(NDOF,WC,FLXN(1,NOFVERT),1)
C
      IF(VERBOSE)THEN
         CALL R8Mat_Print('General',' ',NDOF,NOFVERT,ZROE,
     +            NDOF,'Nodal values incl. average ',IFAIL)
      ENDIF
C
      DO I = 1,(NOFVERT-1)
         CALL DAXPY(NDOF,WO,FLXN(1,I),1,FLXN(1,NOFVERT),1)
      ENDDO
!
      IF(VERBOSE)THEN
         HELP = DNRM2(NDIM,FACN,1)
         WRITE(6,*)'Face area is ',HELP
         CALL R8Mat_Print('General',' ',NDOF,NOFVERT,FLXN,
     +            NDOF,'Nodal fluxes in subr. Simpson ',IFAIL)
      ENDIF
C
      RETURN
      END 
@


1.6
log
@minor changes; added a reference for computing the 3D integral exactly
@
text
@d21 2
a22 2
!> \version $Revision: 1.5 $
!> \date $Date: 2014/04/03 09:26:51 $
d77 1
a77 1
         CALL X04CAF('General',' ',NDOF,NOFVERT,FLXN,
d84 1
a84 1
         CALL X04CAF('General',' ',NDOF,NOFVERT,ZROE,
d95 1
a95 1
         CALL X04CAF('General',' ',NDOF,NOFVERT,FLXN,
@


1.5
log
@fixed an error in the documentation
@
text
@d21 2
a22 2
!> \version $Revision: 1.4 $
!> \date $Date: 2013/08/22 12:04:48 $
d36 2
a37 1
      DOUBLE PRECISION WC,WO
d44 1
d51 7
d61 1
d71 2
a72 2
      CALL DSCAL(NDOF,ONE/(NOFVERT-1),ZROE(1,NOFVERT),1) ! compute average Z in the edge/face
      CALL DSCAL(NDIM,ONE/(NOFVERT-1),XYZDOT(1,NOFVERT),1) ! compute average Z in the edge/face
d93 2
@


1.4
log
@Added Doxygen stuff
@
text
@d17 1
a17 1
!> FLUXF((NDIM,ZROE(1,I),XYZDOT,FACN,FLXN(1,I))
d21 2
a22 2
!> \version $Revision: 1.8 $
!> \date $Date: 2013/08/20 14:48:46 $
@


1.3
log
@changed the order and number of arguments passed in the call
@
text
@d1 22
a22 16
      SUBROUTINE SIMPSON(NDIM,NOFVERT,NDOF,ZROE,FACN,FLXN,FLUXF)
C
C     compute the flux through a face of normal FACN from parameter vector
C     Input:
C     NDIM      dimension of the space
C     NOFVERT   nof vertices for a cell = NDIM+1
C     NDOF      nof dofs for a vertex
C     ZROE      nodal values: the first three must store the face values,
C               the last one is used to store the midpoint value
C     FACN      NDIM components of the face normal
C     FLUXF     is the subroutine used to compute the flux
C               the calling sequence is:
C               FLUXF((NDIM,ZROE(1,I),FACN,FLXN(1,I))
C     Output:
C     FLXN      nodal fluxes: the first three return the fluxes in the vertices of the face,
C               the last one is used to store the face value computed according to Simpson's rule
d24 2
d33 2
a34 1
      DOUBLE PRECISION FACN(NDIM),ZROE(NDOF,NOFVERT),FLXN(NDOF,NOFVERT)
d41 2
d55 1
d58 2
a59 1
            CALL FLUXF(NDIM,FACN,ZROE(1,I),FLXN(1,I)) ! compute flux in the vertices of the face
d62 9
a70 5
      CALL FLUXF(NDIM,FACN,ZROE(1,NOFVERT),FLXN(1,NOFVERT)) ! compute flux in the center of gravity of the face
!
!     CALL X04CAF('General',' ',NDOF,NOFVERT,FLXN,
!    +            NDOF,'Nodal fluxes (vertex + gravity) ',IFAIL)
!
d73 4
a76 2
!     CALL X04CAF('General',' ',NDOF,NOFVERT,ZROE,
!    +            NDOF,'Nodal values incl. average ',IFAIL)
d82 4
a85 2
!     CALL X04CAF('General',' ',NDOF,NOFVERT,FLXN,
!    +            NDOF,'Nodal fluxes in subr. Simpson ',IFAIL)
@


1.2
log
@include constants
@
text
@d1 1
a1 1
      SUBROUTINE SIMPSON(VNOR,Z,BCFLUX,FLUXN,NDIM,NOFVAR)
d3 62
a64 37
C    This routine applies Simpson's rule to compute the flux
C    through an edge ..
C
      IMPLICIT NONE 
C
      INCLUDE 'constants.h' 
C
C     .. Scalar Arguments ..
      INTEGER NDIM,NOFVAR
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION FLUXN(NOFVAR),VNOR(NDIM),Z(NOFVAR,*)
C     ..
C     .. Subroutine Arguments ..
      EXTERNAL BCFLUX
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION H3
      INTEGER I
C     ..
C     .. Local Arrays ..
      DOUBLE PRECISION F0(MAXNOFVAR),F1(MAXNOFVAR),F2(MAXNOFVAR),
     &                 Z1(MAXNOFVAR)
C     ..
      DO 3 I = 1,NOFVAR
          Z1(I) = HALF * (Z(I,1)+Z(I,2))
    3 CONTINUE
C
C
      CALL BCFLUX(NDIM,VNOR,Z(1,1),F0)
      CALL BCFLUX(NDIM,VNOR,Z1(1),F1)
      CALL BCFLUX(NDIM,VNOR,Z(1,2),F2)
C
      H3 = 1.D0/6.D0
      DO 7 I = 1,NOFVAR
          FLUXN(I) = H3* (F0(I)+4.D0*F1(I)+F2(I))
    7 CONTINUE
d67 1
a67 2

      END
@


1.1
log
@Initial revision
@
text
@d8 1
d24 2
a25 1
      DOUBLE PRECISION F0(5),F1(5),F2(5),Z1(5)
d28 1
a28 1
          Z1(I) = 0.5D0* (Z(I,1)+Z(I,2))
@
