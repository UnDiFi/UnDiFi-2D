head	1.7;
access
	tesistim;
symbols
	release3_14_0:1.7
	release3_13_0:1.7
	release3_12_0:1.7
	release3_11_0:1.7
	release3_10_0:1.7
	release3_8_0:1.7
	release3_7_1:1.7
	release3_7_0:1.6
	release3_4_5:1.6
	release3_4_4:1.6
	release3_4_3:1.6
	release3_4_2:1.6
	release3_4_1:1.6
	release3_4_0:1.6
	release3_3_5:1.6
	release3_3_4:1.6
	release3_3_3:1.6
	release3_3_2:1.6
	release3_3_1:1.5
	release3_3_0:1.5;
locks; strict;
comment	@c @;


1.7
date	2020.03.28.09.51.14;	author abonfi;	state Exp;
branches;
next	1.6;

1.6
date	2013.01.29.14.33.34;	author abonfi;	state Exp;
branches;
next	1.5;

1.5
date	2010.12.03.14.08.17;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2010.11.06.10.30.27;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	2010.10.04.12.44.49;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.13.14.21.11;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2009.08.11.14.45.51;	author abonfi;	state Exp;
branches;
next	;


desc
@Merkle's preconditioner in primitive variables
@


1.7
log
@renamed subroutine call
@
text
@      SUBROUTINE Eigen_X(Matrix,LDA,DVDZ,DUDV,DVDU,NDIM,LDB)
C
C     $Id: eigen_X.F,v 1.6 2013/01/29 14:33:34 abonfi Exp abonfi $
C
C      This is Merkle's preconditioner
C
C     define FSPL_USE_DEBUG for debugging purposes, i.e. when using
C     -check
C
CCCCCCCC#define FSPL_USE_DEBUG
C
C
C
      IMPLICIT NONE
C
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
      INCLUDE 'time.h'
C
      INCLUDE 'merkle.com'
      INCLUDE 'stream.com'
      INCLUDE 'three.com'
      INCLUDE 'time.com'
      INCLUDE 'flags.com'
      INCLUDE 'pfcgas.com'
C
      INTEGER LDA,NDIM,LDB
C
      DOUBLE PRECISION Matrix(LDA,LDA,*),DVDZ(LDB,LDB),
     +DUDV(LDB,LDB),DVDU(LDB,LDB)
#ifdef FSPL_USE_DEBUG
      DOUBLE PRECISION WORK(MAX_NOFVAR_SQR),WKSP(MAX_NOFVAR_SQR)
      INTEGER IPIV(MAXNOFVAR)
      LOGICAL UNITMAT
#endif
C
      DOUBLE PRECISION DENS,DENSINV,HELP,XI,TEMP,DUMMY
      DOUBLE PRECISION GP11,GP12,GP13,GP14,GP21,GP22,GP31,GP33,GP41,
     2GP42,GP43,GP44,BOX,CIRC
      INTEGER IDIM,ifail
C
      DOUBLE PRECISION DDOT
      EXTERNAL         DDOT
C
      DENS = UAVG(1)
      DENSINV = ONE/UAVG(1) 
!     MINFSQR = M_INFTY*M_INFTY
      DUMMY = ONE/(GAM*RSTAR) ! DUMMY replaces MINFSQR
      HELP = GM1*DUMMY
      BOX = HELP*(AMPSQR-ONE)*DENSINV
      CIRC = HELP*AMPSQR*ASQR
C
C
      IDIM = 1
C
      Matrix(1,1,IDIM) = UAVG(3)*AMPSQR
      Matrix(1,2,IDIM) = ZERO
      Matrix(1,3,IDIM) = DENS*ASQR*AMPSQR
      Matrix(1,4,IDIM) = ZERO
      Matrix(1,5,IDIM) = ZERO
C
      Matrix(2,1,IDIM) = BOX*UAVG(3)
      Matrix(2,2,IDIM) = UAVG(3)
      Matrix(2,3,IDIM) = CIRC
      Matrix(2,4,IDIM) = ZERO
      Matrix(2,5,IDIM) = ZERO
C
      Matrix(3,1,IDIM) = DENSINV
      Matrix(3,2,IDIM) = ZERO
      Matrix(3,3,IDIM) = UAVG(3)
      Matrix(3,4,IDIM) = ZERO
      Matrix(3,5,IDIM) = ZERO
C
      Matrix(4,1,IDIM) = ZERO
      Matrix(4,2,IDIM) = ZERO
      Matrix(4,3,IDIM) = ZERO
      Matrix(4,4,IDIM) = UAVG(3)
      Matrix(4,5,IDIM) = ZERO
C
      Matrix(5,1,IDIM) = ZERO
      Matrix(5,2,IDIM) = ZERO
      Matrix(5,3,IDIM) = ZERO
      Matrix(5,4,IDIM) = ZERO
      Matrix(5,5,IDIM) = UAVG(3)
C
      IDIM = 2
C
      Matrix(1,1,IDIM) = UAVG(4)*AMPSQR
      Matrix(1,2,IDIM) = ZERO
      Matrix(1,3,IDIM) = ZERO
      Matrix(1,4,IDIM) = DENS*AMPSQR*ASQR
      Matrix(1,5,IDIM) = ZERO
C
      Matrix(2,1,IDIM) = BOX*UAVG(4) 
      Matrix(2,2,IDIM) = UAVG(4)
      Matrix(2,3,IDIM) = ZERO
      Matrix(2,4,IDIM) = CIRC
      Matrix(2,5,IDIM) = ZERO
C
      Matrix(3,1,IDIM) = ZERO
      Matrix(3,2,IDIM) = ZERO
      Matrix(3,3,IDIM) = UAVG(4)
      Matrix(3,4,IDIM) = ZERO
      Matrix(3,5,IDIM) = ZERO
C
      Matrix(4,1,IDIM) = DENSINV
      Matrix(4,2,IDIM) = ZERO
      Matrix(4,3,IDIM) = ZERO
      Matrix(4,4,IDIM) = UAVG(4)
      Matrix(4,5,IDIM) = ZERO
C
      Matrix(5,1,IDIM) = ZERO
      Matrix(5,2,IDIM) = ZERO
      Matrix(5,3,IDIM) = ZERO
      Matrix(5,4,IDIM) = ZERO
      Matrix(5,5,IDIM) = UAVG(4)
C
      IDIM = 3
C
      Matrix(1,1,IDIM) = UAVG(5)*AMPSQR
      Matrix(1,2,IDIM) = ZERO
      Matrix(1,3,IDIM) = ZERO
      Matrix(1,4,IDIM) = ZERO
      Matrix(1,5,IDIM) = DENS*AMPSQR*ASQR
C
      Matrix(2,1,IDIM) = BOX*UAVG(5)
      Matrix(2,2,IDIM) = UAVG(5)
      Matrix(2,3,IDIM) = ZERO
      Matrix(2,4,IDIM) = ZERO
      Matrix(2,5,IDIM) = CIRC
C
      Matrix(3,1,IDIM) = ZERO
      Matrix(3,2,IDIM) = ZERO
      Matrix(3,3,IDIM) = UAVG(5)
      Matrix(3,4,IDIM) = ZERO
      Matrix(3,5,IDIM) = ZERO
C
      Matrix(4,1,IDIM) = ZERO
      Matrix(4,2,IDIM) = ZERO
      Matrix(4,3,IDIM) = ZERO
      Matrix(4,4,IDIM) = UAVG(5)
      Matrix(4,5,IDIM) = ZERO
C
      Matrix(5,1,IDIM) = DENSINV
      Matrix(5,2,IDIM) = ZERO
      Matrix(5,3,IDIM) = ZERO
      Matrix(5,4,IDIM) = ZERO
      Matrix(5,5,IDIM) = UAVG(5)
C
C     Transformation matrix from primitive to conserved variables ..
C     this is matrix \Gamma_p^{-1} of MSC's notes
C
      TEMP = ONE/AMPSQR+GM1
      HELP =-DENS/(ASQR*DUMMY)
C
      DUDV(1,1) = TEMP/ASQR
      DUDV(1,2) = HELP
      DUDV(1,3) = ZERO
      DUDV(1,4) = ZERO
C
      DUDV(2,1) = TEMP*(ONE/GM1+HALF*MACHSQR)-ONE
      DUDV(2,2) = HELP*KINETIC
      DUDV(2,3) = DENS*UAVG(3)
      DUDV(2,4) = DENS*UAVG(4)
C
      DUDV(3,1) = TEMP*UAVG(3)/ASQR
      DUDV(3,2) = HELP*UAVG(3)
      DUDV(3,3) = UAVG(1)
      DUDV(3,4) = ZERO
C
      DUDV(4,1) = TEMP*UAVG(4)/ASQR
      DUDV(4,2) = HELP*UAVG(4)
      DUDV(4,3) = ZERO
      DUDV(4,4) = UAVG(1)
C
      IF(NDIM.EQ.3)THEN
         DUDV(5,1) = TEMP*UAVG(5)/ASQR
         DUDV(5,2) = HELP*UAVG(5)
         DUDV(5,3) = ZERO
         DUDV(5,4) = ZERO
C
         DUDV(1,5) = ZERO
         DUDV(2,5) = DENS*UAVG(5)
         DUDV(3,5) = ZERO
         DUDV(4,5) = ZERO
         DUDV(5,5) = DENS
      ENDIF
C
      IF(.NOT.LTIME)GOTO 120
C
C     Transformation matrix from primitive to conserved variables ..
C
      GP14 = GM1*AMPSQR
      GP11 = KINETIC*GP14
      GP12 =-GP14*UAVG(3)
      GP13 =-GP14*UAVG(4)
C
      TEMP = (ONE+GM1*AMPSQR)*DUMMY 
C
      GP44 = GM1*TEMP*DENSINV
      GP42 =-GP44*UAVG(3)
      GP43 =-GP44*UAVG(4)
      GP41 =-ASQR*DENSINV*DUMMY+GP44*KINETIC
C
      GP21 =-UAVG(3)*DENSINV
      GP22 = DENSINV
C
      GP31 =-UAVG(4)*DENSINV
      GP33 = DENSINV
C
      DVDU(1,1) = GP11
      DVDU(1,2) = GP14
      DVDU(1,3) = GP12
      DVDU(1,4) = GP13
C
      DVDU(3,1) = GP21
      DVDU(3,2) = ZERO
      DVDU(3,3) = GP22
      DVDU(3,4) = ZERO
C
      DVDU(4,1) = GP31
      DVDU(4,2) = ZERO
      DVDU(4,3) = ZERO
      DVDU(4,4) = GP33
C
      DVDU(2,1) = GP41
      DVDU(2,2) = GP44
      DVDU(2,3) = GP42
      DVDU(2,4) = GP43
C
      IF(NDIM.EQ.3)THEN
         DVDU(5,1) =-UAVG(5)*DENSINV
         DVDU(5,2) = ZERO
         DVDU(5,3) = ZERO
         DVDU(5,4) = ZERO
C
         DVDU(1,5) = -UAVG(5)*GP14
         DVDU(2,5) = -GP44*UAVG(5)
         DVDU(3,5) = ZERO
         DVDU(4,5) = ZERO
         DVDU(5,5) = DENSINV
      ENDIF
C
#ifdef FSPL_USE_DEBUG
C
C    Test if the product of the two preconditioners equals the
C    identity matrix: DUDV*DVDU = Identity
C
      CALL DCOPY(LDB*LDB,dUdV,1,WKSP,1)
      CALL DGETRF(LDB,LDB,WKSP,LDB,IPIV,IFAIL)
      CALL DGETRI(LDB,WKSP,LDB,IPIV,WORK,MAXNOFVAR,IFAIL)
                CALL R8Mat_Print('G',' ',LDB,LDB,WKSP,LDB,
     +                      'Inverse via DGETRI ????',IFAIL)
                CALL R8Mat_Print('G',' ',LDB,LDB,DVDU,LDB,
     +                      'Inverse via analitical ????',IFAIL)

            CALL DGEMM('N','N',LDB,LDB,LDB,ONE,DUDV,LDB,
     +                 DVDU,LDB,ZERO,WORK,LDB)
            IF( UNITMAT(WORK,LDB,LDB,LDB,1.D-15) .EQV. .FALSE. )
     +      THEN
                CALL R8Mat_Print('G',' ',LDB,LDB,WORK,LDB,
     +                      'P*P^{-1} = Identity matrix ????',IFAIL)
                PAUSE
            ENDIF
#endif
C
  120 CONTINUE
C
C     Transformation matrix from parameter vector to symmetrizing variables
C
      DVDZ(1,1) = GM1OG*ZAVG(2) ! dp/dz1
      DVDZ(1,2) = GM1OG*ZAVG(1) ! dp/dz2
      DVDZ(1,3) =-GM1OG*ZAVG(3) ! dp/dz3
      DVDZ(1,4) =-GM1OG*ZAVG(4) ! dp/dz4
C
      DVDZ(3,1) =-ZAVG(3)*DENSINV  ! du/dz1
      DVDZ(3,2) = ZERO            ! du/dz2
      DVDZ(3,3) = ONE/ZAVG(1)     ! du/dz3
      DVDZ(3,4) = ZERO            ! du/dz4
C
      DVDZ(4,1) =-ZAVG(4)*DENSINV  ! dv/dz1
      DVDZ(4,2) = ZERO
      DVDZ(4,3) = ZERO
      DVDZ(4,4) = ONE/ZAVG(1)
C
      HELP = ZAVG(3)*ZAVG(3)+ZAVG(4)*ZAVG(4) 
      IF(NDIM.EQ.3)HELP = HELP + ZAVG(5)*ZAVG(5)
      HELP = HELP/ZAVG(1)
      XI = GM1*DUMMY
      TEMP = XI*DENSINV 
C
      DVDZ(2,1) = TEMP*(HELP-ZAVG(2))        ! dT/dz1
      DVDZ(2,2) = XI/ZAVG(1)
      DVDZ(2,3) =-TEMP*ZAVG(3)
      DVDZ(2,4) =-TEMP*ZAVG(4)
C
      IF (NDIM.EQ.2) RETURN
C
      DVDZ(1,5) =-GM1OG*ZAVG(5)
      DVDZ(2,5) =-TEMP*ZAVG(5) 
      DVDZ(3,5) = ZERO
      DVDZ(4,5) = ZERO
C
      DVDZ(5,1) =-ZAVG(5)*DENSINV
      DVDZ(5,2) = ZERO
      DVDZ(5,3) = ZERO
      DVDZ(5,4) = ZERO
      DVDZ(5,5) = ONE/ZAVG(1)
C
      RETURN 
C
      END
@


1.6
log
@The adiabatic index is not any longer a parameter, but a variable
@
text
@d3 1
a3 1
C     $Id: eigen_X.F,v 1.5 2010/12/03 14:08:17 abonfi Exp abonfi $
d252 1
a252 1
                CALL X04CAF('G',' ',LDB,LDB,WKSP,LDB,
d254 1
a254 1
                CALL X04CAF('G',' ',LDB,LDB,DVDU,LDB,
d261 1
a261 1
                CALL X04CAF('G',' ',LDB,LDB,WORK,LDB,
@


1.5
log
@bug fixed with the third dimension
@
text
@d3 1
a3 1
C     $Id: eigen_X.F,v 1.4 2010/11/06 10:30:27 abonfi Exp abonfi $
d25 1
@


1.4
log
@can now deal with the linearization for internal flows
@
text
@d3 1
a3 1
C     $Id: eigen_X.F,v 1.3 2010/10/04 12:44:49 abonfi Exp abonfi $
d10 1
a10 1
CCCCCC#define FSPL_USE_DEBUG
d231 1
a231 1
         DVDU(5,1) = UAVG(5)*DENSINV
@


1.3
log
@some constants are now included
@
text
@d3 1
a3 1
C     $Id: eigen_X.F,v 1.2 2009/08/13 14:21:11 abonfi Exp abonfi $
d20 2
d23 1
a23 1
      INCLUDE 'stream.com'
a24 2
      INCLUDE 'time.com'
      INCLUDE 'merkle.com'
d36 1
a36 1
      DOUBLE PRECISION DENS,DENSINV,HELP,XI,TEMP,MINFSQR
d46 3
a48 2
      MINFSQR = M_INFTY*M_INFTY
      HELP = GM1*MINFSQR
d153 1
a153 1
      HELP =-DENS/(ASQR*MINFSQR)
d197 1
a197 1
      TEMP = (ONE+GM1*AMPSQR)*MINFSQR 
d202 1
a202 1
      GP41 =-ASQR*DENSINV*MINFSQR+GP44*KINETIC
d288 1
a288 1
      XI = GM1*M_INFTY*M_INFTY 
@


1.2
log
@3D version; also using the EulFS storage of the velocity components
@
text
@d3 1
a3 1
C     $Id: eigen_X.F,v 1.1 2009/08/11 14:45:51 abonfi Exp abonfi $
d24 1
a24 2
C
      DOUBLE PRECISION MERKLE,AMP2
a43 3
      MERKLE = MACH
      AMP2 = MACHSQR
C
d48 2
a49 2
      BOX = HELP*(AMP2-ONE)*DENSINV
      CIRC = HELP*AMP2*ASQR
d54 1
a54 1
      Matrix(1,1,IDIM) = UAVG(3)*AMP2
d56 1
a56 1
      Matrix(1,3,IDIM) = DENS*ASQR*AMP2
d86 1
a86 1
      Matrix(1,1,IDIM) = UAVG(4)*AMP2
d89 1
a89 1
      Matrix(1,4,IDIM) = DENS*AMP2*ASQR
d118 1
a118 1
      Matrix(1,1,IDIM) = UAVG(5)*AMP2
d122 1
a122 1
      Matrix(1,5,IDIM) = DENS*AMP2*ASQR
d151 1
a151 1
      TEMP = ONE/AMP2+GM1
d191 1
a191 1
      GP14 = GM1*AMP2
d196 1
a196 1
      TEMP = (ONE+GM1*AMP2)*MINFSQR 
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
C     $Id: eigen_VII.F,v 1.6 2002/09/13 08:42:01 abonfi Exp $
d10 1
a10 1
CCCCC#define FSPL_USE_DEBUG
d39 1
a39 1
     2GP42,GP43,GP44
d52 2
d59 2
a60 2
      Matrix(1,2,IDIM) = UAVG(1)*AMP2*ASQR
      Matrix(1,3,IDIM) = ZERO
d62 1
d64 1
a64 1
      Matrix(2,1,IDIM) = DENSINV
d66 1
a66 1
      Matrix(2,3,IDIM) = ZERO
d68 1
d70 1
a70 1
      Matrix(3,1,IDIM) = ZERO
d74 1
d76 2
a77 2
      Matrix(4,1,IDIM) = HELP*(AMP2-ONE)*UAVG(3)*DENSINV
      Matrix(4,2,IDIM) = HELP*AMP2*ASQR
d80 7
d92 3
a94 2
      Matrix(1,3,IDIM) = UAVG(1)*AMP2*ASQR
      Matrix(1,4,IDIM) = ZERO
d96 1
a96 1
      Matrix(2,1,IDIM) = ZERO
d99 2
a100 1
      Matrix(2,4,IDIM) = ZERO
d102 1
a102 1
      Matrix(3,1,IDIM) = DENSINV
d106 1
d108 1
a108 1
      Matrix(4,1,IDIM) = HELP*(AMP2-ONE)*UAVG(4)*DENSINV
d110 1
a110 1
      Matrix(4,3,IDIM) = HELP*AMP2*ASQR
d112 7
d120 1
a120 1
      IDIM = 3 ! this is un-implemented
d122 1
a122 1
      Matrix(1,1,IDIM) = UAVG(5)
d125 2
a126 1
      Matrix(1,4,IDIM) = ABAR
d128 1
a128 1
      Matrix(2,1,IDIM) = ZERO
d132 1
d138 1
d140 1
a140 1
      Matrix(4,1,IDIM) = ABAR
d144 7
d153 1
d159 1
a159 1
      DUDV(1,2) = ZERO
d161 1
a161 1
      DUDV(1,4) = HELP
d163 4
a166 4
      DUDV(2,1) = TEMP*(ONE+HALF*GM1*MACHSQR)/GM1-ONE
      DUDV(2,2) = DENS*UAVG(3)
      DUDV(2,3) = DENS*UAVG(4)
      DUDV(2,4) = HELP*KINETIC
d169 3
a171 3
      DUDV(3,2) = UAVG(1)
      DUDV(3,3) = ZERO
      DUDV(3,4) = HELP*UAVG(3)
d174 3
a176 3
      DUDV(4,2) = ZERO
      DUDV(4,3) = UAVG(1)
      DUDV(4,4) = HELP*UAVG(4)
d179 2
a180 3
         STOP '3d un-implemented'
         DUDV(5,1) = UAVG(5)
         DUDV(5,2) = ZERO
d218 1
a218 6
      DVDU(2,1) = GP21
      DVDU(2,2) = ZERO
      DVDU(2,3) = GP22
      DVDU(2,4) = ZERO
C
      DVDU(3,1) = GP31
d220 2
a221 2
      DVDU(3,3) = ZERO
      DVDU(3,4) = GP33
d223 9
a231 4
      DVDU(4,1) = GP41
      DVDU(4,2) = GP44
      DVDU(4,3) = GP42
      DVDU(4,4) = GP43
d234 1
a234 2
         STOP '3d un-implemented'
         DVDU(5,1) = UAVG(5)
d239 2
a240 2
         DVDU(1,5) = ZERO
         DVDU(2,5) = DENS*UAVG(5)
d243 1
a243 1
         DVDU(5,5) = DENS
d251 1
a251 1
      call dcopy(LDB*LDB,dUdV,1,WKSP,1)
d264 1
a264 1
     +                      'P*P = Identity matrix ????',IFAIL)
d278 9
a286 9
      DVDZ(2,1) =-ZAVG(3)*DENSINV  ! du/dz1
      DVDZ(2,2) = ZERO            ! du/dz2
      DVDZ(2,3) = ONE/ZAVG(1)     ! du/dz3
      DVDZ(2,4) = ZERO            ! du/dz4
C
      DVDZ(3,1) =-ZAVG(4)*DENSINV  ! dv/dz1
      DVDZ(3,2) = ZERO
      DVDZ(3,3) = ZERO
      DVDZ(3,4) = ONE/ZAVG(1)
d294 4
a297 4
      DVDZ(4,1) = TEMP*(HELP-ZAVG(2))        ! dT/dz1
      DVDZ(4,2) = XI/ZAVG(1)
      DVDZ(4,3) =-TEMP*ZAVG(3)
      DVDZ(4,4) =-TEMP*ZAVG(4)
a300 2
      STOP 'Transformation un-implemented in 3D'
C
d302 1
a302 1
      DVDZ(2,5) = ZERO
d304 1
a304 1
      DVDZ(4,5) = ONE/ZAVG(1)
d306 5
a310 5
      DVDZ(4,1) =-ZAVG(5)*DENSINV
      DVDZ(4,2) = ZERO
      DVDZ(4,3) = ZERO
      DVDZ(4,4) = ZERO
      DVDZ(4,5) = ZAVG(1)
@
