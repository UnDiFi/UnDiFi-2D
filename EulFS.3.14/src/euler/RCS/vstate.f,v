head	1.13;
access
	aldo
	tesistim;
symbols
	release3_14_0:1.13
	release3_13_0:1.13
	release3_12_0:1.13
	release3_11_0:1.13
	release3_10_0:1.13
	release3_8_0:1.13
	release3_7_1:1.13
	release3_7_0:1.13
	release3_4_5:1.13
	release3_4_4:1.13
	release3_4_3:1.13
	release3_4_2:1.13
	release3_4_1:1.13
	release3_4_0:1.13
	release3_3_5:1.13
	release3_3_4:1.12
	release3_3_3:1.12
	release3_3_2:1.11
	release3_3_1:1.10
	release3_3_0:1.9;
locks; strict;
comment	@c @;


1.13
date	2013.04.30.07.42.54;	author abonfi;	state Exp;
branches;
next	1.12;

1.12
date	2013.02.05.16.46.29;	author tesistim;	state Exp;
branches;
next	1.11;

1.11
date	2013.01.29.14.33.34;	author abonfi;	state Exp;
branches;
next	1.10;

1.10
date	2013.01.26.11.33.32;	author abonfi;	state Exp;
branches;
next	1.9;

1.9
date	2009.01.09.10.28.55;	author abonfi;	state Exp;
branches;
next	1.8;

1.8
date	2005.10.04.07.17.05;	author abonfi;	state Exp;
branches;
next	1.7;

1.7
date	2005.09.22.09.04.43;	author abonfi;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.16.16.03.44;	author abonfi;	state Exp;
branches;
next	1.5;

1.5
date	2005.08.08.11.15.57;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2003.11.16.00.25.57;	author aldo;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.24.09.52.56;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	2002.08.13.07.13.33;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2001.07.04.06.54.09;	author abonfi;	state Exp;
branches;
next	;


desc
@set values in the ghost node
@


1.13
log
@the integer addresses of the energy and momentum dofs
are now in a common
@
text
@C
C     $Id: vstate.f,v 1.12 2013/02/05 16:46:29 tesistim Exp abonfi $
C
C     A bunch of subroutines with the same calling sequence:
C     subroutine ghost*(zin,zstar,work,ndim)
C
C     used to set the starred (virtual) state for inflow/outflow b.c.s
C
C     zin(1:NOFVAR) in input
C                   is the dependent variable in the boundary node
C                   un-changed on return
C     zstar(1:NOFVAR) upon return
C                     is the dependent variable in the ghost node
C
      subroutine ghost2vii(zin,zstar,work,ndim)
      IMPLICIT NONE
C
C     ghost state for subsonic outflow b.c. (compressible flow):
C     +) static pressure is taken from the b.c.
C     +) all other primitive variables are taken from the interior
C
      integer ndim
      double precision zin(*),zstar(*),work(*)
C
      INCLUDE'constants.h'
      INCLUDE 'pfcgas.com'
      double precision temp,POUTLET
C
      POUTLET = WORK(1)
C
C     compute in the boundary node
C
      ZSTAR(1) = ZIN(1)
      ZSTAR(3) = ZIN(3)
      ZSTAR(4) = ZIN(4)
      IF(NDIM.EQ.3) ZSTAR(5) = ZIN(5)
C
      TEMP       = ZIN(3)*ZIN(3) + ZIN(4)*ZIN(4)
      IF( NDIM .EQ. 3 )TEMP = TEMP + ZIN(5)*ZIN(5)
      TEMP = HALF * TEMP
      ZSTAR(2) = (GOGM1*POUTLET+TEMP)/ZSTAR(1)
C
      RETURN
      END
C
      subroutine ghost8vii(zin,zstar,work,ndim)
      IMPLICIT NONE
C
C     ghost state for subsonic inflow b.c. (compressible flow):
C     +) Mach number is taken from the interior
C     +) total pressure, total temperature and flow angles are imposed
C
      integer ndim
      double precision zin(*),zstar(*),work(*)
      double precision uavg(5)
C
      INCLUDE'constants.h'
      INCLUDE'ibc8.com'
      INCLUDE 'pfcgas.com'
      integer nerr,iopt
      double precision asqr,abar,mach,machsqr,kinetic,pres,dens,
     +temp,dens0
      character*67 errmsg
C
C     work(1:*):
C     p0/p_ref,t0/t_ref,unused,n_x,n_y,n_z
C
C     compute in the boundary node
C
      IF(NDIM.EQ.3)
     &UAVG(5) = ZIN(5)/ZIN(1) ! z component of the velocity vector
      UAVG(4) = ZIN(4)/ZIN(1) ! y component of the velocity vector
      UAVG(3) = ZIN(3)/ZIN(1) ! x component of the velocity vector
      UAVG(2) = ZIN(2)/ZIN(1) ! Total Enthalpy
      UAVG(1) = ZIN(1)*ZIN(1) ! Density
C
      KINETIC = UAVG(3)*UAVG(3) + UAVG(4)*UAVG(4)
      IF( NDIM .EQ. 3 )KINETIC = KINETIC + UAVG(5)*UAVG(5) 
      KINETIC = HALF * KINETIC
      ASQR = GM1 * ( UAVG(2) - KINETIC )
      IF( ASQR .LT. ZERO )THEN
         WRITE(ERRMSG(1:67),FMT=333)ASQR,-10
  333 FORMAT('GHOST8VII',1X,'Negative averaged sound speed ',F7.3,
     &       ' in element ',I8)
         NERR = 6
         IOPT = 1
         CALL SETERR(ERRMSG(1:67),67,NERR,IOPT)
      ENDIF
      ABAR      = SQRT(ASQR)
      MACHSQR   = TWO * KINETIC / ASQR
      MACH      = SQRT( MACHSQR )
C
      TEMP = (ONE+HALF*GM1*MACHSQR)
C
C     rho/rho^0 = (1+0.5*gm1*mach**2)**expn * p^0/T^0
C
C     work(2) = p^0
C     work(3) = T^0
C
      DENS0 = WORK(2)/WORK(3)
      DENS = ( TEMP**(-ONE/GM1) ) * DENS0
      PRES = ( ONE/TEMP**GOGM1 ) * WORK(2)
      ABAR = SQRT(GAM*PRES/DENS)
      ZSTAR(1) = SQRT(DENS)
      TEMP = ZSTAR(1) * ABAR * MACH
      ZSTAR(2) = ZSTAR(1) * GOGM1 * WORK(3)
      ZSTAR(3) = TEMP * WORK(4)
      ZSTAR(4) = TEMP * WORK(5)
      IF(NDIM.EQ.3)ZSTAR(5) = TEMP * WORK(6)
C
      RETURN
      END
C
      subroutine ghost8viii(zin,zstar,work,ndim)
      IMPLICIT NONE
C
C     ghost state for subsonic inflow b.c. (INcompressible flow):
C     +) velocity magnitude is taken from the interior
C     +) total pressure is imposed
C
      integer ndim
      double precision zin(*),zstar(*),work(*)
      integer nerr,iopt
      character*67 errmsg
C
      INCLUDE'constants.h'
      INCLUDE'ibc8.com'
      INTEGER MY_PE
      COMMON/MPICOM/MY_PE
      double precision temp
      INTEGER I1MACH
      EXTERNAL I1MACH
C
C     velocity magnitude is taken from the interior
C
      TEMP = ZIN(2)*ZIN(2) + ZIN(3)*ZIN(3)
      IF(NDIM.EQ.3) TEMP = TEMP +  ZIN(4)*ZIN(4)
C
      ZSTAR(1) = WORK(2) - HALF * TEMP
C
C     flow angles are imposed
C
      TEMP = SQRT(TEMP)
      ZSTAR(2) = TEMP * WORK(4)
      ZSTAR(3) = TEMP * WORK(5)
      IF(NDIM.EQ.3)ZSTAR(4) = TEMP * WORK(6)
C
      RETURN
      END
C  
C
      subroutine ghost2viii(zin,zstar,work,ndim)
      IMPLICIT NONE
C
C     ghost state for subsonic outflow b.c.:
C     +) velocity magnitude is taken from the interior
C     +) static pressure is imposed
C
      integer ndim
      double precision zin(*),zstar(*),work(*)
C
      INCLUDE'constants.h'
C
      ZSTAR(1) = WORK(1)
      ZSTAR(2) = ZIN(2)
      ZSTAR(3) = ZIN(3)
      IF(NDIM.EQ.3)ZSTAR(4) = ZIN(4)
C
      RETURN
      END
C 
      subroutine ghost2vii4Ar(zin,zstar,work,ndim)
      IMPLICIT NONE
C
C     ghost state for subsonic outflow b.c. (plasma flow):
C     +) static pressure is taken from the b.c.
C     +) all other primitive variables are taken from the interior
C
      integer ndim,isp
      double precision zin(*),zstar(*),work(*)
C
      INCLUDE 'constants.h'
      INCLUDE 'plasma.h'
      INCLUDE 'chem.h'
      INCLUDE 'commonv.inc'
      INCLUDE 'dofs.com'
      INCLUDE 'pfcgas.com'
      INclude 'streamplasma.com'
      double precision temp,POUTLET,Zrho,HFTOT
C
      POUTLET = WORK(1)
C
C     compute in the boundary node
C
      DO ISP = 1,NSP 
         ZSTAR(ISP) = ZIN(ISP) 
      ENDDO
      ZSTAR(IX) = ZIN(IX)
      ZSTAR(IY) = ZIN(IY)
      IF(NDIM.EQ.3) ZSTAR(IZ) = ZIN(IZ)
C
      TEMP       = ZIN(IX)*ZIN(IX) + ZIN(IY)*ZIN(IY)
      IF( NDIM .EQ. 3 )TEMP = TEMP + ZIN(IZ)*ZIN(IZ)
      TEMP = HALF * TEMP
C
      ZRHO = ZERO
      DO ISP = 1,NSP
         ZRHO = ZRHO + ZSTAR(ISP)
      ENDDO 
C
C     compute the formation enthalpy
C 
        HFTOT = ZERO
         DO ISP = 1,NSP
             HFTOT = HFTOT + ZIN(ISP) * HF0(ISP)
         ENDDO
         HFTOT = HFTOT / HREFP
C
      ZSTAR(IE) = (GOGM1*POUTLET+TEMP)/ZRHO + HFTOT
C
      RETURN
      END
C
      subroutine ghost8vii4Ar(zin,zstar,work,ndim)
      IMPLICIT NONE
C
C     ghost state for subsonic inflow b.c. (plasma flow):
C     +) Mach number is taken from the interior
C     +) total pressure, total temperature, mass concentrations and flow angles are imposed
C
      INCLUDE 'plasma.h'    
      INCLUDE 'chem.h'    
      INCLUDE 'commonv.inc' 
C
      integer ndim,nofvar,isp
      parameter(nofvar=NSP+4)
      double precision zin(*),zstar(*),work(*)
      double precision uavg(NOFVAR)
C
      INCLUDE 'constants.h'
      INCLUDE 'pfcgas.com'
      INCLUDE 'ibc8.com'
      INCLUDE 'dofs.com'
      INCLUDE 'streamplasma.com'
      INCLUDE 'ioplasma.com'
      integer nerr,iopt
      double precision asqr,abar,mach,machsqr,kinetic,pres,dens,
     +temp,dens0,zrho,zrstar,hftot
      character*67 errmsg
C
C     work(1:*):
C     p0/p_ref,t0/t_ref,unused,n_x,n_y,n_z
C
C     compute Zrho
C
      ZRHO=ZERO
      DO ISP=1,NSP
         ZRHO=ZRHO + ZIN(ISP)
      ENDDO
C
C     compute mixture formation enthalpy
C        
      HFTOT = ZERO
      DO ISP = 1,NSP
          HFTOT = HFTOT + ZIN(ISP) * HF0(ISP)
      ENDDO
      HFTOT = HFTOT / ZRHO / HREFP
C
C     compute in the boundary node
C
      IF(NDIM.EQ.3)
     &UAVG(IZ) = ZIN(IZ)/ZRHO ! z component of the velocity vector
      UAVG(IY) = ZIN(IY)/ZRHO ! y comiponent of the velocity vector
      UAVG(IX) = ZIN(IX)/ZRHO ! x component of the velocity vector
      UAVG(IE) = ZIN(IE)/ZRHO ! Total Enthalpy
      DO ISP=1,NSP
         UAVG(ISP) = ZIN(ISP)*ZRHO ! Single species density
      ENDDO
C
      KINETIC = UAVG(IX)*UAVG(IX) + UAVG(IY)*UAVG(IY)
      IF( NDIM .EQ. 3 )KINETIC = KINETIC + UAVG(IZ)*UAVG(IZ)
      KINETIC = HALF * KINETIC
      ASQR = GM1 * ( UAVG(IE) - KINETIC - HFTOT )
      IF( ASQR .LT. ZERO )THEN
         WRITE(ERRMSG(1:67),FMT=333)ASQR,-10
  333 FORMAT('GHOST8VII4Ar',1X,'Negative averaged sound speed ',F7.3,
     &       ' in element ',I8)
         NERR = 6
         IOPT = 1
         CALL SETERR(ERRMSG(1:67),67,NERR,IOPT)
      ENDIF
      ABAR      = SQRT(ASQR)
      MACHSQR   = TWO * KINETIC / ASQR
      MACH      = SQRT( MACHSQR )
C   
C
      TEMP = (ONE+HALF*GM1*MACHSQR) 
C
C     rho/rho^0 = (1+0.5*gm1*mach**2)**expn * p^0/T^0
C
C     work(2) = p^0
C     work(3) = T^0
C
C     DENS0 = WORK(2)/WORK(3) !for perfect gas RSTAR=1
      DENS0 = WORK(2)/WORK(3)/RMIXSTAR  !RMIXSTAR depends on mixture
C     
      DENS = ( TEMP**(-ONE/GM1) ) * DENS0
      PRES = ( ONE/TEMP**GOGM1 ) * WORK(2)
      ABAR = SQRT(GAM*PRES/DENS)
C
      ZRSTAR = SQRT(DENS)
C
Crpepe    Freestreem concentration are stored in ALPHA1
Crpepe    ALPHA1 = rho_i1/rho_1
C
      DO ISP=1,NSP
         ZSTAR(ISP) = ALPHA1(ISP)*ZRSTAR
      ENDDO
      TEMP = ZRSTAR * ABAR * MACH
      ZSTAR(IE) = ZRSTAR * (GOGM1 * RMIXSTAR * WORK(3) + HFTOT) !rpepe verificare equazioni
      ZSTAR(IX) = TEMP * WORK(4)
      ZSTAR(IY) = TEMP * WORK(5)
      IF(NDIM.EQ.3)ZSTAR(IZ) = TEMP * WORK(6)
C
      RETURN
      END

@


1.12
log
@Formation enthalpy error fixed
@
text
@d2 1
a2 1
C     $Id: vstate.f,v 1.11 2013/01/29 14:33:34 abonfi Exp tesistim $
d182 3
a184 3
      INCLUDE'constants.h'
      INCLUDE'plasma.h'
      INCLUDE'chem.h'
d186 1
d240 1
a240 1
      INCLUDE'constants.h'
d242 4
a245 3
      INCLUDE'ibc8.com'
      INCLUDE'streamplasma.com'
      INCLUDE'ioplasma.com'
d256 1
a256 1
      ZRHO=0.d0
a266 1
!      HFTOT = HFTOT * ZRHO / HREFP
@


1.11
log
@The adiabatic index is not any longer a parameter, but a variable
@
text
@d2 1
a2 1
C     $Id: vstate.f,v 1.10 2013/01/26 11:33:32 abonfi Exp abonfi $
d265 2
a266 1
      HFTOT = HFTOT * ZRHO / HREFP
@


1.10
log
@added support for Ar plasma
@
text
@d2 1
a2 1
C     $Id: vstate.f,v 1.9 2009/01/09 10:28:55 abonfi Exp $
d26 1
d59 1
d186 1
d205 1
a205 1
      ZRHO = 0.d0
d240 1
d261 1
a261 1
      HFTOT = 0d0
@


1.9
log
@version released at the time of the Dresden compressor
@
text
@d2 1
a2 1
C     $Id: vstate.f,v 1.7 2005/09/22 09:04:43 abonfi Exp $
d25 1
a25 1
      INCLUDE'constants'
d56 1
a56 1
      INCLUDE'constants'
d124 1
a124 1
      INCLUDE'constants'
d160 1
a160 1
      INCLUDE'constants'
d169 153
a321 1
C  
@


1.8
log
@changes suggested by Sergio, based on characteristic
variables for incompressible flow
@
text
@d2 1
a2 1
C     $Id: vstate.f,v 1.7 2005/09/22 09:04:43 abonfi Exp abonfi $
a124 1
      INCLUDE'chorin.com'
a125 1
C
d128 2
a129 4
      DOUBLE PRECISION TEMP,LPLUS,C,UDOTN,SDOTN,
     &BB,CC,DD,XX,X2
      INTEGER  k
      INTEGER  I1MACH
d132 1
a132 8
      SDOTN = WORK(4)*WORK(7) + WORK(5)*WORK(8)
      UDOTN =  ZIN(2)*WORK(7) +  ZIN(3)*WORK(8)
      IF(NDIM.EQ.3)THEN
         SDOTN = SDOTN + WORK(6)*WORK(9)
         UDOTN = UDOTN +  ZIN(4)*WORK(9)
      ENDIF
      C = SQRT( UDOTN*UDOTN + BETA*BETA )
      LPLUS = UDOTN + C
d134 2
a135 1
C     velocity magnitude is taken from the interior
d137 1
a137 16
      BB = SDOTN*SDOTN*LPLUS
      CC = 2.d0*SDOTN*SDOTN*(WORK(2)-ZIN(1)-LPLUS*UDOTN)
      DD = BB*BB+CC
      IF(DD.LT.0.d0)THEN
         WRITE(6,*)'Negative argument to SQRT = ',DD
         DD = 0.d0
      ELSE
         DD = SQRT(DD)
      ENDIF
      XX = BB - DD
      X2 = BB + DD

      ZSTAR(1) = ZIN(1) + LPLUS * (UDOTN-XX)
      TEMP = XX/SDOTN
!     ZSTAR(1) = ZIN(1) + LPLUS * (UDOTN-X2)
!     TEMP = X2/SDOTN
d141 1
a145 19
      goto 456
      write(6,*)'p0(1) --> ',WORK(2)
      write(6,*)'check on dd(*) --> ',DD*DD,LPLUS*
     &(LPLUS-2.d0*UDOTN)+2.d0*(WORK(2)-ZIN(1))
      write(6,*)'check on dd(*) --> ',DD,C
      write(6,*)'check on p0(1) --> ',ZSTAR(1)+0.5d0*TEMP*TEMP
      write(6,*)'un(1+/-) un(2) q = ',XX,X2,UDOTN,TEMP
      write(6,*)'un un+2*c q = ',UDOTN,UDOTN+2.d0*C,
     &sqrt(2.d0*(WORK(2)-ZIN(1)))
      write(6,*)' s.n, c, l+, b = ', SDOTN,C,LPLUS,BETA
      write(6,*)' Z(in),  = ',(ZIN(k),k=1,ndim+1)
      write(6,*)' Z(*),  = ',(ZSTAR(k),k=1,ndim+1)
      write(6,*)'check = ',XX*(XX-2.d0*SDOTN*SDOTN*LPLUS)
     &-2.d0*SDOTN*SDOTN*(WORK(2)-ZIN(1)-LPLUS*UDOTN)
      write(6,*)'check = ',X2*(X2-2.d0*SDOTN*SDOTN*LPLUS)
     &-2.d0*SDOTN*SDOTN*(WORK(2)-ZIN(1)-LPLUS*UDOTN)
      pause
 456  continue
C
@


1.7
log
@removed unused arguments
@
text
@d2 1
a2 1
C     $Id: vstate.f,v 1.6 2005/09/16 16:03:44 abonfi Exp abonfi $
d125 1
d127 1
d130 4
a133 2
      double precision temp
      INTEGER I1MACH
d136 9
d147 16
a162 4
      TEMP = ZIN(2)*ZIN(2) + ZIN(3)*ZIN(3)
      IF(NDIM.EQ.3) TEMP = TEMP +  ZIN(4)*ZIN(4)
C
      ZSTAR(1) = WORK(2) - HALF * TEMP
a165 1
      TEMP = SQRT(TEMP)
d170 19
@


1.6
log
@unified calculation of the incompressible inflow
condition, regardess of whether a profile is imposed
this was made in release 0.11.10 of the code
@
text
@d2 1
a2 1
C     $Id: vstate.f,v 1.5 2005/08/08 11:15:57 abonfi Exp abonfi $
d5 1
a5 1
C     subroutine ghost*(zin,inode,zstar,flowdir,work,ndim)
d15 1
a15 1
      subroutine ghost2vii(zin,inode,zstar,flowdir,work,ndim)
d22 2
a23 2
      integer ndim,inode
      double precision zin(*),zstar(*),flowdir(ndim),work(*)
d45 1
a45 1
      subroutine ghost8vii(zin,inode,zstar,flowdir,work,ndim)
d52 2
a53 2
      integer ndim,inode
      double precision zin(*),zstar(*),flowdir(ndim),work(*)
d112 1
a112 1
      subroutine ghost8viii(zin,inode,zstar,flowdir,work,ndim)
d119 2
a120 2
      integer ndim,inode
      double precision zin(*),zstar(*),flowdir(ndim),work(*)
d150 1
a150 1
      subroutine ghost2viii(zin,inode,zstar,flowdir,work,ndim)
d157 2
a158 2
      integer ndim,inode
      double precision zin(*),zstar(*),flowdir(ndim),work(*)
@


1.5
log
@the number of entries defining inflow bcs has changed
with code version 0.11.9
@
text
@d2 1
a2 1
C     $Id: vstate.f,v 1.4 2003/11/16 00:25:57 aldo Exp $
a131 6
C     does two different things depending on whether a uniform
C     or non-uniform total pressure/velocity profile are given
C     in the inlet
C
      IF(.NOT.LREAD)THEN
C
a145 28
      ELSE
C
C     total pressure (P)
C
C     assumes p uniform on the inlet plane (ibc=8): then:
C     P(y) - p = (P(ref) - p) * (q/q(ref))**2; q = V.V
C     the eqn is non-dimensionalised by P(ref)
C
C     kinetic energy
      TEMP = WORK(4)**2 * (1.d0-ZIN(1))
      IF( TEMP .LT. ZERO )THEN
C        WRITE(ERRMSG(1:42),FMT=333)TEMP
         WRITE(I1MACH(4),FMT=333)TEMP,INODE,MY_PE
  333 FORMAT('GHOST8VIII',1X,'Negative kinetic energy ',E9.4,
     +1X,'node ',I7,1X,'PE #',1X,I4)
C        NERR = 6
C        IOPT = 1
C        CALL SETERR(ERRMSG(1:42),42,NERR,IOPT)
         TEMP = 0.d0
      ELSE
         TEMP = SQRT(2.d0*TEMP)
      ENDIF
      ZSTAR(1) = ZIN(1)
      ZSTAR(2) = TEMP * WORK(4)
      ZSTAR(3) = TEMP * WORK(5)
      IF(NDIM.EQ.3)ZSTAR(4) = TEMP * WORK(6)
      ENDIF
c
@


1.4
log
@repaired a FORMAT statement
@
text
@d2 1
a2 1
C     $Id: vstate.f,v 1.3 2002/08/24 09:52:56 abonfi Exp aldo $
d58 1
a58 1
      integer nerr,iopt,i
d60 1
a60 1
     +temp
d63 3
d69 3
a71 3
     &UAVG(5) = ZIN(5)/ZIN(1) ! z componenet of the velocity vector
      UAVG(4) = ZIN(4)/ZIN(1) ! y componenet of the velocity vector
      UAVG(3) = ZIN(3)/ZIN(1) ! x componenet of the velocity vector
d95 6
a100 2
      DENS = ( TEMP**(-ONE/GM1) )
      PRES = ( ONE/TEMP**GOGM1 )
d104 4
a107 4
      ZSTAR(2) = ZSTAR(1) * GOGM1
      ZSTAR(3) = TEMP * FLOWDIR(1)
      ZSTAR(4) = TEMP * FLOWDIR(2)
      IF(NDIM.EQ.3)ZSTAR(5) = TEMP * FLOWDIR(3)
d121 1
a121 1
      integer nerr,iopt,i
d148 3
a150 3
      ZSTAR(2) = TEMP * FLOWDIR(1)
      ZSTAR(3) = TEMP * FLOWDIR(2)
      IF(NDIM.EQ.3)ZSTAR(4) = TEMP * FLOWDIR(3)
d175 3
a177 3
      ZSTAR(2) = TEMP * FLOWDIR(1)
      ZSTAR(3) = TEMP * FLOWDIR(2)
      IF(NDIM.EQ.3)ZSTAR(4) = TEMP * FLOWDIR(3)
@


1.3
log
@removed unused argument NOFVAR
@
text
@d2 1
a2 1
C     $Id: vstate.f,v 1.2 2002/08/13 07:13:33 abonfi Exp abonfi $
d159 1
a159 1
     +1X,'node 'I7,1X,'PE #',1X,I4)
@


1.2
log
@add variable inlet profile and other changes
@
text
@d2 1
a2 1
C     $Id: vstate.f,v 1.1 2001/07/04 06:54:09 abonfi Exp abonfi $
d5 1
a5 1
C     subroutine ghost*(zin,inode,zstar,flowdir,work,ndim,nofvar)
d11 1
a11 1
C                   un-changed on output
d15 1
a15 1
      subroutine ghost2vii(zin,inode,zstar,flowdir,work,ndim,nofvar)
d22 2
a23 2
      integer ndim,nofvar,inode
      double precision zin(nofvar),zstar(nofvar),flowdir(ndim),work(*)
d45 1
a45 1
      subroutine ghost8vii(zin,inode,zstar,flowdir,work,ndim,nofvar)
d52 2
a53 2
      integer ndim,nofvar,inode
      double precision zin(nofvar),zstar(nofvar),flowdir(ndim),work(*)
d105 1
a105 1
      subroutine ghost8viii(zin,inode,zstar,flowdir,work,ndim,nofvar)
d112 2
a113 2
      integer ndim,nofvar,inode
      double precision zin(nofvar),zstar(nofvar),flowdir(ndim),work(*)
d177 1
a177 1
      subroutine ghost2viii(zin,inode,zstar,flowdir,work,ndim,nofvar)
d184 2
a185 2
      integer ndim,nofvar,inode
      double precision zin(nofvar),zstar(nofvar),flowdir(ndim),work(*)
@


1.1
log
@Initial revision
@
text
@d2 2
d5 1
a5 1
C     subroutine ghost*(zin,zstar,flowdir,work,ndim,nofvar)
d7 1
a7 1
C     used to set the starred state for inflow/outflow b.c.s
d15 1
a15 4
C     $Id:$
C
C
      subroutine ghost2vii(zin,zstar,flowdir,work,ndim,nofvar)
d22 1
a22 1
      integer ndim,nofvar
a28 2
caldo call dcopy(nofvar,zin,1,zstar,1)
caldo return
d45 1
a45 1
      subroutine ghost8vii(zin,zstar,flowdir,work,ndim,nofvar)
d52 1
a52 1
      integer ndim,nofvar
d57 1
d87 7
a93 5
c     write(6,*)(uavg(i),i=1,nofvar)

      TEMP = ONE+HALF*GM1*MACHSQR
      DENS = TEMP**(-ONE/GM1)
      PRES = ONE/TEMP**GOGM1
a96 1
c     write(6,*)abar,machsqr,pres,dens,zstar(1),temp
d105 1
a105 1
      subroutine ghost8viii(zin,zstar,flowdir,work,ndim,nofvar)
d112 1
a112 1
      integer ndim,nofvar
d114 2
d118 3
d122 6
d129 1
a129 1
C     velocity magnitude
d131 2
d136 1
a136 1
      ZSTAR(1) = ONE - HALF * TEMP
d138 1
a138 1
C     velocity magnitude
d145 28
d177 1
a177 1
      subroutine ghost2viii(zin,zstar,flowdir,work,ndim,nofvar)
d184 1
a184 1
      integer ndim,nofvar
@
