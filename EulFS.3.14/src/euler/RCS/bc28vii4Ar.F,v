head	1.3;
access;
symbols
	release3_14_0:1.3
	release3_13_0:1.3
	release3_12_0:1.3
	release3_11_0:1.3
	release3_10_0:1.3
	release3_8_0:1.3
	release3_7_1:1.3
	release3_7_0:1.2
	release3_4_5:1.2
	release3_4_4:1.2
	release3_4_3:1.2
	release3_4_2:1.2
	release3_4_1:1.2
	release3_4_0:1.2
	release3_3_5:1.2
	release3_3_4:1.1
	release3_3_3:1.1
	release3_3_2:1.1
	release3_3_1:1.1;
locks; strict;
comment	@c @;


1.3
date	2020.03.28.09.51.14;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	2013.05.02.16.02.35;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2013.01.26.12.29.24;	author abonfi;	state Exp;
branches;
next	;


desc
@Inflow/outflow boundary conditions for Argon
@


1.3
log
@renamed subroutine call
@
text
@      SUBROUTINE BC28VII4Ar(IELEM,VCN,VCZ,VCB,PCN,KPOS,NODRES,TSTEP,
     +                   NDIM,NOFVERT,NOFVAR,IBC)
C
C     $Id: bc28vii4Ar.F,v 1.2 2013/05/02 16:02:35 abonfi Exp abonfi $ 
C
C#define PRINT
C
      IMPLICIT NONE
C
C     Purpose:
C     -------
C     compute in-outflow boundary conditions for plasma
C     flows (ghost cell approach)
C     here we use conservative variables
C
      include 'paramt.h'
      include 'constants.h'
      include 'implicit.h'
      include 'bnd.h'
      include 'ibc8.com'
      include 'plasma.h'
      include 'stream.com'
      include 'time.com'
      include 'three.com'
C
      INTEGER MAXNORDER,MAXORDSQR,LENA,LENB,LENC
      PARAMETER(MAXNORDER=NSP+4,MAXORDSQR=MAXNORDER*MAXNORDER)
      PARAMETER(LENA=MAXNOFEQN*MAXNOFEQN,LENB=LENA*(MAXNOFVERT-1))
      PARAMETER(LENC=LENA+LENA+LENB)
C
C     .. Scalar Arguments ..
      INTEGER IELEM,NDIM,NOFVAR,NOFVERT,IBC,i,j,IFAIL
C
C     On entry:
C     --------
C     IELEM  current boundary element
C     NDIM   dimension of the space (2 or 3)
C     NOFVAR number of variables (degrees of freedom)
C            in each meshpoint
C     NOFVERT number of vertices per element (=NDIM+1, since
C             only triangles or tetrahedra are t) = value(rr,rcline,zb,allowed)
C
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION KPOS(NOFVAR,NOFVAR,*),
     +       NODRES(NOFVAR,*),TSTEP(NOFVAR,*),PCN(nVarsInlet,NOFVERT),
     +       VCN(NDIM,NOFVERT),VCZ(NOFVAR,NOFVERT),VCB(NDIM,NOFVERT)
C
C     On entry:
C     --------
C     VCN(1:NDIM,1:NOFVERT) cartesian components of the normals 
C                           to the element sides/faces
C                           the normal to the boundary face need
C                           to be stored in VCN(1:NDIM,NOFVERT)
C     VCZ(1:NOFVAR,1:NOFVERT) dependent variables in the vertices
C                           of the current (IELEM) element
C                           the freestream values need
C                           to be stored in VCZ(1:NOFVAR,NOFVERT)
C     Upon return:
C     -----------
C     KPOS(1:NOFVAR,1:NOFVAR,1:NOFVERT-1) positive inflow parameters
C                   in the NOFVERT-1 vertices of the boundary face
C     NODRES(1:NOFVAR,1:NOFVERT-1) nodal residual due to the incoming
C                   characteristics in the NOFVERT-1 vertices 
C                   of the boundary face
C     TSTEP(NOFVAR,1:NOFVERT) contribution to the time-step in the
C                   vertices of the current element
C
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION VOLUME,HELP
      DOUBLE PRECISION ddot
      INTEGER IVAR,IVERT,ILOCA,NORDER,NOFEQN
C     ..
C     .. Local Arrays ..
      DOUBLE PRECISION DUMMY(LENA),KMAT(MAXORDSQR),KNEG(MAXORDSQR),
     +                 VLEFT(MAXORDSQR),VRIGHT(MAXORDSQR),
     +                 WNEG(MAXNORDER),WPOS(MAXNORDER),WR(MAXNORDER),
     +                 DVDZ(LENA),DUDS(LENA),DUDZ(LENA),
     +                 TEMPA(MAXNOFVAR*MAXNOFVAR),
     +                 TEMPB(MAXNOFVAR*MAXNOFVAR),
     +                 DZDU(LENB),WORK(6),wksp(NMAX*NMAX)
C
      DATA DVDZ,DUDZ,DZDU,WORK/LENC*ZERO,6*ONE/
C     ..
C     .. External Subroutines ..
      EXTERNAL DAXPY,DCOPY,DGEMM,LINEARIZE,MATSPLITXII,DDOT
C     ..
#ifdef PRINT
      CALL R8Mat_Print('General',' ',nVarsInlet,NOFVERT,PCN,
     +nVarsInlet,'PCN matrix ',IFAIL)
#endif
C
      VOLUME = ONE
      CALL DINIT((NOFVAR*NOFVERT)**2,ZERO,KPOS,1)
C
      DO 55 IVERT = 1,NOFVERT - 1 ! loop over the d vertices of the bndry face
C
C     static pressure (outlet bcs)
C
         WORK(1) = POUTLET
C
C     resp. total pressure, total temperature, n_x, n_y, n_z
C
C     Verificare le dimensioni di PCN e WORK per il plasma 
         WORK(2) = PCN(1,IVERT)
         WORK(3) = PCN(2,IVERT)
         WORK(4) = PCN(4,IVERT)
         WORK(5) = PCN(5,IVERT)
         WORK(6) = PCN(6,IVERT)
C
         IF(IBC.EQ.BC_TYPE_SUBS_OUTLET)THEN
            CALL GHOST2VII4Ar(VCZ(1,IVERT),VCZ(1,NOFVERT),WORK,NDIM)
         ELSEIF(IBC.EQ.BC_TYPE_SUBS_INLET)THEN
            CALL GHOST8VII4Ar(VCZ(1,IVERT),VCZ(1,NOFVERT),WORK,NDIM)
         ENDIF
C
#ifdef PRINT
         write(6,*)' ibc is ',ibc,ivert,ielem
         CALL R8Mat_Print('General',' ',NOFVAR,NOFVERT,VCZ,
     +NOFVAR,'VCZ matrix ',IFAIL)
         do i = 1,nofvar
         write(6,FMT="(4(F20.12,1X))")(VCZ(i,j),j=1,nofvert)
         enddo
#endif
C
         CALL LINEARIZE(IELEM,LALE,VCN,VCB,NDIM,NOFVERT,VCZ,NOFVAR,
     2                  VOLUME)
C
         CALL PARM2PRIM4Ar(NDIM,IELEM)
C
         NOFEQN=NDIM+1+NSP
         NORDER=NOFEQN
         CALL MATSPLITXII(IELEM,NDIM,NORDER,VCN(1,NOFVERT),TEMPB,NORDER,
     +                 KMAT,KPOS,KNEG,VLEFT,VRIGHT,NORDER,WR,WPOS,WNEG,
     +                 .TRUE.)
C
C
#ifdef PRINT
      CALL R8Mat_Print('General',' ',NOFVAR,NOFVAR,KPOS(1,1,IVERT),
     +NOFVAR,'KPOS(+) matrix ',IFAIL)
#endif
C
C     timestep
C
         HELP = ZERO
         DO IVAR = 1,NORDER
            IF( CHAR_TIMESTEPPING )THEN 
               HELP = MAX(HELP,WPOS(IVAR))
            ELSE
               HELP = HELP + WPOS(IVAR)
            ENDIF
         ENDDO
         DO IVAR = 1,NORDER
            TSTEP(IVAR,IVERT) = HELP
         ENDDO
C
C     Compute transformation matrices
C
         CALL PARM2CONS4Ar(ZAVG,DUDZ,NOFEQN,NDIM)
C
C
C     K(+) := K(+) * dU/dZ is stored in TEMPA(1:NOFEQN,1:NOFEQN)r.F
C
         CALL DGEMM('No','No',NOFEQN,NOFEQN,NOFEQN,ONE,KPOS(1,1,1),
     +           NOFEQN,DUDZ,NOFEQN,ZERO,TEMPA,NOFEQN)
C
#ifdef PRINT
      CALL R8Mat_Print('General',' ',NOFEQN,NOFEQN,DUDZ,
     +NOFEQN,'dUdZ matrix ',IFAIL)
      CALL R8Mat_Print('General',' ',NOFEQN,NOFEQN,TEMPA,
     +NOFEQN,'K(+) * dU/dZ  matrix ',IFAIL)
#endif
C
C     K(+) := dU/dV * K(+) * dV/dZ
C
C      CALL DGEMM('No','No',NOFEQN,NOFEQN,NOFEQN,ONE,TEMPB,NOFEQN,
C     +           DVDZ,NOFEQN,ZERO,TEMPA,NOFEQN)
C#ifdef PRINT
C      CALL R8Mat_Print('General',' ',NOFEQN,NOFEQN,TEMPA,
C     +            NOFEQN,'TEMPA matrix ',IFAIL)
C#endif
C
C     Looping over the vertices of the boundary face;
C     notice that the vertex facing the boundary face is NOFVERT
C     and is skipped in the following loop
C     Compute U(i) := [U(i) - U(*)] and store in TEMPB
C
         DO 245 IVAR = 1, NOFEQN
            wksp((IVERT-1)*NOFVAR+IVAR) = 
     +      VCZ(IVAR,IVERT) - VCZ(IVAR,NOFVERT) 
  245    CONTINUE
C
C
C     Compute -K(+)*[U(i) - U(*)]
C
         CALL DGEMV('No',NOFEQN,NOFEQN,-ONE,TEMPA,NOFEQN,
     +     wksp((IVERT-1)*NOFVAR+1),1,ZERO,NODRES(1,IVERT),1)
C
C     K(+) := K(+) * 2. * (dZ/dU)(ivert)
C
         ILOCA = (IVERT-1)*NOFEQN*NOFEQN+1
         IF(TIMEIMPL) 
     +   CALL MatdZdU4Ar(VCZ(1,IVERT),DZDU(ILOCA),NDIM,NOFEQN)
         CALL DGEMM('No','No',NOFEQN,NOFEQN,NOFEQN,TWO,TEMPA,NOFEQN,
     +               DZDU(ILOCA),NOFEQN,ZERO,KPOS(1,1,IVERT),
     +               NOFVAR)
#ifdef PRINT
         write(6,*)' ibc is ',ibc
         CALL R8Mat_Print('General',' ',NOFVAR,NOFVAR,KPOS(1,1,IVERT),
     +NOFVAR,'K(+) matrix ',IFAIL)
       pause    
#endif
C
   55 CONTINUE ! End loop over the vertices
C
#ifdef PRINT
      CALL R8Mat_Print('General',' ',NOFVAR,NOFVERT-1,wksp,
     +NOFVAR,'delta matrix ',IFAIL)
      CALL R8Mat_Print('General',' ',NOFVAR,NOFVERT,NODRES,
     +NOFVAR,'Residual matrix ',IFAIL)
       write(6,*)ivert,ielem
      pause
#endif
C
      RETURN

      END
@


1.2
log
@characteristic timestepping: allowable timestep
is kept separately for each dof
@
text
@d4 1
a4 1
C     $Id: bc28vii4Ar.F,v 1.1 2013/01/26 12:29:24 abonfi Exp abonfi $ 
d90 1
a90 1
      CALL X04CAF('General',' ',nVarsInlet,NOFVERT,PCN,
d120 1
a120 1
         CALL X04CAF('General',' ',NOFVAR,NOFVERT,VCZ,
d140 1
a140 1
      CALL X04CAF('General',' ',NOFVAR,NOFVAR,KPOS(1,1,IVERT),
d169 1
a169 1
      CALL X04CAF('General',' ',NOFEQN,NOFEQN,DUDZ,
d171 1
a171 1
      CALL X04CAF('General',' ',NOFEQN,NOFEQN,TEMPA,
d180 1
a180 1
C      CALL X04CAF('General',' ',NOFEQN,NOFEQN,TEMPA,
d210 1
a210 1
         CALL X04CAF('General',' ',NOFVAR,NOFVAR,KPOS(1,1,IVERT),
d218 1
a218 1
      CALL X04CAF('General',' ',NOFVAR,NOFVERT-1,wksp,
d220 1
a220 1
      CALL X04CAF('General',' ',NOFVAR,NOFVERT,NODRES,
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
C     $Id: bc28vii.F,v 1.11 2009/01/09 10:25:52 abonfi Exp abonfi $ 
d71 1
a71 1
      DOUBLE PRECISION SUM,VOLUME
a83 1
C      DATA DVDZ,DUDZ,DUDS,DZDU,WORK/LENC*ZERO,6*ONE/
d97 1
a97 1
      DO 55 IVERT = 1,NOFVERT - 1
d101 1
a101 1
      WORK(1) = POUTLET
d106 5
a110 5
      WORK(2) = PCN(1,IVERT)
      WORK(3) = PCN(2,IVERT)
      WORK(4) = PCN(4,IVERT)
      WORK(5) = PCN(5,IVERT)
      WORK(6) = PCN(6,IVERT)
d112 1
a112 1
      IF(IBC.EQ.BC_TYPE_SUBS_OUTLET)THEN
d114 1
a114 1
      ELSEIF(IBC.EQ.BC_TYPE_SUBS_INLET)THEN
d116 1
a116 1
      ENDIF
d119 2
a120 2
      write(6,*)' ibc is ',ibc,ivert,ielem
      CALL X04CAF('General',' ',NOFVAR,NOFVERT,VCZ,
d122 3
a124 3
      do i = 1,nofvar
      write(6,FMT="(4(F20.12,1X))")(VCZ(i,j),j=1,nofvert)
      enddo
d127 2
a128 2
      CALL LINEARIZE(IELEM,LALE,VCN,VCB,NDIM,NOFVERT,VCZ,NOFVAR,
     2VOLUME)
d130 1
a130 1
      CALL PARM2PRIM4Ar(NDIM,IELEM)
d132 3
a134 3
      NOFEQN=NDIM+1+NSP
      NORDER=NOFEQN
      CALL MATSPLITXII(IELEM,NDIM,NORDER,VCN(1,NOFVERT),TEMPB,NORDER,
a137 20
C      SUM = DDOT(NDIM,UAVG(3),1,VCN(1,NOFVERT),1)/REAL(NDIM)
C      KPOS(1,1,IVERT) = HALF*(SUM+ABS(SUM))
C
C     Copy the matrix in symmetrizing variables into TEMPA
C
!     ILOCA = 0
!     DO 3 J = 2,NOFEQN
caldo    KPOS(1,J,IVERT) = ZERO
caldo    KPOS(J,1,IVERT) = ZERO
!        DO 3 I = 2,NOFEQN
!           ILOCA = ILOCA + 1
!           KPOS(I,J,IVERT) = TEMPA(ILOCA)
!   3 CONTINUE
!      CALL MATINS(KPOS(1,1,IVERT),NOFVAR,TEMPA,NORDER,1,1,1)
C
C      do j = 1,norder
C      do i = 1,norder
C         kpos(i+1,j+1,1) = tempa((j-1)*norder+i)
C      enddo
C      enddo
a139 2
C      CALL X04CAF('General',' ',NORDER,NORDER,TEMPA,
C     +NORDER,'Reduced K matrix ',IFAIL)
d146 11
a156 4
      SUM = ZERO
      DO 4 IVAR = 1,NORDER
          SUM = SUM + WPOS(IVAR)
    4 CONTINUE
d160 1
a160 14
C      CALL SYMM2CONS(ZAVG,DUDS,NOFEQN,NDIM)
C
C      CALL PARM2SYMM(ZAVG,DVDZ,NOFEQN,NDIM)
C
      CALL PARM2CONS4Ar(ZAVG,DUDZ,NOFEQN,NDIM)
C
C#ifdef PRINT
C      CALL X04CAF('General',' ',NOFEQN,NOFEQN,DUDS,
C     +NOFEQN,'DUDS matrix ',IFAIL)
C      CALL X04CAF('General',' ',NOFEQN,NOFEQN,DVDZ,
C     +NOFEQN,'DVDZ matrix ',IFAIL)
C#endif
C
C     K(+) := dU/dV * K(+)
a161 2
C      CALL DGEMM('No','No',NOFEQN,NOFEQN,NOFEQN,ONE,DUDS,NOFEQN,
C     +           KPOS(1,1,IVERT),NOFVAR,ZERO,TEMPB,NOFEQN)
d165 2
a166 2
      CALL DGEMM('No','No',NOFEQN,NOFEQN,NOFEQN,ONE,KPOS(1,1,1),NOFEQN,
     +           DUDZ,NOFEQN,ZERO,TEMPA,NOFEQN)
d189 4
a192 5
      DO 245 IVAR = 1, NOFEQN
         wksp((IVERT-1)*NOFVAR+IVAR) = 
     +   VCZ(IVAR,IVERT) - VCZ(IVAR,NOFVERT) 
  245 CONTINUE
C
a193 1
          TSTEP(1,IVERT) = SUM
d197 1
a197 1
      CALL DGEMV('No',NOFEQN,NOFEQN,-ONE,TEMPA,NOFEQN,
a199 10
c     do i = 1,nofvar
c        s=0.d0
c        do j = 1,nofvar
c          s=s + tempa((j-1)*nofvar+i)*wksp((IVERT-1)*NOFVAR+j)
c        enddo
c        nodres(i,ivert)=-s
c     enddo
C
cbug  IF(.NOT.TIMEIMPL)RETURN
C
d202 4
a205 4
          ILOCA = (IVERT-1)*NOFEQN*NOFEQN+1
          IF(TIMEIMPL) 
     +    CALL MatdZdU4Ar(VCZ(1,IVERT),DZDU(ILOCA),NDIM,NOFEQN)
          CALL DGEMM('No','No',NOFEQN,NOFEQN,NOFEQN,TWO,TEMPA,NOFEQN,
d209 2
a210 2
      write(6,*)' ibc is ',ibc
      CALL X04CAF('General',' ',NOFVAR,NOFVAR,KPOS(1,1,IVERT),
a211 2
C      CALL X04CAF('General',' ',NOFVAR,NOFVert,VCZ,
C     +NOFVAR,'VCZ matrix ',IFAIL)
d214 3
a216 1
   55 CONTINUE
@
