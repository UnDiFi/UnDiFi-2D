head	1.6;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.6
	release3_13_0:1.6
	release3_12_0:1.6
	release3_11_0:1.6
	release3_10_0:1.6
	release3_8_0:1.6
	release3_7_1:1.6
	release3_7_0:1.5
	release3_4_5:1.5
	release3_4_4:1.5
	release3_4_3:1.5
	release3_4_2:1.5
	release3_4_1:1.5
	release3_4_0:1.5
	release3_3_5:1.5
	release3_3_4:1.5
	release3_3_3:1.5
	release3_3_2:1.5
	release3_3_1:1.5
	release3_3_0:1.4;
locks; strict;
comment	@c @;


1.6
date	2020.03.28.09.51.15;	author abonfi;	state Exp;
branches;
next	1.5;

1.5
date	2013.01.26.11.39.21;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2012.12.20.10.49.35;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	99.12.28.08.10.45;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	98.04.07.12.55.04;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	97.11.29.09.31.42;	author aldo;	state Exp;
branches;
next	;


desc
@Analytical matrix splitting for Pseudo-compressible Euler eqns. in primitive variables
@


1.6
log
@renamed subroutine call
@
text
@!> \copydoc MatSplitIX()
      SUBROUTINE MatSplitVIII(IELEM,NDIM,NORDER,VECN,
     +JacobianMatrix,LDJ,KMAT,KPOS,KNEG,VLEFT,VRIGHT,LDA,
     +WR,LPOS,LNEG,EIGENDECO)
C
C     $Id: matsplVIII.F,v 1.5 2013/01/26 11:39:21 abonfi Exp abonfi $
C
C
C     Subroutine to compute the generalized inflow parameters
C     for the UNpreconditioned pseudo-compressible (incompressible)
C     Euler equations
C     Positive and negative inflow parameters are normally
C     computed using their analytical expressions. 
C     if the flag DEBUG is defined they are also computed through
C     their eigenvector decomposition K = R \Lambda L
C     and the two are compared for debugging purposes
C
C
      IMPLICIT NONE
C
C#define DEBUG
C
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
C
      INCLUDE 'three.com'
      INCLUDE 'chorin.com'
      INCLUDE 'flags.com'
C
C
      INTEGER   IELEM,NDIM,NORDER,LDA,LDJ
      LOGICAL   EIGENDECO
C
      DOUBLE PRECISION VECN(*)
      DOUBLE PRECISION JacobianMatrix(LDJ,*)
      DOUBLE PRECISION KMAT(LDA,*),KPOS(LDA,*),KNEG(LDA,*),
     >       VLEFT(LDA,*),VRIGHT(LDA,*),WR(*),LPOS(*),LNEG(*)
C
      DOUBLE PRECISION UDOTM,AREAINV,AREA,CSQRINV,CNST,
     >                 CSQR,C,LPLUS,LMINS,ANX,ANY,ANZ
C
      DOUBLE PRECISION VPOSX,VPOSY,VPOSZ,WX,WY,WZ
      DOUBLE PRECISION VNEGX,VNEGY,VNEGZ,L0POS,L0NEG,
     +                 CINV,TEMPX,TEMPY,TEMPZ,TEMPA,TEMPB,TEMP
C
#ifdef DEBUG
      INTEGER I,J,K,IDIM,IFAIL
      LOGICAL LFLAG,WARNA,WARNB
      INTEGER TABLE(3,3),INDX
      DOUBLE PRECISION VECM(3),VECS(3),VECT(3)
      DOUBLE PRECISION WKSPA(NMAX,NMAX),WKSPB(NMAX,NMAX)
      DOUBLE PRECISION WKSPC(NMAX,NMAX),WKSPD(NMAX,NMAX)
      DOUBLE PRECISION WORK1(NMAX,NMAX),WORK2(NMAX,NMAX)
      DOUBLE PRECISION KPLUS(4,4),KMINS(4,4)
      DOUBLE PRECISION SURF,SUM1,SUM2,UDOTS,UDOTT,TEMP1
C
      DATA (table(1,j),j=1,3) / 1,0,0 /
      DATA (table(2,j),j=1,3) / 0,1,0 /
      DATA (table(3,j),j=1,3) / 0,0,1 /
      DATA LFLAG / .FALSE. /
C
      DOUBLE PRECISION DDOT,DNRM2
      INTEGER   ISDMIN
      LOGICAL   UNITMAT,NULLMAT
      EXTERNAL  ISDMIN,DDOT,DNRM2,UNITMAT,NULLMAT
#endif
C
      INTRINSIC DSQRT
C
      DATA ANX,ANY,ANZ / 3*ZERO /
C
C     UDOTM is the dot product between the velocity vector
C           and the face normal
C
      ANX = VECN(1)/NDIM
      ANY = VECN(2)/NDIM
      UDOTM = ZAVG(2) * ANX + ZAVG(3) * ANY
      IF( NDIM .EQ. 3 )THEN
         ANZ = VECN(3)/NDIM
         UDOTM = UDOTM + ZAVG(4) * ANZ
      ENDIF
C
C     Jacobian Matrix for primitive variables ..
C
      KMAT(1,1) = ZERO
      KMAT(1,2) = BETA*ANX
      KMAT(1,3) = BETA*ANY
C
      KMAT(2,1) = ANX
      KMAT(2,2) = ZAVG(2) * ANX + UDOTM
      KMAT(2,3) = ZAVG(2) * ANY
C
      KMAT(3,1) = ANY
      KMAT(3,2) = ZAVG(3) * ANX
      KMAT(3,3) = ZAVG(3) * ANY + UDOTM
C
      IF( NDIM .EQ. 3 )THEN
          KMAT(1,4) = BETA*ANZ
          KMAT(2,4) = ZAVG(2) * ANZ
          KMAT(3,4) = ZAVG(3) * ANZ
          KMAT(4,1) = ANZ
          KMAT(4,2) = ZAVG(4) * ANX
          KMAT(4,3) = ZAVG(4) * ANY
          KMAT(4,4) = ZAVG(4) * ANZ + UDOTM
      ENDIF
C
      IF( EIGENDECO .EQV. .FALSE. )RETURN
C
      AREA = VECN(1)*VECN(1)+VECN(2)*VECN(2)
      IF( NDIM .EQ. 3 )AREA = AREA + VECN(3)*VECN(3)
      AREA = SQRT(AREA)
      AREAINV = ONE/AREA
C
      AREA = AREA/NDIM
C
C     Some useful constants ..
C
      UDOTM = UDOTM / AREA
      CSQR = UDOTM * UDOTM + BETA
      C = DSQRT( CSQR )
      CSQRINV = ONE/CSQR
      CINV = ONE/C
C
      LPLUS = UDOTM + C
      LMINS = UDOTM - C
C
C     Eigenvalues ..
C
      WR(1) = AREA * UDOTM
      WR(2) = AREA * LMINS
      WR(3) = AREA * LPLUS
      WR(4) = AREA * UDOTM
C
#ifdef DEBUG
      IF( NDIM .EQ. 2 )THEN
         VECM(1) = VECN(1) * AREAINV
         VECM(2) = VECN(2) * AREAINV
         VECM(3) = ZERO
         VECS(1) = - VECM(2)
         VECS(2) = VECM(1)
         VECS(3) = ZERO
         VECT(1) = ZERO
         VECT(2) = ZERO
         VECT(3) =  ONE
      ELSE
         VECM(1) = VECN(1) * AREAINV
         VECM(2) = VECN(2) * AREAINV
         VECM(3) = VECN(3) * AREAINV
         INDX = ISDMIN(NDIM,VECM,1)
         VECS(1) = table(2,INDX) * VECM(3) - table(3,INDX) * VECM(2)
         VECS(2) = table(3,INDX) * VECM(1) - table(1,INDX) * VECM(3)
         VECS(3) = table(1,INDX) * VECM(2) - table(2,INDX) * VECM(1)
         SURF = ONE/DNRM2(NDIM,VECS,1)
         VECS(1) = VECS(1)*SURF
         VECS(2) = VECS(2)*SURF
         VECS(3) = VECS(3)*SURF
         CALL CROSS_PROD( VECM , VECS , VECT )
      ENDIF 
C
      UDOTM = DDOT(NDIM,ZAVG(2),1,VECM,1)
      UDOTS = DDOT(NDIM,ZAVG(2),1,VECS,1)
      UDOTT = DDOT(NDIM,ZAVG(2),1,VECT,1)
C
C     Left Eigenvectors ..
C
      VLEFT(1,1) =-UDOTS*CSQRINV
      VLEFT(2,1) = HALF * CSQRINV
      VLEFT(3,1) = HALF * CSQRINV
      IF(NDIM.EQ.3)VLEFT(4,1) =-UDOTT*CSQRINV
C
C     Right Eigenvectors ..
C
      VRIGHT(1,1) = ZERO
      VRIGHT(1,2) = LPLUS * C
      VRIGHT(1,3) =-LMINS * C
      IF(NDIM.EQ.3)VRIGHT(1,4) = ZERO
C
C     Left Eigenvectors ..
C
         VLEFT(1,2) = VECS(1) - UDOTM*CSQRINV*UDOTS*VECM(1)
         VLEFT(2,2) = HALF * CSQRINV * LMINS * VECM(1)
         VLEFT(3,2) = HALF * CSQRINV * LPLUS * VECM(1)
C
         VLEFT(1,3) = VECS(2) - UDOTM*CSQRINV*UDOTS*VECM(2)
         VLEFT(2,3) = HALF * CSQRINV * LMINS * VECM(2)
         VLEFT(3,3) = HALF * CSQRINV * LPLUS * VECM(2)
C
         IF( NDIM .EQ. 3 )THEN
            VLEFT(4,2) = VECT(1) - UDOTM*CSQRINV*UDOTT*VECM(1)
            VLEFT(4,3) = VECT(2) - UDOTM*CSQRINV*UDOTT*VECM(2)
            VLEFT(1,4) = VECS(3) - UDOTM*CSQRINV*UDOTS*VECM(3)
            VLEFT(2,4) = HALF * CSQRINV * LMINS * VECM(3)
            VLEFT(3,4) = HALF * CSQRINV * LPLUS * VECM(3)
            VLEFT(4,4) = VECT(3) - UDOTM*CSQRINV*UDOTT*VECM(3)
         ENDIF
C
C     Right Eigenvectors ..
C
         VRIGHT(2,1) = VECS(1)
         VRIGHT(2,2) = ZAVG(2) - LPLUS * VECM(1)
         VRIGHT(2,3) = ZAVG(2) - LMINS * VECM(1)
C
         VRIGHT(3,1) = VECS(2)
         VRIGHT(3,2) = ZAVG(3) - LPLUS * VECM(2)
         VRIGHT(3,3) = ZAVG(3) - LMINS * VECM(2)
C
         IF( NDIM .EQ. 3 )THEN
             VRIGHT(2,4) = VECT(1)
             VRIGHT(3,4) = VECT(2)
C
             VRIGHT(4,1) = VECS(3)
             VRIGHT(4,2) = ZAVG(4) - LPLUS * VECM(3)
             VRIGHT(4,3) = ZAVG(4) - LMINS * VECM(3)
             VRIGHT(4,4) = VECT(3)
         ENDIF 
C
C     Test if VRIGHT*VLEFT = Identity ..
C
            CALL DGEMM('N','N',NORDER,NORDER,NORDER,1.D0,VRIGHT,LDA,
     +                 VLEFT,LDA,0.D0,WORK1,NMAX)
C
         WARNA = UNITMAT( WORK1, NORDER, NORDER, NMAX, 1.D-15 )
C
         IF( .NOT. WARNA )THEN
            CALL R8Mat_Print('G',' ',NORDER,NORDER,WORK1,NMAX,
     +                  'Left * Right eigenvectors',IFAIL)
            PAUSE
         ENDIF
C
C     Positive and negative eigenvalues ..
C
      DO 12 IDIM = 1 , NORDER
         LPOS(IDIM) = HALF * (WR(IDIM) + DABS(WR(IDIM)) )
         LNEG(IDIM) = HALF * (WR(IDIM) - DABS(WR(IDIM)) )
   12 CONTINUE
C
C     compute VRIGHT * LAMBDA(+/-) * VLEFT
C
      DO 15 J = 1 , NORDER
         DO 15 I = 1 , NORDER
         SUM1 = ZERO
         SUM2 = ZERO
            DO 13 K = 1 , NORDER
               TEMP1= VRIGHT(I,K) * VLEFT(K,J)
               SUM1 = SUM1 + TEMP1* LPOS(K)
               SUM2 = SUM2 + TEMP1* LNEG(K)
   13       CONTINUE
         KPLUS(I,J) = SUM1
         KMINS(I,J) = SUM2
   15 CONTINUE
C
#endif
C
C     here we need a unit normal
C
      ANX = VECN(1) * AREAINV
      ANY = VECN(2) * AREAINV
      IF( NDIM .EQ. 3 )ANZ = VECN(3) * AREAINV
      UDOTM = ANX*ZAVG(2)+ANY*ZAVG(3)
      IF( NDIM .EQ. 3 )UDOTM = UDOTM + ANZ*ZAVG(4)
C
      WR(1) = UDOTM
      WR(2) = LMINS
      WR(3) = LPLUS
      WR(4) = UDOTM
C
      LPOS(1) =HALF* (WR(1)+ABS(WR(1)))
      LPOS(2) =HALF* (WR(2)+ABS(WR(2)))
      LPOS(3) =HALF* (WR(3)+ABS(WR(3)))
      LPOS(4) =HALF* (WR(4)+ABS(WR(4)))
      LNEG(1) =HALF* (WR(1)-ABS(WR(1)))
      LNEG(2) =HALF* (WR(2)-ABS(WR(2)))
      LNEG(3) =HALF* (WR(3)-ABS(WR(3)))
      LNEG(4) =HALF* (WR(4)-ABS(WR(4)))
C
      CNST = AREA * CSQRINV 
C
C     Auxiliary arrays VPOS,VNEG,W
C
      VPOSX = ZAVG(2) * LPLUS + BETA * ANX
      VPOSY = ZAVG(3) * LPLUS + BETA * ANY
      VPOSZ = ZAVG(4) * LPLUS + BETA * ANZ
      VNEGX = ZAVG(2) * LMINS + BETA * ANX
      VNEGY = ZAVG(3) * LMINS + BETA * ANY
      VNEGZ = ZAVG(4) * LMINS + BETA * ANZ
      WX = ZAVG(2) - UDOTM * ANX
      WY = ZAVG(3) - UDOTM * ANY
      WZ = ZAVG(4) - UDOTM * ANZ
C
      TEMP = HALF * BETA * CINV * AREA
C
      KPOS(1,1) = TEMP
      KNEG(1,1) =-TEMP
C
      TEMPX = TEMP * LPLUS
      KPOS(1,2) = TEMPX * ANX
      KPOS(1,3) = TEMPX * ANY
      IF( NDIM.EQ.3 ) KPOS(1,4) = TEMPX * ANZ
C
      TEMPX =-TEMP * LMINS
      KNEG(1,2) = TEMPX * ANX
      KNEG(1,3) = TEMPX * ANY
      IF( NDIM.EQ.3 ) KNEG(1,4) = TEMPX * ANZ
C
      KPOS(2,1) = CNST * (HALF * VPOSX - LPOS(1) * WX )
      KPOS(3,1) = CNST * (HALF * VPOSY - LPOS(1) * WY )
      IF( NDIM .EQ. 3 )
     >KPOS(4,1) = CNST * (HALF * VPOSZ - LPOS(1) * WZ )
C
      KNEG(2,1) = CNST * (HALF * VNEGX - LNEG(1) * WX )
      KNEG(3,1) = CNST * (HALF * VNEGY - LNEG(1) * WY )
      IF( NDIM .EQ. 3 )
     >KNEG(4,1) = CNST * (HALF * VNEGZ - LNEG(1) * WZ )
C
      TEMPX = ( CSQR * (ONE - ANX * ANX) - UDOTM * WX * ANX )
      TEMPY = ( CSQR * (ONE - ANY * ANY) - UDOTM * WY * ANY )
      TEMPZ = ( CSQR * (ONE - ANZ * ANZ) - UDOTM * WZ * ANZ )
C
      L0POS = LPOS(1) * CNST 
      L0NEG = LNEG(1) * CNST 
      TEMPA = HALF * LPLUS * CNST
      TEMPB = HALF * LMINS * CNST
C
      KPOS(2,2) = TEMPA * VPOSX * ANX + L0POS * TEMPX
      KPOS(3,3) = TEMPA * VPOSY * ANY + L0POS * TEMPY
C
      KNEG(2,2) = TEMPB * VNEGX * ANX + L0NEG * TEMPX
      KNEG(3,3) = TEMPB * VNEGY * ANY + L0NEG * TEMPY
C
      IF( NDIM .EQ. 3 )THEN
          KPOS(4,4) = TEMPA * VPOSZ * ANZ + L0POS * TEMPZ
          KNEG(4,4) = TEMPB * VNEGZ * ANZ + L0NEG * TEMPZ
      ENDIF
C
      TEMPY = ( -CSQR * ANX * ANY - UDOTM * WX * ANY )
C
      KPOS(2,3) = TEMPA * VPOSX * ANY + L0POS * TEMPY
      KNEG(2,3) = TEMPB * VNEGX * ANY + L0NEG * TEMPY
C
      IF( NDIM .EQ. 3 )THEN
          TEMPZ = ( -CSQR * ANX * ANZ - UDOTM * WX * ANZ )
          KPOS(2,4) = TEMPA * VPOSX * ANZ + L0POS * TEMPZ
          KNEG(2,4) = TEMPB * VNEGX * ANZ + L0NEG * TEMPZ
      ENDIF
C
      TEMPX = ( -CSQR * ANY * ANX - UDOTM * WY * ANX ) 
      TEMPZ = ( -CSQR * ANY * ANZ - UDOTM * WY * ANZ ) 
C
      KPOS(3,2) = TEMPA * VPOSY * ANX + L0POS * TEMPX
      KNEG(3,2) = TEMPB * VNEGY * ANX + L0NEG * TEMPX
C
      IF( NDIM .EQ. 3 )THEN
          KPOS(3,4) = TEMPA * VPOSY * ANZ + L0POS * TEMPZ
          KNEG(3,4) = TEMPB * VNEGY * ANZ + L0NEG * TEMPZ
      ENDIF
C
      IF( NDIM .EQ. 3 )THEN
          TEMPX = ( -CSQR * ANZ * ANX - UDOTM * WZ * ANX ) 
          TEMPY = ( -CSQR * ANZ * ANY - UDOTM * WZ * ANY )
          KPOS(4,2) = TEMPA * VPOSZ * ANX + L0POS * TEMPX
          KPOS(4,3) = TEMPA * VPOSZ * ANY + L0POS * TEMPY
          KNEG(4,2) = TEMPB * VNEGZ * ANX + L0NEG * TEMPX
          KNEG(4,3) = TEMPB * VNEGZ * ANY + L0NEG * TEMPY
      ENDIF
C
C     the following ensures a correct computation of the timestep
C
      LPOS(1) = LPOS(1) * AREA
      LPOS(2) = LPOS(2) * AREA
      LPOS(3) = LPOS(3) * AREA
      LPOS(4) = LPOS(4) * AREA
C      
#ifdef DEBUG
C
      DO 32 I =  1, NORDER
         DO 32 J =  1, NORDER
            WORK1(I,J) = (KPOS(I,J)-KPLUS(I,J))
            WORK2(I,J) = (KNEG(I,J)-KMINS(I,J))
   32 CONTINUE
      WARNA = NULLMAT( WORK1, NORDER, NORDER, NMAX, 1.D-14 )
      WARNB = NULLMAT( WORK2, NORDER, NORDER, NMAX, 1.D-14 )
      IF( .NOT. WARNA )THEN
         CALL R8Mat_Print('G',' ',NORDER,NORDER,KPOS,LDA,'A+ ',IFAIL)
         CALL R8Mat_Print('G',' ',NORDER,NORDER,KPLUS,4,'R*K*L ',IFAIL)
         PAUSE
      ENDIF
      IF( .NOT. WARNB )THEN
         CALL R8Mat_Print('G',' ',NORDER,NORDER,KNEG,LDA,'A-',IFAIL)
         CALL R8Mat_Print('G',' ',NORDER,NORDER,KMINS,4,'R*K*L  ',IFAIL)
         PAUSE
      ENDIF
C
C        WARNA = UNITMAT(....1.D-14)
C
         DO 30 I =  1, NORDER
            DO 30 J =  1, NORDER
               WORK1(I,J) = (KPOS(I,J)+KNEG(I,J))
               WORK2(I,J) = WORK1(I,J)-KMAT(I,J)
   30    CONTINUE
         LFLAG = .NOT. NULLMAT(WORK2,NORDER,NORDER,NMAX,1.D-14)
C
         IF( LFLAG .EQV. .TRUE. )THEN
C
            LFLAG = .FALSE.
C
            WRITE(6,*)'Element # ',IELEM
            CALL R8Mat_Print('G',' ',NORDER,NORDER,KMAT,LDA,
     +                  'Jacobian matrix',IFAIL)
            WRITE(6,*)(WR(I),I=1,NORDER)
            CALL R8Mat_Print('G',' ',NORDER,NORDER,VLEFT,LDA,
     +                  'LEFT eigenvectors',IFAIL)
            CALL R8Mat_Print('G',' ',NORDER,NORDER,VRIGHT,LDA,
     +                  'RIGHT eigenvectors',IFAIL)
            CALL DGEMM('N','N',NORDER,NORDER,NORDER,1.D0,VLEFT,LDA,
     +                  KMAT,LDA,ZERO,WKSPA,NMAX)
            CALL DGEMM('N','N',NORDER,NORDER,NORDER,1.D0,KMAT,LDA,
     +                  VRIGHT,LDA,ZERO,WKSPB,NMAX)
            DO 16 I =  1, NORDER
               DO 16 J =  1, NORDER
                  WKSPC(I,J) = WR(I)*VLEFT(I,J)
                  WKSPD(I,J) = WR(J)*VRIGHT(I,J)
   16       CONTINUE
            CALL R8Mat_Print('G',' ',NORDER,NORDER,WKSPA,NMAX,
     &                  'LEFT*A ',IFAIL)
            CALL R8Mat_Print('G',' ',NORDER,NORDER,WKSPC,NMAX,
     &                  'lambda*LEFT',IFAIL)
            CALL R8Mat_Print('G',' ',NORDER,NORDER,WKSPB,NMAX,
     &                  'A*RIGHT',IFAIL)
            CALL R8Mat_Print('G',' ',NORDER,NORDER,WKSPD,NMAX,
     &                  'RIGHT*lambda',IFAIL)
            CALL R8Mat_Print('General',' ',NORDER,NORDER,KMAT,LDA,
     &                  'Original matrix',IFAIL)
            CALL R8Mat_Print('General',' ',NORDER,NORDER,WORK1,NMAX,
     +                  'Reassembled matrix',IFAIL)
            CALL R8Mat_Print('General',' ',NORDER,NORDER,WORK2,NMAX,
     +                  'Error matrix',IFAIL)
      ENDIF
C
#endif
C
      RETURN
      END
@


1.5
log
@changed the name of an header file
@
text
@d6 1
a6 1
C     $Id: matsplVIII.F,v 1.4 2012/12/20 10:49:35 abonfi Exp abonfi $
d225 1
a225 1
            CALL X04CAF('G',' ',NORDER,NORDER,WORK1,NMAX,
d383 2
a384 2
         CALL X04CAF('G',' ',NORDER,NORDER,KPOS,LDA,'A+ ',IFAIL)
         CALL X04CAF('G',' ',NORDER,NORDER,KPLUS,4,'R*K*L ',IFAIL)
d388 2
a389 2
         CALL X04CAF('G',' ',NORDER,NORDER,KNEG,LDA,'A-',IFAIL)
         CALL X04CAF('G',' ',NORDER,NORDER,KMINS,4,'R*K*L  ',IFAIL)
d407 1
a407 1
            CALL X04CAF('G',' ',NORDER,NORDER,KMAT,LDA,
d410 1
a410 1
            CALL X04CAF('G',' ',NORDER,NORDER,VLEFT,LDA,
d412 1
a412 1
            CALL X04CAF('G',' ',NORDER,NORDER,VRIGHT,LDA,
d423 1
a423 1
            CALL X04CAF('G',' ',NORDER,NORDER,WKSPA,NMAX,
d425 1
a425 1
            CALL X04CAF('G',' ',NORDER,NORDER,WKSPC,NMAX,
d427 1
a427 1
            CALL X04CAF('G',' ',NORDER,NORDER,WKSPB,NMAX,
d429 1
a429 1
            CALL X04CAF('G',' ',NORDER,NORDER,WKSPD,NMAX,
d431 1
a431 1
            CALL X04CAF('General',' ',NORDER,NORDER,KMAT,LDA,
d433 1
a433 1
            CALL X04CAF('General',' ',NORDER,NORDER,WORK1,NMAX,
d435 1
a435 1
            CALL X04CAF('General',' ',NORDER,NORDER,WORK2,NMAX,
@


1.4
log
@added Doxygen documentation
@
text
@d6 1
a6 1
C     $Id:$
d24 1
d26 1
a26 1
      INCLUDE 'three'
a29 1
      INCLUDE 'constants'
@


1.3
log
@changed the computation to match the published version
@
text
@d1 1
a1 1
C
d3 1
a3 1
     +DUMMY,LDJ,KMAT,KPOS,KNEG,VLEFT,VRIGHT,LDA,
d6 3
a17 15
C************************************************************
C
C     NORDER:   is the order of the system to be solved (INPUT)
C     VNOR:     is the face normal (INPUT)
C     KMAT:     the jacobian matrix times the face normal (OUTPUT)
C     KPOS:     is the "positive" part of the jacobian matrix (OUTPUT)
C     KNEG:     is the "negative" part of the jacobian matrix (OUTPUT)
C     VLEFT:    is left eigenvector matrix of the jacobian matrix (OUTPUT)
C     VRIGHT:   is right eigenvector matrix of the jacobian matrix (OUTPUT)
C     LD:       is the leading dimension of the previous matrices
C     WR:       eigenvalues of the jacobian matrix (OUTPUT)
C     LPOS:     positive eigenvalues of the jacobian matrix (OUTPUT)
C     LNEG:     negative eigenvalues of the jacobian matrix (OUTPUT)
C
C************************************************************
d35 1
a35 1
      DOUBLE PRECISION DUMMY(LDJ,*)
@


1.2
log
@debugger options now working
@
text
@d3 1
a3 1
     +JacobianMatrix,LDJ,KMAT,KPOS,KNEG,VLEFT,VRIGHT,LDA,
d6 9
d47 1
a47 1
      DOUBLE PRECISION JacobianMatrix(LDJ,*)
d49 4
a52 1
     &       VLEFT(LDA,*),VRIGHT(LDA,*),WR(*),LPOS(*),LNEG(*)
d54 5
a60 8
      DOUBLE PRECISION U_dot_M,AREAINV,AREA,CSQRINV,CNST,
     &CSQR,TEMP1,C,LPLUS,LMINS,ANX,ANY,ANZ
C
      DOUBLE PRECISION C11POS,C11NEG,C12POS,C12NEG,
     +C13POS,C13NEG,CINV,TEMPX,TEMPY,TEMPZ,
     +C08,C09,C10,L0POS,L0NEG

#ifdef DEBUG
d67 6
a72 2
      DOUBLE PRECISION SURF,SUM1,SUM2,U_DOT_S,U_DOT_T
#endif
d78 1
a82 6
#ifdef DEBUG
      DATA (table(1,j),j=1,3) / 1,0,0 /
      DATA (table(2,j),j=1,3) / 0,1,0 /
      DATA (table(3,j),j=1,3) / 0,0,1 /
      DATA LFLAG / .FALSE. /
#endif
d84 2
a85 2
C     U_dot_M is the dot product between the velocity vector
C             and the face normal
d89 1
a89 1
      U_dot_M = ZAVG(2) * ANX + ZAVG(3) * ANY
d92 1
a92 1
         U_DOT_M = U_DOT_M + ZAVG(4) * ANZ
d102 1
a102 1
      KMAT(2,2) = ZAVG(2) * ANX + U_dot_M
d107 1
a107 1
      KMAT(3,3) = ZAVG(3) * ANY + U_dot_M
d116 1
a116 1
          KMAT(4,4) = ZAVG(4) * ANZ + U_dot_M
a120 3
C     define an orthonormal base in the direction of the
C        face normal ..
C
a125 4
      VECN(1) = AREAINV * VECN(1)
      VECN(2) = AREAINV * VECN(2)
      IF( NDIM .EQ. 3 )VECN(3) = AREAINV * VECN(3)
C
d130 2
a131 2
      U_dot_M = U_dot_M / AREA
      CSQR = U_dot_M * U_dot_M + BETA
d136 2
a137 2
      LPLUS = U_dot_M + C
      LMINS = U_dot_M - C
d141 1
a141 1
      WR(1) = AREA * U_dot_M
d144 1
a144 1
      WR(4) = AREA * U_dot_M
d148 2
a149 2
         VECM(1) = VECN(1)
         VECM(2) = VECN(2)
d158 3
a160 3
         VECM(1) = VECN(1)
         VECM(2) = VECN(2)
         VECM(3) = VECN(3)
d172 3
a174 3
      U_DOT_M = DDOT(NDIM,ZAVG(2),1,VECM,1)
      U_DOT_S = DDOT(NDIM,ZAVG(2),1,VECS,1)
      U_DOT_T = DDOT(NDIM,ZAVG(2),1,VECT,1)
d178 1
a178 1
      VLEFT(1,1) =-U_DOT_S*CSQRINV
d181 1
a181 1
      IF(NDIM.EQ.3)VLEFT(4,1) =-U_DOT_T*CSQRINV
d192 1
a192 1
         VLEFT(1,2) = VECS(1) - U_DOT_M*CSQRINV*U_DOT_S*VECM(1)
d196 1
a196 1
         VLEFT(1,3) = VECS(2) - U_DOT_M*CSQRINV*U_DOT_S*VECM(2)
d201 3
a203 3
            VLEFT(4,2) = VECT(1) - U_DOT_M*CSQRINV*U_DOT_T*VECM(1)
            VLEFT(4,3) = VECT(2) - U_DOT_M*CSQRINV*U_DOT_T*VECM(2)
            VLEFT(1,4) = VECS(3) - U_DOT_M*CSQRINV*U_DOT_S*VECM(3)
d206 1
a206 1
            VLEFT(4,4) = VECT(3) - U_DOT_M*CSQRINV*U_DOT_T*VECM(3)
d266 1
a266 5
      ANX = VECN(1)
      ANY = VECN(2)
      IF( NDIM .EQ. 3 )ANZ = VECN(3)
      U_DOT_M = ANX*ZAVG(2)+ANY*ZAVG(3)
      IF( NDIM .EQ. 3 )U_DOT_M = U_DOT_M + ANZ*ZAVG(4)
d268 7
a274 1
      WR(1) = U_DOT_M
d277 1
a277 1
      WR(4) = U_DOT_M
d290 13
a302 12
      L0POS = LPOS(1)*CNST
      L0NEG = LNEG(1)*CNST
      C08 = ( ZAVG(2) - ANX * U_DOT_M )
      C09 = ( ZAVG(3) - ANY * U_DOT_M )
      C10 = ( ZAVG(4) - ANZ * U_DOT_M )
C
      C11POS = WR(3) * ( ZAVG(2) * WR(3) + BETA * ANX )*CNST
      C11NEG = WR(2) * ( ZAVG(2) * WR(2) + BETA * ANX )*CNST
      C12POS = WR(3) * ( ZAVG(3) * WR(3) + BETA * ANY )*CNST
      C12NEG = WR(2) * ( ZAVG(3) * WR(2) + BETA * ANY )*CNST
      C13POS = WR(3) * ( ZAVG(4) * WR(3) + BETA * ANZ )*CNST
      C13NEG = WR(2) * ( ZAVG(4) * WR(2) + BETA * ANZ )*CNST
d304 2
a305 2
      KPOS(1,1) = HALF * BETA*CINV*AREA
      KNEG(1,1) =-HALF * BETA*CINV*AREA
d307 1
a307 1
      TEMPX = HALF * BETA * CINV * WR(3) * AREA
d310 1
a310 1
      IF( NDIM.EQ.3 )KPOS(1,4) = TEMPX * ANZ
d312 1
a312 1
      TEMPX =-HALF * BETA * CINV * WR(2) * AREA
d315 1
a315 1
      IF( NDIM.EQ.3 )KNEG(1,4) = TEMPX * ANZ
d317 2
a318 4
      KPOS(2,1) = HALF * ( ZAVG(2) * WR(3) + ANX * BETA ) * CNST
     +            -L0POS*C08
      KPOS(3,1) = HALF * ( ZAVG(3) * WR(3) + ANY * BETA ) * CNST
     +            -L0POS*C09
d320 1
a320 2
     >KPOS(4,1) = HALF * ( ZAVG(4) * WR(3) + ANZ * BETA ) * CNST
     +            -L0POS*C10
d322 2
a323 4
      KNEG(2,1) = HALF * ( ZAVG(2) * WR(2) + ANX * BETA ) * CNST
     +            -L0NEG*C08
      KNEG(3,1) = HALF * ( ZAVG(3) * WR(2) + ANY * BETA ) * CNST
     +            -L0NEG*C09
d325 1
a325 2
     >KNEG(4,1) = HALF * ( ZAVG(4) * WR(2) + ANZ * BETA ) * CNST
     +            -L0NEG*C10
d327 8
a334 3
      TEMPX = ( CSQR * (ONE - ANX * ANX) - U_DOT_M * ANX * C08 )
      TEMPY = ( CSQR * (ONE - ANY * ANY) - U_DOT_M * ANY * C09 )
      TEMPZ = ( CSQR * (ONE - ANZ * ANZ) - U_DOT_M * ANZ * C10 )
d336 5
a340 2
      KPOS(2,2) = HALF * ANX * C11POS + L0POS * TEMPX
      KPOS(3,3) = HALF * ANY * C12POS + L0POS * TEMPY
a341 2
      KNEG(2,2) = HALF * ANX * C11NEG + L0NEG * TEMPX
      KNEG(3,3) = HALF * ANY * C12NEG + L0NEG * TEMPY
d343 2
a344 2
          KPOS(4,4) = HALF * ANZ * C13POS + L0POS * TEMPZ
          KNEG(4,4) = HALF * ANZ * C13NEG + L0NEG * TEMPZ
d347 4
a350 4
      TEMPY = ( -CSQR * ANX * ANY - U_DOT_M * ANY * C08 )
      TEMPZ = ( -CSQR * ANX * ANZ - U_DOT_M * ANZ * C08 )
      KPOS(2,3) = HALF * ANY * C11POS + L0POS * TEMPY
      KNEG(2,3) = HALF * ANY * C11NEG + L0NEG * TEMPY
d353 3
a355 2
          KPOS(2,4) = HALF * ANZ * C11POS + L0POS * TEMPZ
          KNEG(2,4) = HALF * ANZ * C11NEG + L0NEG * TEMPZ
d358 2
a359 2
      TEMPX = ( -CSQR * ANX * ANY - U_DOT_M * ANX * C09 ) 
      TEMPZ = ( -CSQR * ANY * ANZ - U_DOT_M * ANZ * C09 ) 
d361 2
a362 2
      KPOS(3,2) = HALF * ANX * C12POS + L0POS * TEMPX
      KNEG(3,2) = HALF * ANX * C12NEG + L0NEG * TEMPX
d365 2
a366 2
          KPOS(3,4) = HALF * ANZ * C12POS + L0POS * TEMPZ
          KNEG(3,4) = HALF * ANZ * C12NEG + L0NEG * TEMPZ
d370 6
a375 6
          TEMPX = ( -CSQR * ANX * ANZ - U_DOT_M * ANX * C10 ) 
          TEMPY = ( -CSQR * ANY * ANZ - U_DOT_M * ANY * C10 )
          KPOS(4,2) = HALF * ANX * C13POS + L0POS * TEMPX
          KPOS(4,3) = HALF * ANY * C13POS + L0POS * TEMPY
          KNEG(4,2) = HALF * ANX * C13NEG + L0NEG * TEMPX
          KNEG(4,3) = HALF * ANY * C13NEG + L0NEG * TEMPY
a451 4
C
      VECN(1) = VECN(1) / AREAINV
      VECN(2) = VECN(2) / AREAINV
      IF( NDIM .EQ. 3 )VECN(3) = VECN(3) / AREAINV
@


1.1
log
@Initial revision
@
text
@d24 1
a24 1
C     .. Parameters ..
a27 2
C     .. Commons ..
C
a31 2
C     .. Parameters ..
C
a33 2
C     .. Scalar Arguments ..
C
d37 1
a37 3
C     .. Array Arguments ..
C
      DOUBLE PRECISION VECN(*),VECS(1),VECT(1)
a41 2
C     .. Local Scalars ..
C
d45 1
a45 3
     &SUM1,SUM2,CSQR,TEMP1,C,LPLUS,LMINS,U_dot_S,U_dot_T,ANX,ANY,ANZ
C
C     .. Local Arrays ..
a46 3
      DOUBLE PRECISION WORK1(5,5),WORK2(5,5)
      DOUBLE PRECISION WKSPA(5,5),WKSPB(5,5)
      DOUBLE PRECISION WKSPC(5,5),WKSPD(5,5)
d52 5
d58 1
a60 2
C     .. External Functions ..
C
a65 2
C     .. Intrinsic Functions ..
C
d68 7
a74 1
C     .. Data Statements ..
d76 2
a77 6
      DATA LFLAG,ANX,ANY,ANZ / .FALSE.,3*ZERO /
C
C     .. Executable Statements ..
C
C       .. U_dot_M is the dot product between the velocity vector
C          and the face normal ..
d87 1
a87 1
C       .. Jacobian Matrix for primitive variables ..
d92 1
a92 2
      KMAT(1,4) = BETA*ANZ
*
d96 1
a96 2
      KMAT(2,4) = ZAVG(2) * ANZ
*
d100 10
a109 6
      KMAT(3,4) = ZAVG(3) * ANZ
*
      KMAT(4,1) = ANZ
      KMAT(4,2) = ZAVG(4) * ANX
      KMAT(4,3) = ZAVG(4) * ANY
      KMAT(4,4) = ZAVG(4) * ANZ + U_dot_M
d113 1
a113 1
C     .. define an orthonormal base in the direction of the
d127 1
a127 1
C       .. Some useful constants ..
d138 1
a138 1
C       .. Eigenvalues ..
d146 28
d175 1
a175 1
C       .. Left Eigenvectors ..
d180 1
a180 1
      VLEFT(4,1) =-U_DOT_T*CSQRINV
d182 1
a182 1
C       .. Right Eigenvectors ..
d187 1
a187 1
      VRIGHT(1,4) = ZERO
d189 1
a189 1
C       .. Left Eigenvectors ..
d191 16
a206 14
         VLEFT(1,2) = VECS(1) - U_DOT_M*CSQRINV*U_DOT_S*VECN(1)
         VLEFT(2,2) = HALF * CSQRINV * LMINS * VECN(1)
         VLEFT(3,2) = HALF * CSQRINV * LPLUS * VECN(1)
         VLEFT(4,2) = VECT(1) - U_DOT_M*CSQRINV*U_DOT_T*VECN(1)
C
         VLEFT(1,3) = VECS(2) - U_DOT_M*CSQRINV*U_DOT_S*VECN(2)
         VLEFT(2,3) = HALF * CSQRINV * LMINS * VECN(2)
         VLEFT(3,3) = HALF * CSQRINV * LPLUS * VECN(2)
         VLEFT(4,3) = VECT(2) - U_DOT_M*CSQRINV*U_DOT_T*VECN(2)
C
         VLEFT(1,4) = VECS(3) - U_DOT_M*CSQRINV*U_DOT_S*VECN(3)
         VLEFT(2,4) = HALF * CSQRINV * LMINS * VECN(3)
         VLEFT(3,4) = HALF * CSQRINV * LPLUS * VECN(3)
         VLEFT(4,4) = VECT(3) - U_DOT_M*CSQRINV*U_DOT_T*VECN(3)
d208 1
a208 1
C       .. Right Eigenvectors ..
d211 2
a212 3
         VRIGHT(2,2) = ZAVG(2) - LPLUS * VECN(1)
         VRIGHT(2,3) = ZAVG(2) - LMINS * VECN(1)
         VRIGHT(2,4) = VECT(1)
d215 25
a239 8
         VRIGHT(3,2) = ZAVG(3) - LPLUS * VECN(2)
         VRIGHT(3,3) = ZAVG(3) - LMINS * VECN(2)
         VRIGHT(3,4) = VECT(2)
C
         VRIGHT(4,1) = VECS(3)
         VRIGHT(4,2) = ZAVG(4) - LPLUS * VECN(3)
         VRIGHT(4,3) = ZAVG(4) - LMINS * VECN(3)
         VRIGHT(4,4) = VECT(3)
d241 1
a241 1
C       .. Positive and negative eigenvalues ..
d248 1
a248 1
C     .. compute VRIGHT * LAMBDA(+/-) * VLEFT
a260 2
C        KPOS(I,J) = SUM1
C        KNEG(I,J) = SUM2
a264 2
C     GOTO 66
C
d306 1
a306 1
      KPOS(1,4) = TEMPX * ANZ
d311 1
a311 1
      KNEG(1,4) = TEMPX * ANZ
d317 2
a318 1
      KPOS(4,1) = HALF * ( ZAVG(4) * WR(3) + ANZ * BETA ) * CNST
d325 2
a326 1
      KNEG(4,1) = HALF * ( ZAVG(4) * WR(2) + ANZ * BETA ) * CNST
a334 1
      KPOS(4,4) = HALF * ANZ * C13POS + L0POS * TEMPZ
d338 4
a341 1
      KNEG(4,4) = HALF * ANZ * C13NEG + L0NEG * TEMPZ
d346 1
a346 1
      KPOS(2,4) = HALF * ANZ * C11POS + L0POS * TEMPZ
d348 4
a351 2
      KNEG(2,3) = HALF * ANY * C11NEG + L0NEG * TEMPY
      KNEG(2,4) = HALF * ANZ * C11NEG + L0NEG * TEMPZ
a356 2
      KPOS(3,4) = HALF * ANZ * C12POS + L0POS * TEMPZ
C
a357 1
      KNEG(3,4) = HALF * ANZ * C12NEG + L0NEG * TEMPZ
d359 4
a362 4
      TEMPX = ( -CSQR * ANX * ANZ - U_DOT_M * ANX * C10 ) 
      TEMPY = ( -CSQR * ANY * ANZ - U_DOT_M * ANY * C10 )
      KPOS(4,2) = HALF * ANX * C13POS + L0POS * TEMPX
      KPOS(4,3) = HALF * ANY * C13POS + L0POS * TEMPY
d364 8
a371 2
      KNEG(4,2) = HALF * ANX * C13NEG + L0NEG * TEMPX
      KNEG(4,3) = HALF * ANY * C13NEG + L0NEG * TEMPY
a379 1
C
a399 4
#endif
C
      IF(ICHECK.EQ.2)THEN
C
a405 1
               IF( DABS(WORK2(I,J)) .GT. 1.D- 14)LFLAG = .TRUE.
d407 1
d415 1
a415 1
     +      'Jacobian matrix',IFAIL)
d418 1
a418 1
     +      'LEFT eigenvectors',IFAIL)
d420 1
a420 1
     +      'RIGHT eigenvectors',IFAIL)
d422 1
a422 1
     +      KMAT,LDA,ZERO,WKSPA,5)
d424 3
a426 3
     +      VRIGHT,LDA,ZERO,WKSPB,5)
            DO I =  1, NORDER
               DO J =  1, NORDER
d429 2
a430 3
               ENDDO
            ENDDO
            CALL X04CAF('G',' ',NORDER,NORDER,WKSPA,5,
d432 1
a432 1
            CALL X04CAF('G',' ',NORDER,NORDER,WKSPC,5,
d434 1
a434 1
            CALL X04CAF('G',' ',NORDER,NORDER,WKSPB,5,
d436 1
a436 1
            CALL X04CAF('G',' ',NORDER,NORDER,WKSPD,5,
d440 4
a443 17
            CALL X04CAF('General',' ',NORDER,NORDER,WORK1,5,
     +      'Reassembled matrix',IFAIL)
            CALL X04CAF('General',' ',NORDER,NORDER,WORK2,5,
     +      'Error matrix',IFAIL)
C
C       .. Test if VRIGHT*VLEFT = Identity ..
C
            CALL DGEMM('N','N',NORDER,NORDER,NORDER,1.D0,VRIGHT,LDA,
     +                 VLEFT,LDA,0.D0,WORK1,5)
C
         WARNA = UNITMAT( WORK1, NORDER, NORDER, NMAX, 1.D-15 )
C
         IF( .NOT. WARNA )
     +      CALL X04CAF('G',' ',NORDER,NORDER,WORK1,5,
     +      'Left * Right eigenvectors',IFAIL)
            PAUSE
         ENDIF
d446 1
a446 1
   66 CONTINUE
@
