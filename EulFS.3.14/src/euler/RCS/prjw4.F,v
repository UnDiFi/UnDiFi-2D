head	1.1;
access;
symbols;
locks; strict;
comment	@c @;


1.1
date	99.11.25.10.39.18;	author aldo;	state Exp;
branches;
next	;


desc
@Projector for ghost cell wall b.c.  (compressible eqns.)
@


1.1
log
@Initial revision
@
text
@C
      SUBROUTINE PRJW4(ZROE,VN,PPOSZ,PNEGZ,PPOSU,PNEGU,NDIM,NOFVAR)
C
C     Compute projectors for inviscid wall boundary conditions
C
      IMPLICIT NONE
C
C     .. Parameters ..
C
C     INCLUDE 'paramt.h'
      INCLUDE 'constants'
C
C#define DEBUG
C
#ifdef DEBUG
      INTEGER ifail,lwork,ipiv(25)
      LOGICAL WARNA
      parameter(lwork=5)
      DOUBLE PRECISION temp(25),work(lwork)
#endif
C
C     .. Scalar Arguments ..
C
      INTEGER NOFVAR,NDIM
C
C     .. Array Arguments ..
C
C     VNOR stores by columns an orthonormal base (n,s,t) where n
C          is multiplied by the surface of the face
C     ZROE stores the parameter vector of the face vertices
C
      DOUBLE PRECISION VN(NDIM),PPOSU(NOFVAR,NOFVAR),
     +PNEGU(NOFVAR,NOFVAR),PPOSZ(NOFVAR,NOFVAR),PNEGZ(NOFVAR,NOFVAR),
     +ZROE(NOFVAR)
C
C     .. Local Scalars ..
C
      INTEGER i,j
      DOUBLE PRECISION COEFF1,COEFF2,COEFF3,AREA
      DOUBLE PRECISION COEFF4,COEFF5,COEFF6,DENOM
C
C     .. Local Arrays ..
C
      DOUBLE PRECISION dUdZ(25),dZdU(25)
      DOUBLE PRECISION WORK1(25)
#ifdef DEBUG
      DOUBLE PRECISION WKSP(5,5)
#endif
C
      DOUBLE PRECISION DNRM2
      EXTERNAL         DNRM2
#ifdef DEBUG
      LOGICAL  UNITMAT
      EXTERNAL UNITMAT
#endif
C
C     .. Data Statements ..
C
      DATA dUdZ,dZdU / 50*ZERO /
C
C     .. Executable Statements ..
C
C     .. Solid Wall Boundary Conditions
C
C
      AREA = VN(1)*VN(1)+ VN(2)*VN(2)
      IF(NDIM.EQ.3)AREA=AREA+VN(3)*VN(3)
      DENOM=ONE/AREA
C
C     .. Z^{*} = sqrt{rho} [ 1,H,-u_n,u_s,u_t]
C
C     COEFF1 = - VN(1)*VN(1) + VS(1)*VS(1) + VT(1)*VT(1)
C     COEFF2 = - VN(2)*VN(2) + VS(2)*VS(2) + VT(2)*VT(2)
C     COEFF3 = - VN(3)*VN(3) + VS(3)*VS(3) + VT(3)*VT(3)
C     COEFF4 = - VN(1)*VN(2) + VS(1)*VS(2) + VT(1)*VT(2)
C     COEFF5 = - VN(1)*VN(3) + VS(1)*VS(3) + VT(1)*VT(3)
C     COEFF6 = - VN(2)*VN(3) + VS(2)*VS(3) + VT(2)*VT(3)
C
      COEFF1 = ONE - TWO*VN(1)*VN(1)*DENOM
      COEFF2 = ONE - TWO*VN(2)*VN(2)*DENOM
      COEFF3 = ONE - TWO*VN(3)*VN(3)*DENOM
      COEFF4 = - TWO*VN(1)*VN(2)*DENOM
      COEFF5 = - TWO*VN(1)*VN(3)*DENOM
      COEFF6 = - TWO*VN(2)*VN(3)*DENOM
C
C     An other approach
C
C     we take Z^{*} = sqrt{rho}[1,H,0,u_t,u_s]
C
C     TEMP = UAVG(3)*VN(1)+UAVG(4)*VN(2)+UAVG(5)*VN(3)
C     TEMP = ONE/(QINV*QINV) - TEMP*TEMP
C     TEMP = ONE/(QINV*DSQRT(TEMP))
C
C     COEFF1 = VS(1)*VS(1) + VT(1)*VT(1)
C     COEFF2 = VS(2)*VS(2) + VT(2)*VT(2)
C     COEFF3 = VS(3)*VS(3) + VT(3)*VT(3)
C     COEFF4 = VS(1)*VS(2) + VT(1)*VT(2)
C     COEFF5 = VS(1)*VS(3) + VT(1)*VT(3)
C     COEFF6 = VS(2)*VS(3) + VT(2)*VT(3)
C
C     COEFF1 = TEMP*COEFF1
C     COEFF2 = TEMP*COEFF2
C     COEFF3 = TEMP*COEFF3
C     COEFF4 = TEMP*COEFF4
C     COEFF5 = TEMP*COEFF5
C     COEFF6 = TEMP*COEFF6
C
C
      CALL PARM2CONS(ZROE,dUdZ,NOFVAR,NDIM)
      CALL CONS2PARM(ZROE,dZdU,NOFVAR,NDIM)
C
#ifdef DEBUG
           CALL X04CAF('General',' ',nofvar,nofvar,dudz,
     +                 nofvar,'dUdZ ',IFAIL)
           CALL X04CAF('General',' ',nofvar,nofvar,dzdu,
     +                 nofvar,'dZdU ',IFAIL)
      call dcopy(nofvar*nofvar,dzdu,1,temp,1)
c
      CALL DGETRF( NOFVAR, NOFVAR, temp, NOFVAR, IPIV, IFAIL ) 
      CALL DGETRI( NOFVAR, temp, NOFVAR, IPIV, work, lwork, ifail )
c
           CALL X04CAF('General',' ',nofvar,nofvar,temp,
     +                 nofvar,'By inversion matrix ',IFAIL)
           CALL X04CAF('General',' ',nofvar,nofvar,dudz,
     +                 nofvar,'analytical matrix ',IFAIL)
           pause
C
#endif
C
      PNEGZ(1,1) = ONE
      PNEGZ(1,2) = ZERO
      PNEGZ(1,3) = ZERO
      PNEGZ(1,4) = ZERO
C
      PNEGZ(2,1) = ZERO
      PNEGZ(2,2) = ONE
      PNEGZ(2,3) = ZERO
      PNEGZ(2,4) = ZERO
C
      PNEGZ(3,1) = ZERO
      PNEGZ(3,2) = ZERO
      PNEGZ(3,3) = COEFF1
      PNEGZ(3,4) = COEFF4
C
      PNEGZ(4,1) = ZERO
      PNEGZ(4,2) = ZERO
      PNEGZ(4,3) = COEFF4
      PNEGZ(4,4) = COEFF2
C
      IF(NDIM.EQ.3)THEN
C
      PNEGZ(1,5) = ZERO
      PNEGZ(2,5) = ZERO
      PNEGZ(3,5) = COEFF5
      PNEGZ(4,5) = COEFF6
C
      PNEGZ(5,1) = ZERO
      PNEGZ(5,2) = ZERO
      PNEGZ(5,3) = COEFF5
      PNEGZ(5,4) = COEFF6
      PNEGZ(5,5) = COEFF3
C
      ENDIF
C
C	.. Compute dU/dZ * P^{-} * dZ/dU
C
      CALL DGEMM('N','N',NOFVAR,NOFVAR,NOFVAR,ONE,dUdZ,NOFVAR,
     +PNEGZ,NOFVAR,ZERO,WORK1,NOFVAR)
      CALL DGEMM('N','N',NOFVAR,NOFVAR,NOFVAR,ONE,WORK1,NOFVAR,
     +dZdU,NOFVAR,ZERO,PNEGU,NOFVAR)
C
C
      DO 3 J = 1,NOFVAR
         DO 3 I = 1,NOFVAR
            IF( I .EQ. J )THEN
               PPOSZ(I,J) = ONE - PNEGZ(I,J)
               PPOSU(I,J) = ONE - PNEGU(I,J)
            ELSE
               PPOSZ(I,J) = - PNEGZ(I,J)
               PPOSU(I,J) = - PNEGU(I,J)
            ENDIF
    3 CONTINUE
C
#ifdef DEBUG
C
C     .. Compute dUdZ * dZdU
C
      CALL DGEMM('N','N',nofvar,nofvar,nofvar,ONE,dUdZ,nofvar,
     +dZdU,nofvar,ZERO,WKSP,nofvar)
      WARNA = UNITMAT( WKSP, nofvar, nofvar, nofvar, 1.D-14 )
C
      WARNA = .NOT. WARNA
C
      IF( WARNA )THEN
         WRITE(6,*)' Subroutine PRJW4'
         WRITE(6,*)(VN(i),i=1,3)
         IF( WARNA ) CALL X04CAF('General',' ',nofvar,nofvar,
     +   WKSP,nofvar,'dUdZ times dZdU',IFAIL)
         PAUSE
      ENDIF
C
#endif
C
      RETURN
      END
@
