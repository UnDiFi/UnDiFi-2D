head	1.4;
access
	abonfi
	aldo
	tesistim;
symbols
	release3_14_0:1.4
	release3_13_0:1.4
	release3_12_0:1.4
	release3_11_0:1.4
	release3_10_0:1.4
	release3_8_0:1.4
	release3_7_1:1.4
	release3_7_0:1.4
	release3_4_5:1.4
	release3_4_4:1.4
	release3_4_3:1.4
	release3_4_2:1.4
	release3_4_1:1.4
	release3_4_0:1.4
	release3_3_5:1.4
	release3_3_4:1.4
	release3_3_3:1.4
	release3_3_2:1.4
	release3_3_1:1.4
	release3_3_0:1.4;
locks; strict;
comment	@c @;


1.4
date	2012.12.20.10.39.57;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	2002.08.24.10.07.52;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	99.12.27.09.30.15;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	99.12.05.18.42.37;	author aldo;	state Exp;
branches;
next	;


desc
@weak inviscid wall bc for incompressible flows
@


1.4
log
@now supports ALE calculations
@
text
@!> \copydetails FLXW4()
      SUBROUTINE FLXW2(NDIM,NOFVAR,NOFVERT,STIFC,WORK,WORK2,VCZ,VCB,VCN,
     +                 NODRES,PICARD)
C
C     $Id: flxw2.f,v 1.3 2002/08/24 10:07:52 abonfi Exp $
C
      IMPLICIT NONE
C
C     Purpose: 
C     ------
C     compute inviscid wall b.c.'s for INcompressible flows
C
      include 'paramt.h'
      include 'constants.h'
C
C
C     .. Parameters ..
      DOUBLE PRECISION ALPHA
      PARAMETER (ALPHA=0.75d0)
C     ..
C     .. Scalar Arguments ..
      INTEGER NDIM,NOFVAR,NOFVERT
      LOGICAL PICARD
C
C     NDIM   dimension of the space (2 or 3)
C     NOFVAR number of variables (degrees of freedom)
C            in each meshpoint
C     NOFVAR number of variables (degrees of freedom)
C            in each meshpoint
C     PICARD .TRUE. for Picard linearisation
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION NODRES(NOFVAR,NDIM),
     +                 STIFC(NOFVAR,NOFVAR,NOFVERT,NOFVERT),VCN(NDIM),
     +                 VCZ(NOFVAR,NDIM),WORK(NDIM+1,NDIM+1,NOFVERT-1),
     +                 WORK2(NDIM+1,NDIM+1,NOFVERT-1,NOFVERT-1),
     &                 VCB(NDIM,NOFVERT)
C
C
C     On entry:
C     --------
C     VCN(1:NDIM,1:NOFVERT) cartesian components of the normals 
C                           to the element sides/faces
C                           the normal to the boundary face need
C                           to be stored in VCN(1:NDIM,NOFVERT)
C     VCZ(1:NOFVAR,1:NOFVERT) dependent variables in the vertices
C                           of the current (IELEM) element
C                           the freestream values need
C                           to be stored in VCZ(1:NOFVAR,NOFVERT)
C     Upon return:
C     -----------
C     STIFC(1:NOFVAR,1:NOFVAR,1:NOFVERT,1:NOFVERT) 
C                   convection matrix
C                   in the NOFVERT-1 vertices of the boundary face
C     NODRES(1:NOFVAR,1:NOFVERT-1) nodal residual due to the incoming
C                   characteristics in the NOFVERT-1 vertices 
C                   of the boundary face
C
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION BETA,CNST
      INTEGER I,IADD,IFAIL,IVERT,J,JVERT,K,L,NORDER
C     ..
C     .. Local Arrays ..
      DOUBLE PRECISION FLUX(MAXNOFVERT*MAXNOFVAR)
C     ..
C     .. External Subroutines ..
      EXTERNAL DAXPY,DINIT,GETDF2CORRDU,INVWLLI
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC REAL
C     ..
      NORDER = NDIM + 1
      DO 2 IVERT = 1,NOFVERT
          IADD = (IVERT-1)*NOFVAR + 1
          CALL INVWLLI(NDIM,VCN,VCB(1,IVERT),VCZ(1,IVERT),FLUX(IADD))
    2 CONTINUE
C
      CALL DINIT(NOFVAR* (NOFVERT-1),ZERO,NODRES,1)
      BETA = (1.-ALPHA)/REAL(NDIM-1)/REAL(NDIM)
      DO 5 IVERT = 1,NOFVERT - 1
          DO 7 JVERT = 1,NOFVERT - 1
              IADD = (JVERT-1)*NOFVAR + 1
              IF (JVERT.EQ.IVERT) THEN
                  CNST = ALPHA/NDIM

              ELSE
                  CNST = BETA
              ENDIF

              CALL DAXPY(NORDER,CNST,FLUX(IADD),1,NODRES(1,IVERT),1)
    7     CONTINUE
    5 CONTINUE
C
      IF (.NOT.PICARD) RETURN

      DO 3 IVERT = 1,NOFVERT - 1
          CALL GETDF2CORRDU(VCZ(2,IVERT),VCB(1,IVERT),VCN,NDIM,NORDER,
C                               ^
C                               | 
C                               | 
C            adresses the location of the x-component of the velocity vector
C
     +                      WORK(1,1,IVERT))
    3 CONTINUE

      DO 8 I = 1,NOFVERT - 1
          DO 8 J = 1,NOFVERT - 1
              IF (J.EQ.I) THEN
                  CNST = ALPHA/REAL(NDIM)

              ELSE
                  CNST = BETA
              ENDIF

              DO 8 L = 1,NORDER
                  DO 8 K = 1,NORDER
caldo             STIFC(k,l,i,j) = 0.5d0*CNST*work(k,l,j)
                      STIFC(K,L,I,J) = CNST*WORK(K,L,J)
    8 CONTINUE

      RETURN

  564 FORMAT ((E12.6,1X))

      END
@


1.3
log
@towards the implementation of a coupled approach
for RANS: the number of variables NOFVAR can now
be different from the number of mean flow equations
(hereafter called NOFEQN)
@
text
@d1 2
a2 2
C
      SUBROUTINE FLXW2(NDIM,NOFVAR,NOFVERT,STIFC,WORK,WORK2,VCZ,VCN,
d5 1
a5 1
C     $Id:$
d14 1
a14 1
      include 'constants'
d36 2
a37 1
     +                 WORK2(NDIM+1,NDIM+1,NOFVERT-1,NOFVERT-1)
d65 1
a65 1
      DOUBLE PRECISION FLUX(VMAX*NMAX)
d76 1
a76 1
          CALL INVWLLI(NDIM,VCN,VCZ(1,IVERT),FLUX(IADD))
d98 6
a103 1
          CALL GETDF2CORRDU(VCZ(2,IVERT),VCN,NDIM,NORDER,
@


1.2
log
@some cleanup
@
text
@d5 2
d13 4
a19 2
      DOUBLE PRECISION ZERO,HALF,ONE,TWO
      PARAMETER (ZERO=0.00d0,HALF=0.5d0,ONE=1.00d0,TWO=2.00d0)
d35 2
a36 2
     +                 VCZ(NOFVAR,NDIM),WORK(NOFVAR,NOFVAR,NOFVERT-1),
     +                 WORK2(NOFVAR,NOFVAR,NOFVERT-1,NOFVERT-1)
d61 1
a61 1
      INTEGER I,IADD,IFAIL,IVERT,J,JVERT,K,L
d64 1
a64 1
      DOUBLE PRECISION FLUX(16)
d72 1
d90 1
a90 1
              CALL DAXPY(NOFVAR,CNST,FLUX(IADD),1,NODRES(1,IVERT),1)
d97 1
a97 1
          CALL GETDF2CORRDU(VCZ(2,IVERT),VCN,NDIM,NOFVAR,
d110 2
a111 2
              DO 8 L = 1,NOFVAR
                  DO 8 K = 1,NOFVAR
@


1.1
log
@Initial revision
@
text
@d2 16
a17 5
      SUBROUTINE FLXW2(NDIM,NOFVAR,NOFVERT,STIFC,WORK,WORK2,
     +                 VCZ,VCN,NODRES,PICARD)

      IMPLICIT NONE 

d19 1
a19 15
      INTEGER i,j,IVERT,ifail,IADD,k,l,jvert

      DOUBLE PRECISION STIFC(NOFVAR,NOFVAR,NOFVERT,NOFVERT),
     +VCZ(NOFVAR,NDIM),VCN(NDIM),NODRES(NOFVAR,NDIM)
      DOUBLE PRECISION WORK(NOFVAR,NOFVAR,NOFVERT-1)
      DOUBLE PRECISION WORK2(NOFVAR,NOFVAR,NOFVERT-1,NOFVERT-1)
      double precision FLUX(16)
      double precision alpha,CNST,beta
      parameter(alpha=0.75d0)
      DOUBLE PRECISION ZERO,HALF,ONE,TWO
C
      PARAMETER (ZERO = 0.00d0 , HALF = 0.5d0 , ONE = 1.00d0 , 
     . TWO = 2.00d0 )

      LOGICAL PICARD 
d21 47
d69 2
a70 2
         IADD = (IVERT-1)*NOFVAR+1
         CALL INVWLLI(NDIM,VCN,VCZ(1,IVERT),FLUX(IADD))
d73 1
a73 1
      CALL DINIT(NOFVAR*(NOFVERT-1),ZERO,NODRES,1)
d75 12
a86 10
      DO 5 IVERT = 1,NOFVERT-1
         DO 7 JVERT = 1,NOFVERT-1
            IADD = (JVERT-1)*NOFVAR+1
            IF(JVERT.EQ.IVERT)THEN
               CNST = ALPHA/NDIM
            ELSE
               CNST = BETA
            ENDIF
            CALL DAXPY(NOFVAR,CNST,FLUX(IADD),1,NODRES(1,IVERT),1)
    7    CONTINUE
d89 1
a89 1
      IF(.NOT.PICARD)RETURN
d91 18
a108 14
      DO 3 IVERT = 1,NOFVERT-1
      call GetdF2corrdU(vcz(2,IVERT),vcn,ndim,nofvar,work(1,1,IVERT))
    3 CONTINUE 

      DO 8 I = 1,NOFVERT-1
         DO 8 j = 1,NOFVERT-1
            if( j.eq.i )then
                CNST = alpha / real(ndim)
            else
                CNST = beta
            endif
            DO 8 l = 1,NOFVAR
               DO 8 k = 1,NOFVAR
                  STIFC(k,l,i,j) = 0.5d0*CNST*work(k,l,j)
a110 35
C     CALL X04CAF('General',' ',NOFVAR,ndim,nodres,
C    +NOFVAR,'Stiffness matrix ',IFAIL)
C     DO 8 j = 1,NOFVAR
C     DO 8 I = 1,NOFVAR
C        STIFC(I,j,1,1) = 0.25d0*alpha*work(i,j,1)
C        STIFC(I,j,1,2) = 0.25d0*(1.d0-alpha)*work(i,j,2)
C        STIFC(I,j,2,2) = 0.25d0*alpha*work(i,j,2)
C        STIFC(I,j,2,1) = 0.25d0*(1.d0-alpha)* work(i,j,1)
C   8 CONTINUE
C
C     CALL DINIT(NOFVAR*NDIM,0.d0,NODRES,1)
C
C     compute nodal residuals as - \sum C_{i,j=1}^{d} Z_j
C     the - sign is due to the fact that what we want to
C     split is F(boundary) - F(1)
C
C     do 29 i = 1,ndim
C     do 31 j = 1,ndim
C           call dgemv('N',nofvar,nofvar,-1.d0,stifc(1,1,i,j),nofvar,
C    >                 vcz(1,j),1,1.d0,nodres(1,i),1)
C  31 CONTINUE
C     call daxpy(nofvar,1.d0,nodres(1,i),1,wksp,1)
C
C     nodres(1,i)= 2.d0 * nodres(1,i)
C
C  29 CONTINUE
Cifdef PRINT
C     write(6,*)(wksp(j),j=1,nofvar)
C
C     CALL X04CAF('General',' ',NOFVAR,ndim,nodres,
C    +NOFVAR,'Stiffness matrix ',IFAIL)
C     write(6,*)'INCO node #1',(nodres(j,1),j=1,nofvar)
C     write(6,*)'INCO node #2',(nodres(j,2),j=1,nofvar)
C     pause
Cendif
d112 3
a114 1
  564 FORMAT((E12.6,1X))
@
