head	1.5;
access
	abonfi
	aldo;
symbols;
locks; strict;
comment	@c @;


1.5
date	2009.01.09.13.36.38;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2000.10.20.08.15.02;	author aldo;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.18.14.13.27;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	2000.06.24.09.23.53;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.20.09.24.40;	author aldo;	state Exp;
branches;
next	;


desc
@Hybrid scheme (Pietro & Pino) in 2D
@


1.5
log
@final release, just before removing it from the makefile
@
text
@      SUBROUTINE EulerHyb(IELEM,VCN,VCZ,NDIM,NOFVERT,NOFVAR,
     +NTURB,NODRES,TSTEP,STIFEL,VOLUME,PICARD, ScalarScheme,
     +MatrixScheme)
C
      IMPLICIT NONE
C
C     Hybrid scheme (Pietro & Pino)
C
C     $Id: EulerHyb.f,v 1.4 2000/10/20 08:15:02 aldo Exp aldo $
C
      DOUBLE PRECISION DSTAK
      COMMON /CSTAK/DSTAK(1)
      INTEGER ISTAK(1)
      EQUIVALENCE(ISTAK(1),DSTAK(1))
C
C
      INCLUDE 'paramt.h'
C
C
      INTEGER IMACH
      INCLUDE 'constants'
      INCLUDE 'nloc'
C
C
      INCLUDE 'three'
      INCLUDE 'conv.com'
C
C
      INTEGER IELEM,NDIM,NOFVERT,NOFVAR,NTURB,IOPT,NERR
      INTEGER ICHPSI(4)
      INTEGER NFROZ(90000)
C
      INTRINSIC SQRT
C
C     ScalarScheme and MatrixScheme must be for the subsonic case.
      EXTERNAL ScalarScheme,MatrixScheme,PSI_scheme,LDASys_scheme ,
     +N_scheme, NSys_scheme
C
C
      INTEGER IVAR,IVERT,JVERT,IDIM,IFAIL,IPOIN
      DOUBLE PRECISION SUM,MACHMIN,MACHMINIS,MACHMAXIS,MACHIS
      DOUBLE PRECISION PRES
      LOGICAL LFLAG,PICARD
      CHARACTER*72 ERRMSG
C
C
      DOUBLE PRECISION NODRES(*)
      DOUBLE PRECISION TSTEP(*)
C
C     NODRES(1:NOFVAR,1:NOFVERT) is used to accumulate the
C         nodal residual in conserved variables and scatter
C         it to the RHS PETSc vector
C
C     TSTEP(1:NOFVERT) is used to accumulate the timestep
C         and then scatter it to the DT PETSc vector
C
C
C
      DOUBLE PRECISION VCZ(NOFVAR,NOFVERT),VCN(*),VOLUME,STIFEL(*)
      INTEGER I,L,LDA
C
C
      INTEGER IADDR
      IADDR(L,LDA,I) = (I-1)*LDA+L
C
C
C
C
C
caldo
      DO 20 JVERT = 1, NOFVERT
          IPOIN = ISTAK(IADDR(LCELNOD,NOFVERT,IELEM))
          ICHPSI(JVERT) = ISTAK(IADDR(LCHPSI,1,IPOIN))
   20 CONTINUE
caldo
 
c     Compute minimum Mach number:
 
      MACHMIN = 1.d10
      MACHMINIS = 1.d10
      MACHMAXIS = ZERO
 
      DO JVERT =  1, NOFVERT
 
          IF(NDIM.EQ.3)UAVG(5) = VCZ(5,JVERT)/VCZ(1,JVERT)
 
          UAVG(4) = VCZ(4,JVERT)/VCZ(1,JVERT) ! y componenet of the velocity vec
          UAVG(3) = VCZ(3,JVERT)/VCZ(1,JVERT) ! x componenet of the velocity vec
          UAVG(2) = VCZ(2,JVERT)/VCZ(1,JVERT) ! Total Enthalpy
          UAVG(1) = VCZ(1,JVERT)*VCZ(1,JVERT) ! Density
C
          KINETIC = UAVG(3)*UAVG(3) + UAVG(4)*UAVG(4)
          IF( NDIM .EQ.  3)KINETIC = KINETIC + UAVG(5)*UAVG(5)
          KINETIC = HALF * KINETIC
          ASQR = GM1 * ( UAVG(2) - KINETIC )
          IF( ASQR .LT. ZERO )THEN
              WRITE(ERRMSG,FMT=333)ASQR,IELEM
  333 FORMAT('EULERHYB ',1X,'Negative averaged sound speed ',F7.3,
     +' in element ',I8)
              NERR = 6
              IOPT = 1
              CALL SETERR(ERRMSG(1:67),67,NERR,IOPT)
          ENDIF
          ABAR = SQRT(ASQR)
c     MACHSQR   = DMAX1( TWO * KINETIC / ASQR, EPSQR_STAG) ! Barth & Deconinck
          MACHSQR = TWO * KINETIC / ASQR
          MACH = SQRT( MACHSQR )
c compute Isentropic Mach number
          PRES = 0.4d0/1.4d0 * UAVG(1) * ( UAVG(2) - KINETIC)
          MACHIS=SQRT(5.d0*DABS( (1.9106d0/PRES)**(1.d0/3.5d0) - 1.d0))
 
          MACHMIN = dmin1(MACHMIN,MACH)
          MACHMINIS = dmin1(MACHMINIS,MACHIS)
          MACHMAXIS = dmax1(MACHMAXIS,MACHIS)
 
      END DO
 
c     Compute average Mach number:
 
      DO 10 IVAR = 1 , NOFVAR
          SUM = ZERO
          DO 12 JVERT =  1, NOFVERT
              SUM = SUM + VCZ( IVAR , JVERT )
   12     CONTINUE
          ZAVG(IVAR) = SUM / NOFVERT
   10 CONTINUE
 
      IF(NDIM.EQ.3)
     &UAVG(5) = ZAVG(5)/ZAVG(1) ! z componenet of the velocity vector
      UAVG(4) = ZAVG(4)/ZAVG(1) ! y componenet of the velocity vector
      UAVG(3) = ZAVG(3)/ZAVG(1) ! x componenet of the velocity vector
      UAVG(2) = ZAVG(2)/ZAVG(1) ! Total Enthalpy
      UAVG(1) = ZAVG(1)*ZAVG(1) ! Density
C
      KINETIC = UAVG(3)*UAVG(3) + UAVG(4)*UAVG(4)
      IF( NDIM .EQ. 3 )KINETIC = KINETIC + UAVG(5)*UAVG(5)
      KINETIC = HALF * KINETIC
      ASQR = GM1 * ( UAVG(2) - KINETIC )
      IF( ASQR .LT. ZERO )THEN
          WRITE(ERRMSG,FMT=333)ASQR,IELEM
          NERR = 6
          IOPT = 1
          CALL SETERR(ERRMSG(1:67),67,NERR,IOPT)
      ENDIF
      ABAR      = SQRT(ASQR)
c     MACHSQR   = DMAX1( TWO * KINETIC / ASQR, EPSQR_STAG) ! Barth & Deconinck
      MACHSQR   = TWO * KINETIC / ASQR
      MACH      = SQRT( MACHSQR )
c compute Isentropic Mach number
      PRES = 0.4d0/1.4d0 * UAVG(1) * ( UAVG(2) - KINETIC)
      MACHIS=SQRT(5.d0*DABS( (1.9106d0/PRES)**(1.d0/3.5d0) - 1.d0))
 
      IMACH = ZERO
      DO JVERT = 1, NOFVERT
          IMACH = IMACH + ICHPSI(JVERT)
      END DO
 
      IF (ITER.LE.4500) THEN
 
          if (MACH.lt.ONE.and.IMACH.gt.ZERO.and.MACHMIN.lt.0.90d0) then
c     if (MACH.lt.ONE.and.IMACH.gt.ZERO.and.MACHMIN.lt.0.85d0) then
c     if (MACH.lt.ONE.and.IMACH.gt.ZERO) then
 
              CALL EulerIIbis(IELEM,VCN,VCZ,NDIM,NOFVERT,NOFVAR,
     +        NTURB,NODRES,TSTEP,STIFEL,VOLUME,PICARD, N_scheme,
     +        NSys_scheme)
 
              NFROZ(IELEM) = 1
 
          else if (MACH.lt.ONE) then
 
c         if ((MACHMAXIS-MACHIS)*(MACHIS-MACHMINIS).gt.0.03d0) then
 
c         write(6,*) '....ecco....'
c
c             CALL EulerIIbis(IELEM,VCN,VCZ,NDIM,NOFVERT,NOFVAR,
c    +        NTURB,NODRES,TSTEP,STIFEL,VOLUME,PICARD, N_scheme,
c    +        NSys_scheme)
 
c         else
 
              CALL EulerVII(IELEM,VCN,VCZ,NDIM,NOFVERT,NOFVAR,
     +        NTURB,NODRES,TSTEP,STIFEL,VOLUME,PICARD, ScalarScheme,
     +        MatrixScheme)
 
c         end if
 
              NFROZ(IELEM) = 2
 
          else
 
              CALL EulerII(IELEM,VCN,VCZ,NDIM,NOFVERT,NOFVAR,
     +        NTURB,NODRES,TSTEP,STIFEL,VOLUME,PICARD, ScalarScheme,
     +        NSys_scheme)
 
              NFROZ(IELEM) = 3
 
          end if
 
      ELSE
 
c     if (NFROZ(IELEM).EQ.1) then
          if (NFROZ(IELEM).EQ.1.OR. (NFROZ(IELEM).EQ.3.AND.MACH.LT.ONE))
     +    then
 
              NFROZ(IELEM) = 1
 
              CALL EulerIIbis(IELEM,VCN,VCZ,NDIM,NOFVERT,NOFVAR,
     +        NTURB,NODRES,TSTEP,STIFEL,VOLUME,PICARD, N_scheme,
     +        NSys_scheme)
 
          else if (NFROZ(IELEM).EQ.2) then
 
              CALL EulerVII(IELEM,VCN,VCZ,NDIM,NOFVERT,NOFVAR,
     +        NTURB,NODRES,TSTEP,STIFEL,VOLUME,PICARD, ScalarScheme,
     +        MatrixScheme)
 
          else if (NFROZ(IELEM).EQ.3) then
 
              CALL EulerII(IELEM,VCN,VCZ,NDIM,NOFVERT,NOFVAR,
     +        NTURB,NODRES,TSTEP,STIFEL,VOLUME,PICARD, ScalarScheme,
     +        NSys_scheme)
 
          else
 
              write(6,*) "Che ... ridi?"
 
          end if
 
      END IF
 
 
      END
C
@


1.4
log
@the call to the viscous routines has been removed;
other minor changes
@
text
@d9 1
a9 1
C     $Id: EulerHyb.f,v 1.3 2000/08/18 14:13:27 aldo Exp aldo $
d193 1
a193 1
     +        NTURB,NODRES,TSTEP,STIFEL,VOLUME,PICARD, PSI_scheme,
d221 1
a221 1
     +        NTURB,NODRES,TSTEP,STIFEL,VOLUME,PICARD, PSI_scheme,
@


1.3
log
@replaced STOP with a call to SETERR
@
text
@d1 1
a1 1
      SUBROUTINE EulerHyb(IELEM,VCN,VCZ,VISCT,NDIM,NOFVERT,NOFVAR,
d9 1
a9 1
C     $Id: EulerHyb.f,v 1.2 2000/06/24 09:23:53 aldo Exp aldo $
d47 1
a47 1
      DOUBLE PRECISION NODRES(*),VISCT(*)
d164 1
a164 1
              CALL EulerIIbis(IELEM,VCN,VCZ,VISCT,NDIM,NOFVERT,NOFVAR,
d176 1
a176 1
c             CALL EulerIIbis(IELEM,VCN,VCZ,VISCT,NDIM,NOFVERT,NOFVAR,
d182 1
a182 1
              CALL EulerVII(IELEM,VCN,VCZ,VISCT,NDIM,NOFVERT,NOFVAR,
d192 1
a192 1
              CALL EulerII(IELEM,VCN,VCZ,VISCT,NDIM,NOFVERT,NOFVAR,
d208 1
a208 1
              CALL EulerIIbis(IELEM,VCN,VCZ,VISCT,NDIM,NOFVERT,NOFVAR,
d214 1
a214 1
              CALL EulerVII(IELEM,VCN,VCZ,VISCT,NDIM,NOFVERT,NOFVAR,
d220 1
a220 1
              CALL EulerII(IELEM,VCN,VCZ,VISCT,NDIM,NOFVERT,NOFVAR,
@


1.2
log
@modifiche apportate da Aldo
@
text
@d2 2
a3 2
     +                    NTURB,NODRES,TSTEP,STIFEL,VOLUME,PICARD,
     +                    ScalarScheme,MatrixScheme)
d5 1
a5 1
      IMPLICIT NONE 
d9 1
a9 1
C     $Id$
d29 1
a29 1
      INTEGER IELEM,NDIM,NOFVERT,NOFVAR,NTURB
d36 2
a37 2
      EXTERNAL ScalarScheme,MatrixScheme,PSI_scheme,LDASys_scheme
     +         ,N_scheme, NSys_scheme
d41 2
a42 1
      DOUBLE PRECISION SUM,MACHMIN
d44 1
d55 1
a55 1
C         and then scatter it to the DT PETSc vector 
d76 1
a76 2


d78 27
a104 21

      MACHMIN = ZERO

            DO  JVERT = 1 , NOFVERT

      IF(NDIM.EQ.3)
     &UAVG(5) = VCZ(5,JVERT)/VCZ(1,JVERT) ! z componenet of the velocity vector
      UAVG(4) = VCZ(4,JVERT)/VCZ(1,JVERT) ! y componenet of the velocity vector
      UAVG(3) = VCZ(3,JVERT)/VCZ(1,JVERT) ! x componenet of the velocity vector
      UAVG(2) = VCZ(2,JVERT)/VCZ(1,JVERT) ! Total Enthalpy
      UAVG(1) = VCZ(1,JVERT)*VCZ(1,JVERT) ! Density
C
      KINETIC = UAVG(3)*UAVG(3) + UAVG(4)*UAVG(4)
      IF( NDIM .EQ. 3 )KINETIC = KINETIC + UAVG(5)*UAVG(5)
      KINETIC = HALF * KINETIC
      ASQR = GM1 * ( UAVG(2) - KINETIC )
      IF( ASQR .LT. ZERO )THEN
         WRITE(6,*)'Negative averaged pressure in element ',IELEM
         STOP
      ENDIF
      ABAR      = SQRT(ASQR)
d106 12
a117 7
      MACHSQR   = TWO * KINETIC / ASQR
      MACH      = SQRT( MACHSQR )

      MACHMIN = dmin1(MACHMIN,MACH)
               
            END DO    

d119 1
a119 1

d121 5
a125 5
       SUM = ZERO
            DO 12 JVERT = 1 , NOFVERT
               SUM = SUM + VCZ( IVAR , JVERT )
   12       CONTINUE
      ZAVG(IVAR) = SUM / NOFVERT
d127 1
a127 1

d140 4
a143 2
         WRITE(6,*)'Negative averaged pressure in element ',IELEM
         STOP
d149 4
a152 1

d155 1
a155 1
         IMACH = IMACH + ICHPSI(JVERT)
d157 1
a157 1

d159 2
a160 2

      if (MACH.lt.ONE.and.IMACH.gt.ZERO.and.MACHMIN.lt.0.90d0) then
d163 37
a199 26

      CALL EulerIIbis(IELEM,VCN,VCZ,VISCT,NDIM, 
     +NOFVERT,NOFVAR,NTURB,NODRES,TSTEP,
     +STIFEL,VOLUME,PICARD, N_scheme,NSys_scheme)

      NFROZ(IELEM) = 1

      else if (MACH.lt.ONE) then

      CALL EulerVII(IELEM,VCN,VCZ,VISCT,NDIM, 
     +NOFVERT,NOFVAR,NTURB,NODRES,TSTEP,
     +STIFEL,VOLUME,PICARD, ScalarScheme,MatrixScheme)

      NFROZ(IELEM) = 2

      else

c     CALL EulerIIbis(IELEM,VCN,VCZ,VISCT,NDIM, 
      CALL EulerII(IELEM,VCN,VCZ,VISCT,NDIM, 
     +NOFVERT,NOFVAR,NTURB,NODRES,TSTEP,
     +STIFEL,VOLUME,PICARD, PSI_scheme,NSys_scheme)

      NFROZ(IELEM) = 3

      end if

d201 1
a201 1

d203 27
a229 28
      if (NFROZ(IELEM).EQ.1.OR.
     .    (NFROZ(IELEM).EQ.3.AND.MACH.LT.ONE)) then

      NFROZ(IELEM) = 1

      CALL EulerIIbis(IELEM,VCN,VCZ,VISCT,NDIM, 
     +NOFVERT,NOFVAR,NTURB,NODRES,TSTEP,
     +STIFEL,VOLUME,PICARD, N_scheme,NSys_scheme)

      else if (NFROZ(IELEM).EQ.2) then

      CALL EulerVII(IELEM,VCN,VCZ,VISCT,NDIM, 
     +NOFVERT,NOFVAR,NTURB,NODRES,TSTEP,
     +STIFEL,VOLUME,PICARD, ScalarScheme,MatrixScheme)

      else if (NFROZ(IELEM).EQ.3) then

c     CALL EulerIIbis(IELEM,VCN,VCZ,VISCT,NDIM, 
      CALL EulerII(IELEM,VCN,VCZ,VISCT,NDIM, 
     +NOFVERT,NOFVAR,NTURB,NODRES,TSTEP,
     +STIFEL,VOLUME,PICARD, PSI_scheme,NSys_scheme)

      else

      write(6,*) "Che ... ridi?"

      end if

d231 2
a232 2


@


1.1
log
@Initial revision
@
text
@d1 2
a2 3
      SUBROUTINE EulerHyb(IELEM,LCHPSI,VCN,VCZ,NDIM,NOFVERT,NOFVAR,
c     SUBROUTINE EulerHyb(IELEM,VCN,VCZ,NDIM,NOFVERT,NOFVAR,
     +                    NODRES,TSTEP,STIFEL,VOLUME,PICARD,
d7 1
a7 1
C     Hybrid scheme
d9 1
d11 4
a17 2
      INTEGER LNNVV
      PARAMETER (LNNVV=NMAX*NMAX*VMAX*VMAX)
a18 3
C    NEQMAX is the max. no. of equations (4 in 3D)
C           for the matrix scheme (solves for dp/ra,du,dv,dw)
C    NORDER is actual no. of equations = DIM+1
a19 1
      INTEGER NEQMAX
a20 1
      PARAMETER (NEQMAX=4)
d22 1
a22 1
c     INCLUDE 'bnd.h'
a26 3
c     INCLUDE 'flags.com'
c     INCLUDE 'stream.com'
c     INCLUDE 'IO'
d29 2
a30 2
      INTEGER IELEM,NDIM,NOFVERT,NOFVAR
      INTEGER LCHPSI(NOFVERT)
d40 1
a40 3
      INTEGER IVAR,IVERT,JVERT,FrstEq,JCOL,IDIM,IADD,JADD
      INTEGER NORDER,ifail,M,N,MN,N4
      DOUBLE PRECISION FLUCT,SCALRES,VISCT,TVI,VISCL,TCHI
d45 2
a46 3
c     DOUBLE PRECISION Jacobian(NEQMAX,NEQMAX*3)
c     DOUBLE PRECISION PHI(NEQMAX),WKSP(5),RESIDUAL(2*NEQMAX)
      DOUBLE PRECISION NODRES(*)  !,SYMMV(20),DSYMMV(20)
a54 13
C     SYMMV(1:NOFVAR,1:NOFVERT) is used to store the vector
C         of symmetrizing variables
C
C     DSYMMV(1:NOFVAR,1:NOFVERT) is used to store the change
C         in the vector of symmetrizing variables
C
C
C
      DOUBLE PRECISION TSTEP(*)
C
C     ICN   vertices of the current element (0-based indexing)
C     KCN   same as ICN but with 1-based indexed
C
a55 9
c     INTEGER IWRK
c     PARAMETER(IWRK=10) 
c     INTEGER ICN(VMAX),KCN(VMAX),MOVE(IWRK)
      DOUBLE PRECISION VCZ(NOFVAR,NOFVERT)
     +                ,VCN(*),VOLUME,
c    +                 STIFC(VMAX*VMAX*NEQMAX*NEQMAX),
c    +                 STIFD(VMAX*VMAX*NMAX*NMAX),TEMPB(400),
     +                 STIFEL(*)
c    +                ,dZdU(100),TEMPA(400)
d57 2
a58 8
C     RESIDUAL[1:NORDER] stores the residual computed by
C                        the Matrix scheme as \sum K_j U_j
C     RESIDUAL[NORDER+1:2*NORDER]
C                        stores the residual computed by
C                        the Matrix scheme as \sum_{ij} U_j
C     it is used just for debugging purposes, to be compared with
C     the residual computed as:
C     dF/dU * dU/dX + dG/dU * dU/dy + [ dH/dU * dU/dz ]
d61 2
a62 2
c     DOUBLE PRECISION DDOT,TFV1,TVT,SUTHERLAW
c     EXTERNAL DDOT,TFV1,TVT,SUTHERLAW
a63 1
c     EXTERNAL MatSplitNum,MatSplitVII
a65 2
c     DATA FrstEq,VISCT/2,ZERO/
c     DATA dZdU/100*ZERO/
d68 6
a73 2
      NORDER = NDIM + 1
      N4 = NOFVAR*NOFVAR*NOFVERT*NOFVERT
d138 1
a138 1
         IMACH = IMACH + LCHPSI(JVERT)
d147 2
a148 2
      CALL EulerIIbis(IELEM,LCHPSI,VCN,VCZ,NDIM, 
     +NOFVERT,NOFVAR,NODRES,TSTEP,
d155 2
a156 2
      CALL EulerVII(IELEM,LCHPSI,VCN,VCZ,NDIM, 
     +NOFVERT,NOFVAR,NODRES,TSTEP,
d163 3
a165 3
c     CALL EulerIIbis(IELEM,LCHPSI,VCN,VCZ,NDIM, 
      CALL EulerII(IELEM,LCHPSI,VCN,VCZ,NDIM, 
     +NOFVERT,NOFVAR,NODRES,TSTEP,
d180 2
a181 2
      CALL EulerIIbis(IELEM,LCHPSI,VCN,VCZ,NDIM, 
     +NOFVERT,NOFVAR,NODRES,TSTEP,
d186 2
a187 2
      CALL EulerVII(IELEM,LCHPSI,VCN,VCZ,NDIM, 
     +NOFVERT,NOFVAR,NODRES,TSTEP,
d192 3
a194 3
c     CALL EulerIIbis(IELEM,LCHPSI,VCN,VCZ,NDIM, 
      CALL EulerII(IELEM,LCHPSI,VCN,VCZ,NDIM, 
     +NOFVERT,NOFVAR,NODRES,TSTEP,
@
