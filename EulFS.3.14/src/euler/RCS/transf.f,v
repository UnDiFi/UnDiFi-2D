head	1.11;
access
	caspur
	abonfi
	aldo
	tesistim;
symbols
	release3_14_0:1.11
	release3_13_0:1.11
	release3_12_0:1.11
	release3_11_0:1.11
	release3_10_0:1.11
	release3_8_0:1.11
	release3_7_1:1.11
	release3_7_0:1.11
	release3_4_5:1.11
	release3_4_4:1.11
	release3_4_3:1.11
	release3_4_2:1.11
	release3_4_1:1.11
	release3_4_0:1.11
	release3_3_5:1.11
	release3_3_4:1.10
	release3_3_3:1.10
	release3_3_2:1.7
	release3_3_1:1.6
	release3_3_0:1.5;
locks; strict;
comment	@c @;


1.11
date	2013.04.30.07.42.54;	author abonfi;	state Exp;
branches;
next	1.10;

1.10
date	2013.02.06.07.43.13;	author tesistim;	state Exp;
branches;
next	1.9;

1.9
date	2013.02.05.12.34.03;	author tesistim;	state Exp;
branches;
next	1.8;

1.8
date	2013.02.05.08.10.33;	author abonfi;	state Exp;
branches;
next	1.7;

1.7
date	2013.01.29.14.33.34;	author abonfi;	state Exp;
branches;
next	1.6;

1.6
date	2013.01.26.12.21.35;	author abonfi;	state Exp;
branches;
next	1.5;

1.5
date	2009.01.09.09.57.49;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2005.08.09.19.42.06;	author aldo;	state Exp;
branches;
next	1.3;

1.3
date	2000.08.03.16.41.44;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	99.09.03.10.57.37;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	97.11.29.08.49.33;	author aldo;	state Exp;
branches;
next	;


desc
@Transformations from/to parameter to/from conserved variables
@


1.11
log
@the integer addresses of the energy and momentum dofs
are now in a common
@
text
@      SUBROUTINE parm_to_cons(ZROE,NDIM,NOFVAR,NPOIN,LFLAG,IFAIL)
C
C     $Id: transf.f,v 1.10 2013/02/06 07:43:13 tesistim Exp abonfi $
C
      IMPLICIT NONE
C
      INCLUDE 'constants.h'
      INCLUDE 'pfcgas.com'
C
C     .. Array Arguments ..
C
      INTEGER NDIM,NOFVAR,NPOIN,IFAIL
      LOGICAL LFLAG
      DOUBLE PRECISION ZROE(NOFVAR,NPOIN)
C
C     .. Local Scalars ..
C
      INTEGER INODE 
      DOUBLE PRECISION SUM
C
C     .. External Functions ..
C
C
C     .. Executable Statements ..
C
      IFAIL = 0 
      do 100 INODE = 1 , NPOIN
         IF(LFLAG)ZROE(NOFVAR,INODE)=ZROE(1,INODE) * ZROE(NOFVAR,INODE)
         SUM = ZROE(3,INODE)**2 + ZROE(4,INODE)**2
         IF( NDIM .EQ. 3 )SUM = SUM + ZROE(5,INODE)**2
         ZROE(2,INODE) = GINV * ZROE(1,INODE) * ZROE(2,INODE) +
     .   HALF * GM1OG * SUM
C
         IF(NDIM.EQ.3)ZROE(5,INODE) = ZROE(1,INODE) * ZROE(5,INODE)
         ZROE(4,INODE) = ZROE(1,INODE) * ZROE(4,INODE)
         ZROE(3,INODE) = ZROE(1,INODE) * ZROE(3,INODE)
         ZROE(1,INODE) = ZROE(1,INODE) * ZROE(1,INODE)
  100 CONTINUE
c
      RETURN
      END

      SUBROUTINE cons_to_parm(ZROE,NDIM,NOFVAR,NPOIN,LFLAG,IFAIL)
C
      IMPLICIT NONE
C
c
c This routine transforms the conservative vector into the
c paramter vector overwriting the array Z.
c
      INCLUDE'constants.h'
      INCLUDE 'pfcgas.com'
C
C     .. Array Arguments ..
C
      INTEGER NDIM,NOFVAR,NPOIN,IFAIL
      LOGICAL LFLAG
      DOUBLE PRECISION ZROE(NOFVAR,NPOIN)
C
C     .. Local Scalars ..
C
      INTEGER INODE
      DOUBLE PRECISION SUM
C
C     .. External Functions ..
C
C
C     .. Executable Statements ..
C
      IFAIL = 0 
      DO 100 INODE = 1 , NPOIN
C
         IF(ZROE(1,INODE) .LE. ZERO )THEN
           IFAIL = INODE
           RETURN
         ENDIF
C
         ZROE(1,INODE) = SQRT(ZROE(1,INODE))
         ZROE(3,INODE) = ZROE(3,INODE) / ZROE(1,INODE)
         ZROE(4,INODE) = ZROE(4,INODE) / ZROE(1,INODE)
         IF(NDIM .EQ. 3 )ZROE(5,INODE) = ZROE(5,INODE) / ZROE(1,INODE)
         SUM = ZROE(3,INODE)**2 + ZROE(4,INODE)**2
         IF(NDIM .EQ. 3 )SUM = SUM + ZROE(5,INODE)**2
         ZROE(2,INODE) = GAM *( ZROE(2,INODE) - HALF * GM1OG * SUM )
     & / ZROE(1,INODE)
         IF(LFLAG)ZROE(NOFVAR,INODE)=ZROE(NOFVAR,INODE)/ ZROE(1,INODE)
  100 CONTINUE
C
      RETURN
      END
C
C ------------------------------+------------------------------
C
      SUBROUTINE PARM2PRIM(NDIM,IELEM)
C
      IMPLICIT NONE
C
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
      INCLUDE 'three.com'
      INCLUDE 'pfcgas.com'
C
C     .. Scalar Arguments ..
C
      INTEGER NDIM,IELEM
      INTEGER NERR,IOPT
      CHARACTER*72 ERRMSG
      integer k
C
C     .. Intrinsic Functions ..
C
      INTRINSIC SQRT
C
C     .. External Functions ..
C
C
C     .. Executable Statements ..
C
      IF(NDIM.EQ.3)
     &UAVG(5) = ZAVG(5)/ZAVG(1) ! z component of the velocity vector
      UAVG(4) = ZAVG(4)/ZAVG(1) ! y component of the velocity vector
      UAVG(3) = ZAVG(3)/ZAVG(1) ! x component of the velocity vector
      UAVG(2) = ZAVG(2)/ZAVG(1) ! Total Enthalpy
      UAVG(1) = ZAVG(1)*ZAVG(1) ! Density
C
      KINETIC = UAVG(3)*UAVG(3) + UAVG(4)*UAVG(4)
      IF( NDIM .EQ. 3 )KINETIC = KINETIC + UAVG(5)*UAVG(5) 
      KINETIC = HALF * KINETIC
      ASQR = GM1 * ( UAVG(2) - KINETIC )
      IF( ASQR .LT. ZERO )THEN
         WRITE(6,FMT=*)ASQR,IELEM
         WRITE(ERRMSG(1:67),FMT=333)ASQR,IELEM
  333 FORMAT('PARM2PRIM',1X,'Negative averaged sound speed ',E7.3,
     &       ' in element ',I8)
         WRITE(6,FMT=*)'d = ',ndim
         WRITE(6,FMT=*)'k = ',kinetic
         WRITE(6,FMT=*)(uavg(k),k=1,NMAX)
         NERR = 6
         IOPT = 1
         CALL SETERR(ERRMSG(1:67),67,NERR,IOPT)
      ENDIF
      ABAR      = SQRT(ASQR)
c     MACHSQR   = DMAX1( TWO * KINETIC / ASQR, EPSQR_STAG) ! Barth & Deconinck
      MACHSQR   = TWO * KINETIC / ASQR
      MACH      = SQRT( MACHSQR )

      QINV      = ONE/(MACH*ABAR)
C
      RETURN
      END
C
C
C ------------------------------+------------------------------
C
      SUBROUTINE PARM2PRIM4Ar(NDIM,IELEM)
C
      IMPLICIT NONE
C
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
      INCLUDE 'plasma.h'
      INCLUDE 'chem.h'
      INCLUDE 'commonv.inc'
      INCLUDE 'pfcgas.com'
      INCLUDE 'dofs.com'
      INCLUDE 'streamplasma.com'
      INCLUDE 'three.com'
      INCLUDE 'four.com'
C
C     .. Scalar Arguments ..
      INTEGER NDIM,IELEM
      INTEGER NERR,IOPT,ISP
      CHARACTER*72 ERRMSG
      DOUBLE PRECISION DPDR
      INTEGER k,I
C
C     .. Intrinsic Functions ..
C
      INTRINSIC SQRT
C
C     .. External Functions ..
C
      DOUBLE PRECISION PIM,PIE,PIR
C
C     .. Executable Statements ..
C
C
      SQRTR = ZERO
      DO ISP = 1,NSP
         SQRTR = SQRTR + ZAVG(ISP) ! square root of total density
      ENDDO
      IF(NDIM.EQ.3)
     &UAVG(IZ) = ZAVG(IZ)/SQRTR ! z component of the velocity vector
      UAVG(IY) = ZAVG(IY)/SQRTR ! y component of the velocity vector
      UAVG(IX) = ZAVG(IX)/SQRTR ! x component of the velocity vector
      UAVG(IE) = ZAVG(IE)/SQRTR ! Total Enthalpy
      DO ISP = NSP,1,-1
         UAVG(ISP) = ZAVG(ISP)*SQRTR ! Density of the NSP species
      ENDDO
C
      KINETIC = UAVG(IX)*UAVG(IX) + UAVG(IY)*UAVG(IY)
      IF( NDIM .EQ. 3 )KINETIC = KINETIC + UAVG(IZ)*UAVG(IZ) 
      KINETIC = HALF * KINETIC
C   
C      Pressure derivatives ..      
C
!rpepe      CALL PRESSDERIV(ZAVG,CHI,KAPPA)
!      write(6,*)'k=',KAPPA     
      
      KAPPA = GM1
C
      DENS = SQRTR*SQRTR
      DENSINV = ONE/DENS
C
!       write(6,*)'chis=',CHI
!       write(6,*)'KINETIC=',KINETIC
!       write(6,*)'UAVG=',UAVG     
C  
      DO ISP = 1,NSP
         CHI(ISP) = -GM1*HF0(ISP)/HREFP
!         write(6,*)'chi(',isp,') --> ',chi(isp)         
         ALPHA(ISP) = UAVG(ISP) * DENSINV
         DR(ISP) = PIR(UAVG(IX),NDIM,CHI(ISP),KAPPA)
!         write(6,*)'dr(',isp,') --> ',dr(isp)
!         DR(ISP) = CHI(ISP) + KAPPA*KINETIC
!         write(6,*)'dr2(',isp,') --> ',dr(isp)          
!         write(6,*)'ALPHA(',isp,') --> ',ALPHA(isp)
      ENDDO    
C
      DE = PIE(KAPPA)
!      write(6,*)'de --> ',DE
C
      DO 14 I = 1 , NDIM
         DM(I) = PIM(UAVG(IE+I),KAPPA)         
!         write(6,*)'dm(',I,') --> ',DM(I)
!         DM(I) = -KAPPA*UAVG(IE+I)
!         write(6,*)'dm2(',I,') --> ',DM(I)
   14 CONTINUE
C
C     Sound speed ..
C      
      DPDR = ZERO
      DO ISP = 1 , NSP
        DPDR = DPDR + ALPHA(ISP)*DR(ISP) 
      ENDDO       
      ASQR = DPDR + DE * (UAVG(IE) - TWO * KINETIC) ! a^2 = \sum_{i=1}^{N_s} \alpha_i \Pi_{\rho_i}  + \Pi_{\rho E}  (H - \mathbf{u} \cdot \mathbf{u})       
!       write(*,*)'ASQR pressure derivatives=',ASQR
!       ASQR = GM1 * ( UAVG(IE) - KINETIC ) 
!      write(*,*)'ASQR Z=',ASQR      
!        pause
      IF( ASQR .LT. ZERO )THEN
         WRITE(6,FMT=*)ASQR,IELEM
         WRITE(ERRMSG(1:70),FMT=333)ASQR,IELEM
  333 FORMAT('PARM2PRIM4Ar',1X,'Negative averaged sound speed ',E7.3,
     &       ' in element ',I8)
         WRITE(6,FMT=*)'d = ',ndim
         WRITE(6,FMT=*)'DPDR = ',DPDR
         WRITE(6,FMT=*)'k = ',kinetic
         WRITE(6,FMT=*)(uavg(k),k=1,MAXNOFVAR)
         NERR = 6
         IOPT = 1
         CALL SETERR(ERRMSG(1:67),67,NERR,IOPT)
      ENDIF
      ABAR      = SQRT(ASQR)
c     MACHSQR   = DMAX1( TWO * KINETIC / ASQR, EPSQR_STAG) ! Barth & Deconinck
      MACHSQR   = TWO * KINETIC / ASQR
      MACH      = SQRT( MACHSQR )

      QINV      = ONE/(MACH*ABAR)
C
      RETURN
      END
C

      SUBROUTINE parm_to_cons4Ar(ZROE,NDIM,NOFVAR,NPOIN,LFLAG,IFAIL)
C
C     $Id: transf.f,v 1.10 2013/02/06 07:43:13 tesistim Exp abonfi $
C
      IMPLICIT NONE
C
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
      INCLUDE 'plasma.h'
      INCLUDE 'chem.h'
      INCLUDE 'commonv.inc' 
      INCLUDE 'dofs.com'
      INCLUDE 'streamplasma.com'
      INCLUDE 'pfcgas.com'
C
C     .. Array Arguments ..
C
      INTEGER NDIM,NOFVAR,NPOIN,IFAIL
      LOGICAL LFLAG
      DOUBLE PRECISION ZROE(NOFVAR,NPOIN)
C
C     .. Local Scalars ..
C
      INTEGER INODE,ISP
      DOUBLE PRECISION KINE,SQRTR,HFTOT
C
C     .. External Functions ..
C
C
C     .. Executable Statements ..
C
      IFAIL = 0      
C
      do 100 INODE = 1 , NPOIN
         SQRTR = ZERO
         DO ISP = 1,NSP
            SQRTR = SQRTR + ZROE(ISP,INODE) ! \sqrt{\rho} = \sum_{s=1}^{NSP} \sqrt{\rho_s}
         ENDDO
         KINE = ZROE(IX,INODE)**2 + ZROE(IY,INODE)**2
         IF( NDIM .EQ. 3 )KINE = KINE + ZROE(IZ,INODE)**2
         KINE = HALF * KINE ! \rho (u^2+v^2+w^2)
C
C        FORMATION ENTHALPY
         HFTOT = ZERO
         DO ISP = 1,NSP
            HFTOT = HFTOT + ZROE(ISP,INODE) * HF0(ISP)
         ENDDO
         HFTOT = HFTOT * SQRTR / HREFP
C         write(6,*) "HFTOT=",HFTOT
C         write(6,*) "HREFP",HREFP
C         pause
C
C        pressure
!        DPDRZ = ZERO
!        DO ISP = 1,NSP
!           DPDRZ = DPDRZ + DR(ISP) * ZROE(ISP,INODE)
!        ENDDO
!        PRESS = DPDRZ + DE*ZROE(IE,INODE) + DM(1)*ZROE(IX,INODE)
!    &         + DM(2)*ZROE(IY,INODE)
!        IF (NDIM .EQ. 3) THEN
!           PRESS = PRESS + DM(3)*ZROE(IZ,INODE)  
!        ENDIF
!        PRESS = PRESS * SQRTR / (ONE + DE)
C         
!        ZROE(IE,INODE) = SQRTR * ZROE(IE,INODE) - PRESS    
!         ZROE(IE,INODE) = GINV*(SQRTR*ZROE(IE,INODE)+GM1*KINE) ! has become \rho E !rpepe manca Hf0
         ZROE(IE,INODE) = GINV*(SQRTR*ZROE(IE,INODE)+GM1*(KINE+HFTOT))
C
         IF(NDIM.EQ.3)ZROE(IZ,INODE) = SQRTR * ZROE(IZ,INODE) ! becomes \rho w
         ZROE(IY,INODE) = SQRTR * ZROE(IY,INODE) ! becomes \rho v
         ZROE(IX,INODE) = SQRTR * ZROE(IX,INODE) ! becomes \rho u
         DO ISP = IE-1,1,-1 ! loop over species
            ZROE(ISP,INODE) = SQRTR * ZROE(ISP,INODE) ! is now \rho_s
         ENDDO
  100 CONTINUE
c
      RETURN
      END

      SUBROUTINE cons_to_parm4Ar(ZROE,NDIM,NOFVAR,NPOIN,LFLAG,IFAIL)
C
      IMPLICIT NONE
C
c
c This routine transforms the conservative vector into the
c paramter vector overwriting the array Z.
c
      INCLUDE 'paramt.h' 
      INCLUDE 'constants.h'
      INCLUDE 'plasma.h'
      INCLUDE 'chem.h'
      INCLUDE 'commonv.inc'
      INCLUDE 'dofs.com'
      INCLUDE 'streamplasma.com'
      INCLUDE 'pfcgas.com'
C
C     .. Array Arguments ..
C
      INTEGER NDIM,NOFVAR,NPOIN,IFAIL
      LOGICAL LFLAG
      DOUBLE PRECISION ZROE(NOFVAR,NPOIN)
C
C     .. Local Scalars ..
C
      INTEGER INODE,ISP
      DOUBLE PRECISION KINE,SQRTR,RHO,PRESS,DPDRU,HFTOT
C
C     .. External Functions ..
C
C
C     .. Executable Statements ..
C
      IFAIL = 0 
      DO 100 INODE = 1 , NPOIN
C
         RHO = ZERO ! total density
         DO ISP = 1, NSP
            RHO = RHO + ZROE(ISP,INODE)
         ENDDO
         IF(RHO .LT. ZERO )THEN
            WRITE(6,*)'r = ',RHO,INODE,(ZROE(ISP,INODE),ISP=1,NOFVAR) 
            IFAIL = INODE
            RETURN
         ENDIF
C
         SQRTR = SQRT(RHO)
C
C        Formation Enthalpy
         HFTOT = ZERO
         DO ISP = 1,NSP
C             HFTOT = ZROE(ISP,INODE) * HF0(ISP)
             HFTOT = HFTOT + ZROE(ISP,INODE) * HF0(ISP)
         ENDDO
!         HFTOT = HFTOT * SQRTR / HREFP
         HFTOT = HFTOT/ HREFP
C
C        pressure
!        DPDRU = 0 
!        DO ISP = 1,NSP
!           DPDRU = DPDRU + DR(ISP) * ZROE(ISP,INODE)
!        ENDDO
!        PRESS = DPDRU + DE*ZROE(IE,INODE) + DM(1)*ZROE(IX,INODE)
!    &         + DM(2)*ZROE(IY,INODE)
!        IF (NDIM .EQ. 3) THEN
!           PRESS = PRESS + DM(3)*ZROE(IZ,INODE)  
!        ENDIF
C         
         ZROE(IX,INODE) = ZROE(IX,INODE) / SQRTR ! \rho u := \sqrt{\rho} u
         ZROE(IY,INODE) = ZROE(IY,INODE) / SQRTR ! \rho u := \sqrt{\rho} u
         IF(NDIM .EQ. 3 )ZROE(IZ,INODE) = ZROE(IZ,INODE) / SQRTR ! \rho w := \sqrt{\rho} w
         KINE = ZROE(IX,INODE)**2 + ZROE(IY,INODE)**2
         IF(NDIM .EQ. 3)KINE = KINE + ZROE(IZ,INODE)**2
         KINE = HALF * KINE  ! = \rho ( u^2 + v^2 + w^2 ) / 2
!        ZROE(IE,NODE) = (ZROE(IE,NODE) + PRESS) / SQRTR  !Da utilizzare per miscele di gas reali
!         ZROE(IE,INODE) = GAM *( ZROE(IE,INODE) - GM1OG * KINE ) / SQRTR !manca entalpia di formazione
         ZROE(IE,INODE) = GAM *(ZROE(IE,INODE) - GM1OG * (KINE 
     &                     + HFTOT)) / SQRTR   
         DO ISP = IE-1,1,-1
            ZROE(ISP,INODE) = ZROE(ISP,INODE) / SQRTR ! \rho_s := \rho_s / \sqrt{\rho_1}
         ENDDO
  100 CONTINUE
C
      RETURN
      END
@


1.10
log
@cosmetic changes
@
text
@d3 1
a3 1
C     $Id: transf.f,v 1.9 2013/02/05 12:34:03 tesistim Exp $
d98 3
a100 3
      INCLUDE'paramt.h'
      INCLUDE'constants.h'
      INCLUDE'three.com'
d112 1
a112 1
      INTRINSIC	SQRT
d159 10
a168 9
      INCLUDE'paramt.h'
      INCLUDE'constants.h'
      INCLUDE'plasma.h'
      INCLUDE'chem.h'
      INCLUDE'commonv.inc'
      INCLUDE'pfcgas.com'
      INCLUDE'streamplasma.com'
      INCLUDE'three.com'
      INCLUDE'four.com'
d277 1
a277 1
C     $Id: transf.f,v 1.9 2013/02/05 12:34:03 tesistim Exp $
d286 1
d367 1
@


1.9
log
@fixed a write statement
@
text
@d3 1
a3 1
C     $Id: transf.f,v 1.8 2013/02/05 08:10:33 abonfi Exp tesistim $
d204 1
a204 1
C      Pressure derivatives      
d206 1
a206 1
!      CALL PRESSDERIV(ZAVG,CHI,KAPPA)
a209 1
!      write(6,*)'k=',KAPPA   
d214 4
a217 2
!      write(6,*)'chis=',CHI

d220 1
d223 3
a225 1
!      write(6,*)'dr(',isp,') --> ',dr(isp)
d227 1
a227 3
      ENDDO
C
!      pause
d230 1
d233 4
a236 1
         DM(I) = PIM(UAVG(IE+I),KAPPA)
d238 2
d246 2
a247 2
!      write(*,*)'ASQR pressure derivatives=',ASQR
!      ASQR = GM1 * ( UAVG(IE) - KINETIC ) 
d249 1
a249 1
!       pause
d256 1
d276 1
a276 1
C     $Id: transf.f,v 1.8 2013/02/05 08:10:33 abonfi Exp tesistim $
@


1.8
log
@changes made by Raffaele in January 2013:
needed to upgrade to his 3.2.11 release of the code
@
text
@d3 1
a3 1
C     $Id: transf.f,v 1.9 2013/01/31 17:09:47 tesistim Exp $
d244 1
a244 1
         WRITE(ERRMSG(1:67),FMT=333)ASQR,IELEM
d267 1
a267 1
C     $Id: transf.f,v 1.9 2013/01/31 17:09:47 tesistim Exp $
@


1.7
log
@The adiabatic index is not any longer a parameter, but a variable
@
text
@d3 1
a3 1
C     $Id: transf.f,v 1.6 2013/01/26 12:21:35 abonfi Exp abonfi $
d112 1
a112 1
      INTRINSIC SQRT
d164 1
a164 1
      INCLUDE 'pfcgas.com'
a171 1
!      INTEGER IX,IY,IZ,IE
a185 4
!      IE = NSP + 1
!      IX = NSP + 2
!      IY = NSP + 3
!      IZ = NSP + 4
d206 1
a206 1
      CALL PRESSDERIV(ZAVG,CHI,KAPPA)
d221 2
a222 1
!     write(6,*)'dr(',isp,') --> ',dr(isp)
d224 1
a224 1
!      write(6,*)'chis=',CHI
d267 1
a267 1
C     $Id: transf.f,v 1.6 2013/01/26 12:21:35 abonfi Exp abonfi $
d276 1
a277 1
      INCLUDE 'streamplasma.com'
d307 1
a307 1
         HFTOT = 0d0
a308 1
C            HFTOT = ZROE(ISP,INODE) * HF0(ISP)
d356 1
a357 1
      INCLUDE 'streamplasma.com'
a367 1
!      INTEGER IX,IY,IZ,IE
a374 4
!      IX = NSP+2 ! x-momentum
!      IY = NSP+3 ! y-momentum
!      IZ = NSP+4 ! z-momentum
!      IE = NSP+1 ! energy
d396 2
a397 1
         HFTOT = HFTOT * SQRTR / HREFP
d416 2
a417 2
!        ZROE(IE,NODE) = (ZROE(IE,NODE) + PRESS) / SQRTR
!         ZROE(IE,INODE) = GAM *( ZROE(IE,INODE) - GM1OG * KINE ) / SQRTR
d419 1
a419 1
     &                     + HFTOT)) / SQRTR
@


1.6
log
@Added support for an Argon plasma
@
text
@d3 1
a3 1
C     $Id: transf.f,v 1.8 2012/06/05 14:47:23 tesistim Exp tesistim $
d8 1
d52 1
d101 1
d112 1
a112 1
      INTRINSIC	SQRT
d164 1
d271 1
a271 1
C     $Id: transf.f,v 1.8 2012/06/05 14:47:23 tesistim Exp tesistim $
d280 1
a281 2
C     INCLUDE 'three.com'
C     INCLUDE 'four.com'
d361 1
@


1.5
log
@add an IFAIL flag among the arguments of the call
@
text
@d3 1
a3 1
C     $Id: transf.f,v 1.4 2005/08/09 19:42:06 aldo Exp abonfi $
d50 1
a50 1
      INCLUDE'constants'
d98 1
a98 1
      INCLUDE'three'
d117 3
a119 3
     &UAVG(5) = ZAVG(5)/ZAVG(1) ! z componenet of the velocity vector
      UAVG(4) = ZAVG(4)/ZAVG(1) ! y componenet of the velocity vector
      UAVG(3) = ZAVG(3)/ZAVG(1) ! x componenet of the velocity vector
d149 283
@


1.4
log
@add a flag useful when turbulent viscosity
is multiplied by \sqrt{\rho}
@
text
@d1 1
a1 1
      SUBROUTINE parm_to_cons(ZROE,NDIM,NOFVAR,NPOIN,LFLAG)
d3 1
a3 1
C     $Id:$
d7 1
a7 1
      INCLUDE'constants'
d11 1
a11 1
      INTEGER NDIM,NOFVAR,NPOIN
d25 1
d42 1
a42 1
      SUBROUTINE cons_to_parm(ZROE,NDIM,NOFVAR,NPOIN,LFLAG)
d54 1
a54 1
      INTEGER NDIM,NOFVAR,NPOIN
d60 1
a60 1
      INTEGER INODE,NERR,IOPT
a61 1
      CHARACTER*72 ERRMSG
d68 1
d72 2
a73 5
           WRITE(ERRMSG(1:72),FMT=105)ZROE(1,INODE),INODE
  105 FORMAT('CONS_TO_PARM',1X,'NEG. DENSITY ',F7.3,' IN NODE ',I6)
           NERR = 5
           IOPT = 1
           CALL SETERR(ERRMSG(1:60),60,NERR,IOPT)
d97 1
a97 1
      INCLUDE'constants'
@


1.3
log
@STOP replaced by a call to SETERR
@
text
@d1 3
a3 1
      SUBROUTINE parm_to_cons(ZROE,NDIM,NOFVAR,NPOIN)
d12 1
d26 1
d41 1
a41 1
      SUBROUTINE cons_to_parm(ZROE,NDIM,NOFVAR,NPOIN)
d54 1
d86 1
d107 1
d130 1
d132 1
a132 1
  333 FORMAT('PARM2PRIM',1X,'Negative averaged sound speed ',F7.3,
d134 3
@


1.2
log
@minor change
@
text
@d34 2
a35 2
      return
      end
d54 1
a54 1
      INTEGER INODE
d56 1
d63 11
a73 9
      do 100 INODE = 1 , NPOIN
c
         if(ZROE(1,INODE) .le. zero )then
           write(*,105)INODE,ZROE(1,INODE)
  105 format(1X,'Neg. density in node ',I5,2X,F7.3)
           stop
         endif
c
         ZROE(1,INODE) = sqrt(ZROE(1,INODE))
d82 3
a84 3
c
      return
      end
d99 2
d123 6
a128 2
         WRITE(6,*)'Negative averaged pressure in element ',IELEM
         STOP
@


1.1
log
@Initial revision
@
text
@a18 2
      DOUBLE PRECISION	DDOT
      EXTERNAL	DDOT 
a58 2
      DOUBLE PRECISION DDOT
      EXTERNAL         DDOT 
a102 2
      DOUBLE PRECISION DDOT
      EXTERNAL         DDOT
@
