head	1.10;
access
	tesistim;
symbols
	release3_14_0:1.10
	release3_13_0:1.10
	release3_12_0:1.10
	release3_11_0:1.10
	release3_10_0:1.10
	release3_8_0:1.10
	release3_7_1:1.10
	release3_7_0:1.9
	release3_4_5:1.9
	release3_4_4:1.9
	release3_4_3:1.9
	release3_4_2:1.9
	release3_4_1:1.9
	release3_4_0:1.9
	release3_3_5:1.9
	release3_3_4:1.9
	release3_3_3:1.9
	release3_3_2:1.9
	release3_3_1:1.8
	release3_3_0:1.8;
locks; strict;
comment	@c @;


1.10
date	2020.03.28.09.51.15;	author abonfi;	state Exp;
branches;
next	1.9;

1.9
date	2013.01.29.14.33.34;	author abonfi;	state Exp;
branches;
next	1.8;

1.8
date	2012.12.20.10.33.01;	author abonfi;	state Exp;
branches;
next	1.7;

1.7
date	2010.12.03.14.08.17;	author abonfi;	state Exp;
branches;
next	1.6;

1.6
date	2010.11.13.11.06.31;	author abonfi;	state Exp;
branches;
next	1.5;

1.5
date	2010.11.06.10.30.27;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2010.10.04.12.40.58;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	2009.08.13.14.21.11;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	2009.08.11.14.45.51;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2009.08.07.07.52.53;	author abonfi;	state Exp;
branches;
next	;


desc
@eigenvector decomposition for Merkle preconditioner
@


1.10
log
@renamed subroutine call
@
text
@!> \copydoc MatSplitIX()
      SUBROUTINE MatSplitX(IELEM,NDIM,NORDER,VECN,
     +JacobianMatrix,LDJ,KMAT,KPOS,KNEG,VLEFT,VRIGHT,LDA,
     +WR,LPOS,LNEG,EIGENDECO)
C
C     $Id: matsplX.F,v 1.9 2013/01/29 14:33:34 abonfi Exp abonfi $
C
C     generalized inflow parameters for the Choi-Merkle preconditioner in
c     primitive variables 
C
C     when the pre-processor flag PETSC_USE_DEBUG is defined
C     compare the analyical expresion for \K^{\pm} with
C     the one obtained as R \Lambda^{\pm} L.
C
CCCCCCCC#define FSPL_USE_DEBUG
C
C
      IMPLICIT NONE
C
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
C
      INCLUDE 'pfcgas.com'
      INCLUDE 'flags.com'
      INCLUDE 'merkle.com'
      INCLUDE 'stream.com'
      INCLUDE 'three.com'
C
      INTEGER IELEM,NDIM,NORDER,LDA,LDJ
      LOGICAL EIGENDECO
C
      DOUBLE PRECISION VECN(NDIM)
      DOUBLE PRECISION JacobianMatrix(LDJ,*)
      DOUBLE PRECISION KMAT(LDA,*),KPOS(LDA,*),KNEG(LDA,*),
     +VLEFT(LDA,*),VRIGHT(LDA,*),WR(*),LPOS(*),LNEG(*)
C
      INTEGER I,J,K,IDIM,JDIM,IFAIL
      DOUBLE PRECISION l,m,n,U_dot_M,NX,NY,NZ,DELTA,
     &AREAINV,AREA,DENSINV,HELP,T3,T4,D43,D34,TEMP
C
C
#ifdef FSPL_USE_DEBUG
      DOUBLE PRECISION VECM(3),VECS(3),VECT(3)
      DOUBLE PRECISION WKSPA(5,5),WKSPB(5,5)
      DOUBLE PRECISION WKSPC(5,5),WKSPD(5,5)
      DOUBLE PRECISION WORK1(5,5),WORK2(5,5)
      DOUBLE PRECISION KPLUS(5,5),KMINS(5,5)
      INTEGER TABLE(3,3),INDX,IV1(5)
      DOUBLE PRECISION SURF,SUM1,SUM2,TEMP1,Nxyz,Sxyz,Txyz
      LOGICAL LFLAG
#endif
C
      DOUBLE PRECISION DDOT,DNRM2
      INTEGER  ISDMIN
      LOGICAL  NULLMAT,UNITMAT
      EXTERNAL ISDMIN,DDOT,DNRM2,NULLMAT,UNITMAT
C
      INTRINSIC DSQRT
C
      DATA l,m,n / 3*ZERO /
#ifdef FSPL_USE_DEBUG
      DATA (table(1,j),j=1,3) / 1,0,0 /
      DATA (table(2,j),j=1,3) / 0,1,0 /
      DATA (table(3,j),j=1,3) / 0,0,1 /
      DATA LFLAG / .FALSE. /
#endif
C
C     Executable Statements ..
C
C
C     REM: 
C     U_dot_M is the dot product between the velocity vector
C          and the face normal divided by the spatial dimension (d) ..
C
      l = VECN(1)/NDIM
      m = VECN(2)/NDIM
      U_dot_M = UAVG(3) * l + UAVG(4) * m
      IF( NDIM .EQ. 3 )THEN
           n = VECN(3)/NDIM
           U_dot_M = U_dot_M + UAVG(5) * n
      ENDIF
!     HELP = GM1*M_INFTY*M_INFTY
      HELP = GM1OG/RSTAR
C
C     Jacobian Matrix for primitive (p,T,u,v,w) variables ..
C
      KMAT(1,1) = U_dot_M * AMPSQR
      KMAT(1,2) = ZERO
      KMAT(1,3) = UAVG(1)*ASQR*AMPSQR*l
      KMAT(1,4) = UAVG(1)*ASQR*AMPSQR*m
C
      KMAT(2,1) = HELP*(AMPSQR-ONE)*U_dot_M/UAVG(1)
      KMAT(2,2) = U_dot_M
      KMAT(2,3) = HELP*AMPSQR*ASQR*l
      KMAT(2,4) = HELP*AMPSQR*ASQR*m
C
      KMAT(3,1) = l/UAVG(1)
      KMAT(3,2) = ZERO
      KMAT(3,3) = U_dot_M
      KMAT(3,4) = ZERO
C
      KMAT(4,1) = m/UAVG(1)
      KMAT(4,2) = ZERO
      KMAT(4,3) = ZERO
      KMAT(4,4) = U_dot_M
C
      IF( NDIM .NE. 3 )GOTO 7
C
      KMAT(1,5) = UAVG(1)*ASQR*AMPSQR*n
      KMAT(2,5) = HELP*AMPSQR*ASQR*n
      KMAT(3,5) = ZERO
      KMAT(4,5) = ZERO
C
      KMAT(5,1) = n/UAVG(1)
      KMAT(5,2) = ZERO
      KMAT(5,3) = ZERO
      KMAT(5,4) = ZERO
      KMAT(5,5) = U_dot_M
C
C     return if there is no need to split the
C     KMAT matrix into its positive and negative parts
C
    7 IF( EIGENDECO .EQV. .FALSE. )RETURN
C
C     Some useful constants ..
C
      AREA = VECN(1)*VECN(1)+VECN(2)*VECN(2)
      IF( NDIM .EQ. 3 ) AREA=AREA + VECN(3)*VECN(3)
      AREA = SQRT(AREA)
      AREAINV = ONE/AREA
      AREA = AREA/NDIM
C
      U_dot_M = U_dot_M / AREA
C
C     Now U_dot_M is velocity \cdot unit normal vector
C
      DELTA = 4.d0*ASQR*AMPSQR+((AMPSQR-ONE)*U_dot_M)**2
      DELTA = SQRT(DELTA)
C
C     REMARK that at this stage the Eigenvalues do NOT
C     contain the area
C
      WR(1) = U_dot_M
      WR(2) = U_dot_M
      WR(3) = ( U_dot_M*(ONE+AMPSQR) + DELTA )* HALF
      WR(4) = ( U_dot_M*(ONE+AMPSQR) - DELTA )* HALF
      WR(5) = U_dot_M
C
#if 0
      call rg(LDA,4,KMAT,WKSPA,WKSPB,0,VRIGHT,IV1,WKSPD,IFAIL)
      if (IFAIL.EQ.0)then
      write(6,*)(WKSPA(j,1),j=1,4)
      else
         stop 'rg has failed'
      endif
#endif
C
C    Positive and negative eigenvalues ..
C
      DO 12 IDIM = 1 , NORDER
         LPOS(IDIM) = HALF * (WR(IDIM) + ABS(WR(IDIM)) ) * AREA
         LNEG(IDIM) = HALF * (WR(IDIM) - ABS(WR(IDIM)) ) * AREA
   12 CONTINUE
C
      DENSINV = ONE/UAVG(1)
C
      D43 = WR(4)-WR(3)
      T3 = WR(3)-AMPSQR*WR(1)!U_dot_M
      T4 = WR(4)-AMPSQR*WR(1)
!     HELP = GM1*M_INFTY*M_INFTY/UAVG(1)
      HELP = GM1OG/(RSTAR*UAVG(1))
C
#ifdef FSPL_USE_DEBUG
C
      IF( NDIM .EQ. 2 )THEN
         VECM(1) = VECN(1)*AREAINV
         VECM(2) = VECN(2)*AREAINV
         VECM(3) = ZERO
         VECS(1) = - VECM(2)
         VECS(2) = VECM(1)
         VECS(3) = ZERO
         VECT(1) = ZERO
         VECT(2) = ZERO
         VECT(3) =  ONE
      ELSE
         VECM(1) = VECN(1)*AREAINV
         VECM(2) = VECN(2)*AREAINV
         VECM(3) = VECN(3)*AREAINV
         INDX = ISDMIN(NDIM,VECM,1)
         VECS(1) = table(2,INDX) * VECM(3) - table(3,INDX) * VECM(2)
         VECS(2) = table(3,INDX) * VECM(1) - table(1,INDX) * VECM(3)
         VECS(3) = table(1,INDX) * VECM(2) - table(2,INDX) * VECM(1)
         SURF = ONE/DNRM2(NDIM,VECS,1)
         VECS(1) = VECS(1)*SURF
         VECS(2) = VECS(2)*SURF
         VECS(3) = VECS(3)*SURF
         CALL CROSS_PROD( VECM , VECS , VECT )
      ENDIF
C
C     Left Eigenvectors (1st col) ..
C
      VLEFT(1,1) =-HELP
      VLEFT(2,1) = ZERO
      VLEFT(3,1) = ONE
      VLEFT(4,1) = ONE
      IF(NDIM.EQ.3) VLEFT(5,1) = ZERO
C
C     Left Eigenvectors (4th col) ..
C
      VLEFT(1,2) = ONE
      VLEFT(2,2) = ZERO
      VLEFT(3,2) = ZERO
      VLEFT(4,2) = ZERO
      IF(NDIM.EQ.3) VLEFT(5,2) = ZERO
C
C     Right Eigenvectors (1st row) ..
C
      VRIGHT(1,1) = ZERO
      VRIGHT(1,2) = ZERO
      VRIGHT(1,3) = T4/D43
      VRIGHT(1,4) =-T3/D43
      IF(NDIM.EQ.3) VRIGHT(1,5) = ZERO
C
C     Right Eigenvectors (2nd row) ..
C
      VRIGHT(2,1) = ONE
      VRIGHT(2,2) = ZERO
      VRIGHT(2,3) = HELP*T4/D43
      VRIGHT(2,4) =-HELP*T3/D43
      IF(NDIM.EQ.3) VRIGHT(2,5) = ZERO
C
      DO 10 JDIM = 1 , NDIM
C
         IDIM = JDIM + 2
         Nxyz = VECM(JDIM)
         Sxyz = VECS(JDIM)
         Txyz = VECT(JDIM)
C
C     Left Eigenvectors ..
C
         VLEFT(1,IDIM) = ZERO
         VLEFT(2,IDIM) = Sxyz
         VLEFT(3,IDIM) = Nxyz*UAVG(1)*T3
         VLEFT(4,IDIM) = Nxyz*UAVG(1)*T4
         IF(NDIM.EQ.3) VLEFT(5,IDIM) = Txyz
C
C     Right Eigenvectors ..
C
         VRIGHT(IDIM,1) = ZERO
         VRIGHT(IDIM,2) = Sxyz
         VRIGHT(IDIM,3) =-DENSINV*Nxyz/D43
         VRIGHT(IDIM,4) = DENSINV*Nxyz/D43 
         VRIGHT(IDIM,5) = Txyz ! not sure
C
   10 CONTINUE
C
C
C    Test if the product of the two eigenvectors equals the
C    identity matrix: VRIGHT*VLEFT = Identity
C
            CALL DGEMM('N','N',NORDER,NORDER,NORDER,1.D0,VRIGHT,LDA,
     +                 VLEFT,LDA,0.D0,WORK1,5)
            IF( UNITMAT(WORK1,NORDER,NORDER,5,1.D-15) .EQV. .FALSE. )
     +      THEN
                CALL R8Mat_Print('G',' ',NORDER,NORDER,WORK1,5,
     +                      'L*R = Identity matrix ????',IFAIL)
                PAUSE
            ENDIF
C
C     compute VRIGHT * LAMBDA(+/-) * VLEFT
C
      DO 15 J = 1 , NORDER
         DO 15 I = 1 , NORDER
            SUM1 = ZERO
            SUM2 = ZERO
            DO 13 K = 1 , NORDER
               TEMP1= VRIGHT(I,K) * VLEFT(K,J)
               SUM1 = SUM1 + TEMP1* LPOS(K)
               SUM2 = SUM2 + TEMP1* LNEG(K)
   13       CONTINUE
            KPLUS(I,J) = SUM1
            KMINS(I,J) = SUM2
   15 CONTINUE
C
#endif
C
CREM  VECN is not divided by d ?!?! 
C
C
      NX = VECN(1) * AREAINV
      NY = VECN(2) * AREAINV
      IF( NDIM .EQ. 3 )NZ = VECN(3) * AREAINV
C
      D34 = -ONE/D43
C
      KPOS(1,1) = (LPOS(4)*T3-LPOS(3)*T4)*D34
      KPOS(1,2) = ZERO
      KPOS(1,3) = UAVG(1)*T3*T4*(LPOS(4)-LPOS(3))*NX*D34
      KPOS(1,4) = UAVG(1)*T3*T4*(LPOS(4)-LPOS(3))*NY*D34
C
      KPOS(2,1) = HELP*(KPOS(1,1)-LPOS(1))
      KPOS(2,2) = LPOS(1)
      KPOS(2,3) = HELP*KPOS(1,3)
      KPOS(2,4) = HELP*KPOS(1,4)
C
      KPOS(3,1) = (LPOS(3)-LPOS(4))*D34*DENSINV*NX
      KPOS(3,2) = ZERO
      TEMP = (LPOS(3)*T3-LPOS(4)*T4)*D34 - LPOS(1)
      KPOS(3,3) = LPOS(1) + TEMP*NX*NX
      KPOS(3,4) = TEMP*NX*NY
C
      KPOS(4,1) = (LPOS(3)-LPOS(4))*D34*DENSINV*NY
      KPOS(4,2) = ZERO
      KPOS(4,3) = KPOS(3,4)
      KPOS(4,4) = LPOS(1) + TEMP*NY*NY
C
      IF(NDIM.EQ.3)THEN
C
         KPOS(1,5) = UAVG(1)*T3*T4*(LPOS(4)-LPOS(3))*NZ*D34
         KPOS(2,5) = HELP*KPOS(1,5)
         KPOS(5,1) = (LPOS(3)-LPOS(4))*D34*DENSINV*NZ
         KPOS(5,2) = ZERO
         KPOS(3,5) = TEMP*NX*NZ
         KPOS(4,5) = TEMP*NY*NZ
         KPOS(5,5) = LPOS(1) + TEMP*NZ*NZ
         KPOS(5,3) = KPOS(3,5)
         KPOS(5,4) = KPOS(4,5)
C
      ENDIF
C
C
      KNEG(1,1) = (LNEG(4)*T3-LNEG(3)*T4)*D34
      KNEG(1,2) = ZERO
      KNEG(1,3) = UAVG(1)*T3*T4*(LNEG(4)-LNEG(3))*NX*D34
      KNEG(1,4) = UAVG(1)*T3*T4*(LNEG(4)-LNEG(3))*NY*D34
C
      KNEG(2,1) = HELP*(KNEG(1,1)-LNEG(1))
      KNEG(2,2) = LNEG(1)
      KNEG(2,3) = HELP*KNEG(1,3)
      KNEG(2,4) = HELP*KNEG(1,4)
C
      KNEG(3,1) = (LNEG(3)-LNEG(4))*D34*DENSINV*NX
      KNEG(3,2) = ZERO
      TEMP = (LNEG(3)*T3-LNEG(4)*T4)*D34 - LNEG(1)
      KNEG(3,3) = LNEG(1) + TEMP*NX*NX
      KNEG(3,4) = TEMP*NX*NY
C
      KNEG(4,1) = (LNEG(3)-LNEG(4))*D34*DENSINV*NY
      KNEG(4,2) = ZERO
      KNEG(4,3) = KNEG(3,4)
      KNEG(4,4) = LNEG(1) + TEMP*NY*NY
C
      IF(NDIM.EQ.3)THEN
C
         KNEG(1,5) = UAVG(1)*T3*T4*(LNEG(4)-LNEG(3))*NZ*D34
         KNEG(2,5) = HELP*KNEG(1,5)
         KNEG(5,1) = (LNEG(3)-LNEG(4))*D34*DENSINV*NZ
         KNEG(5,2) = ZERO
         KNEG(3,5) = TEMP*NX*NZ
         KNEG(4,5) = TEMP*NY*NZ
         KNEG(5,5) = LNEG(1) + TEMP*NZ*NZ
         KNEG(5,3) = KNEG(3,5)
         KNEG(5,4) = KNEG(4,5)
C
      ENDIF
C
C
C
#ifdef FSPL_USE_DEBUG
C
      DO 32 I =  1, NORDER
         DO 32 J =  1, NORDER
            WORK1(I,J) = KPOS(I,J)-KPLUS(I,J)
            WORK2(I,J) = KNEG(I,J)-KMINS(I,J)
   32 CONTINUE
      IF( NULLMAT(WORK1,NORDER,NORDER,5,1.D-15) .EQV. .FALSE. .OR.
     +    NULLMAT(WORK2,NORDER,NORDER,5,1.D-15) .EQV. .FALSE. )THEN
         WRITE(6,*)'Errors on Inflow parameters for IELEM =',ielem
         WRITE(6,*)'Positive = ',NULLMAT(WORK1,NORDER,NORDER,5,1.D-15)
         WRITE(6,*)'Negative = ',NULLMAT(WORK2,NORDER,NORDER,5,1.D-15)
         CALL R8Mat_Print('G',' ',NORDER,NORDER,KPOS,LDA,
     +               'true positive matrix',IFAIL)
         CALL R8Mat_Print('G',' ',NORDER,NORDER,KPLUS,5,
     +               'analytical positive matrix',IFAIL)
         CALL R8Mat_Print('G',' ',NORDER,NORDER,WORK1,5,
     +               'error positive matrix',IFAIL)
         CALL R8Mat_Print('G',' ',NORDER,NORDER,KNEG,LDA,
     +               'true negative matrix',IFAIL)
         CALL R8Mat_Print('G',' ',NORDER,NORDER,KMINS,5,
     +               'analytical negative matrix',IFAIL)
         CALL R8Mat_Print('G',' ',NORDER,NORDER,WORK2,5,
     +               'error negative matrix',IFAIL)
         PAUSE
      ENDIF
C
C     test if the positive and negative matrices
C     sum up to the jacobian matrix 
C
      DO 30 I =  1, NORDER
            DO 30 J =  1, NORDER
               WORK1(I,J) = (KPOS(I,J)+KNEG(I,J))
CREM           WORK1(I,J) = (KPLUS(I,J)+KMINS(I,J))
               WORK2(I,J) = WORK1(I,J)-KMAT(I,J)
   30 CONTINUE
      LFLAG = ( .NOT. NULLMAT(WORK2,NORDER,NORDER,5,1.D-15) )
C
      IF( LFLAG .EQV. .TRUE. )THEN
C
            LFLAG = .FALSE.
C
            WRITE(6,*)'Element # ',IELEM
            WRITE(6,*)'Eigenvalues ',(WR(I),I=1,NORDER)
C
C     skip the following ...
C
#if 0
            CALL R8Mat_Print('G',' ',NORDER,NORDER,VLEFT,LDA,
     +                  'LEFT eigenvectors',IFAIL)
            CALL R8Mat_Print('G',' ',NORDER,NORDER,VRIGHT,LDA,
     +                  'RIGHT eigenvectors',IFAIL)
C
C     compute L*K and K*R
C     REM: we divide by Area/d
C
            CALL DGEMM('N','N',NORDER,NORDER,NORDER,ONE/AREA,VLEFT,LDA,
     +                 KMAT,LDA,ZERO,WKSPA,5)
            CALL DGEMM('N','N',NORDER,NORDER,NORDER,ONE/AREA,KMAT,LDA,
     +                 VRIGHT,LDA,ZERO,WKSPB,5)
C
C     compute R*\Lambda and L*\Lambda 
C
            DO 8 I =  1, NORDER
               DO 8 J =  1, NORDER
                  WKSPC(I,J) = WR(I)*VLEFT(I,J)
                  WKSPD(I,J) = WR(J)*VRIGHT(I,J)
    8       CONTINUE
C
C     test if L*K = \Lambda*L and K*R = R*\Lambda 
C
            CALL R8Mat_Print('G',' ',NORDER,NORDER,WKSPA,5,'LEFT*A ',IFAIL)
            CALL R8Mat_Print('G',' ',NORDER,NORDER,WKSPC,5,'lambda*LEFT',
     +                  IFAIL)
            CALL R8Mat_Print('G',' ',NORDER,NORDER,WKSPB,5, 'A*RIGHT',IFAIL)
            CALL R8Mat_Print('G',' ',NORDER,NORDER,WKSPD,5, 'RIGHT*lambda',
     +                  IFAIL)
#endif
            CALL R8Mat_Print('General',' ',NORDER,NORDER,KMAT,LDA,
     +                  'Analytical inflow parameter matrix',IFAIL)
            CALL R8Mat_Print('General',' ',NORDER,NORDER,WORK1,5,
     +                  'Reassembled matrix',IFAIL)
            CALL R8Mat_Print('General',' ',NORDER,NORDER,WORK2,5,
     +                  'Error matrix',IFAIL)
C           PAUSE
      ENDIF
#endif
C
      RETURN
      END
@


1.9
log
@The adiabatic index is not any longer a parameter, but a variable
@
text
@d6 1
a6 1
C     $Id: matsplX.F,v 1.8 2012/12/20 10:33:01 abonfi Exp abonfi $
d265 1
a265 1
                CALL X04CAF('G',' ',NORDER,NORDER,WORK1,5,
d381 1
a381 1
         CALL X04CAF('G',' ',NORDER,NORDER,KPOS,LDA,
d383 1
a383 1
         CALL X04CAF('G',' ',NORDER,NORDER,KPLUS,5,
d385 1
a385 1
         CALL X04CAF('G',' ',NORDER,NORDER,WORK1,5,
d387 1
a387 1
         CALL X04CAF('G',' ',NORDER,NORDER,KNEG,LDA,
d389 1
a389 1
         CALL X04CAF('G',' ',NORDER,NORDER,KMINS,5,
d391 1
a391 1
         CALL X04CAF('G',' ',NORDER,NORDER,WORK2,5,
d417 1
a417 1
            CALL X04CAF('G',' ',NORDER,NORDER,VLEFT,LDA,
d419 1
a419 1
            CALL X04CAF('G',' ',NORDER,NORDER,VRIGHT,LDA,
d440 2
a441 2
            CALL X04CAF('G',' ',NORDER,NORDER,WKSPA,5,'LEFT*A ',IFAIL)
            CALL X04CAF('G',' ',NORDER,NORDER,WKSPC,5,'lambda*LEFT',
d443 2
a444 2
            CALL X04CAF('G',' ',NORDER,NORDER,WKSPB,5, 'A*RIGHT',IFAIL)
            CALL X04CAF('G',' ',NORDER,NORDER,WKSPD,5, 'RIGHT*lambda',
d447 1
a447 1
            CALL X04CAF('General',' ',NORDER,NORDER,KMAT,LDA,
d449 1
a449 1
            CALL X04CAF('General',' ',NORDER,NORDER,WORK1,5,
d451 1
a451 1
            CALL X04CAF('General',' ',NORDER,NORDER,WORK2,5,
@


1.8
log
@first Doxygen support
@
text
@d6 1
a6 1
C     $Id: matsplX.F,v 1.7 2010/12/03 14:08:17 abonfi Exp abonfi $
d23 1
@


1.7
log
@bug fixed with the third dimension
@
text
@d1 1
d6 1
a6 1
C     $Id: matsplX.F,v 1.6 2010/11/13 11:06:31 abonfi Exp abonfi $
a16 15
C************************************************************
C
C     NORDER: is the order of the system to be solved (INPUT)
C     VECN:   is the face normal (INPUT)
C     KMAT:   the jacobian matrix times the face normal (OUTPUT)
C     KPOS:   is the "positive" part of the jacobian matrix (OUTPUT)
C     KNEG:   is the "negative" part of the jacobian matrix (OUTPUT)
C     VLEFT:  is left eigenvector matrix of the jacobian matrix (OUTPUT)
C     VRIGHT: is right eigenvector matrix of the jacobian matrix (OUTPUT)
C     LD:     is the leading dimension of the previous matrices
C     WR:     eigenvalues of the jacobian matrix (OUTPUT)
C     LPOS:   positive eigenvalues of the jacobian matrix (OUTPUT)
C     LNEG:   negative eigenvalues of the jacobian matrix (OUTPUT)
C
C************************************************************
@


1.6
log
@the constant RSTAR has been moved into the stream named common
@
text
@d5 1
a5 1
C     $Id: matsplX.F,v 1.5 2010/11/06 10:30:27 abonfi Exp abonfi $
d14 1
a14 1
CCCCCCCCCCCC#define FSPL_USE_DEBUG
d122 1
a122 1
      KMAT(1,5) = UAVG(1)*ASQR*AMPSQR*m
d127 1
a127 1
      KMAT(5,1) = m/UAVG(1)
@


1.5
log
@can now deal with the linearization for internal flows
@
text
@d5 1
a5 1
C     $Id: matsplX.F,v 1.4 2010/10/04 12:40:58 abonfi Exp abonfi $
a36 1
      INCLUDE 'three.com'
d39 2
@


1.4
log
@include variables from a file
@
text
@d5 1
a5 1
C     $Id: matsplX.F,v 1.3 2009/08/13 14:21:11 abonfi Exp abonfi $
a38 1
      INCLUDE 'stream.com'
d94 2
a95 1
      HELP = GM1*M_INFTY*M_INFTY
d182 2
a183 1
      HELP = GM1*M_INFTY*M_INFTY/UAVG(1)
@


1.3
log
@3D version; also using the EulFS storage of the velocity components
@
text
@d5 1
a5 1
C     $Id: matsplX.F,v 1.2 2009/08/11 14:45:51 abonfi Exp abonfi $
d40 1
a43 3
cnew
      DOUBLE PRECISION AMPSQR
cnew
a82 1
      AMPSQR = MACHSQR
@


1.2
log
@Merkle's preconditioner in primitive variables
@
text
@d5 1
a5 1
C     $Id: matsplX.F,v 1.1 2009/08/07 07:52:53 abonfi Exp abonfi $
d14 1
a14 1
CCCC#define FSPL_USE_DEBUG
d53 2
a54 4
      DOUBLE PRECISION l,m,n,U_dot_M,U_DOT_S,U_DOT_T,
     &AREAINV,AREA,TRATIO,DELTA,DENSINV,HELP,T3,T4,D43 
      DOUBLE PRECISION UPLUS,UMINS,AMACHN,UPOS,APOS,UNEG,ANEG
      DOUBLE PRECISION FSPSLP,FSPSLN,FSMSLP,FSMSLN,APLUS,AMINS,NX,NY,NZ
d57 1
a65 1
#ifdef FSPL_USE_DEBUG
d100 1
a100 1
C     Jacobian Matrix for primitive (p,u,v,w,T) variables ..
d103 3
a105 3
      KMAT(1,2) = UAVG(1)*ASQR*AMPSQR*l
      KMAT(1,3) = UAVG(1)*ASQR*AMPSQR*m
      KMAT(1,4) = ZERO
d107 1
a107 1
      KMAT(2,1) = l/UAVG(1)
d109 2
a110 2
      KMAT(2,3) = ZERO
      KMAT(2,4) = ZERO
d112 1
a112 1
      KMAT(3,1) = m/UAVG(1)
d117 3
a119 3
      KMAT(4,1) = HELP*(AMPSQR-ONE)*U_dot_M/UAVG(1)
      KMAT(4,2) = HELP*AMPSQR*ASQR*l
      KMAT(4,3) = HELP*AMPSQR*ASQR*m
a122 2
      stop '3d is un-implemented'
      KMAT(1,5) = UAVG(1)*ASQR*AMPSQR*n
d124 13
a136 9
      KMAT(2,5) = UAVG(2)*n-GM1*U_dot_M*UAVG(5)
      KMAT(3,5) = UAVG(3)*n - GM1*l*UAVG(5)
      KMAT(4,5) = UAVG(4)*n - GM1*m*UAVG(5)
C
      KMAT(5,1) = -U_DOT_M*UAVG(5)+GM1*KINETIC*n
      KMAT(5,2) = GM1 * n
      KMAT(5,3) = UAVG(5)*l - GM1*n*UAVG(3) 
      KMAT(5,4) = UAVG(5)*m - GM1*n*UAVG(4)
      KMAT(5,5) = UAVG(5)*n - GM1*n*UAVG(5) + U_dot_M
d155 2
a156 7
C     Eigenvalues are divided by d ..
C
!     WR(1) = AREA * U_dot_M
!     WR(2) = AREA * U_dot_M
!     WR(3) = AREA * ( U_dot_M*(ONE+AMPSQR) + DELTA )* HALF
!     WR(4) = AREA * ( U_dot_M*(ONE+AMPSQR) - DELTA )* HALF
!     WR(5) = AREA * U_dot_M
d180 8
a187 1
CCCCCC#ifdef FSPL_USE_DEBUG
a213 9
      U_DOT_S = DDOT(NDIM,UAVG(3),1,VECS,1)
      U_DOT_T = DDOT(NDIM,UAVG(3),1,VECT,1)
      DENSINV = ONE/UAVG(1)
C
      D43 = WR(4)-WR(3)
      T3 = WR(3)-AMPSQR*WR(1)!U_dot_M
      T4 = WR(4)-AMPSQR*WR(1)
      HELP = GM1*M_INFTY*M_INFTY/UAVG(1)
C
d220 1
a220 1
      IF(NDIM.EQ.3) VLEFT(5,1) = ONE
d224 4
a227 4
      VLEFT(1,4) = ONE
      VLEFT(2,4) = ZERO
      VLEFT(3,4) = ZERO
      VLEFT(4,4) = ZERO
d238 1
a238 1
C     Right Eigenvectors (4th row) ..
d240 5
a244 5
      VRIGHT(4,1) = ONE
      VRIGHT(4,2) = ZERO
      VRIGHT(4,3) = HELP*T4/D43
      VRIGHT(4,4) =-HELP*T3/D43
      IF(NDIM.EQ.3) VRIGHT(2,5) = UAVG(1) * U_DOT_T
d248 1
a248 2
cnew     IDIM = JDIM + 2
         IDIM = JDIM + 1
d267 1
a267 1
         VRIGHT(IDIM,5) = Txyz*DENSINV ! not sure
a270 1
#ifdef FSPL_USE_DEBUG
a282 1
#endif
a296 4
cnew
            KPOS(I,J) = SUM1
            KNEG(I,J) = SUM2
cnew
d299 1
a299 1
      GOTO 747
d308 1
a308 74
      FSPSLP = LPOS(3)+LPOS(4)
      FSMSLP = LPOS(3)-LPOS(4)
      FSPSLN = LNEG(3)+LNEG(4)
      FSMSLN = LNEG(3)-LNEG(4)
      UPLUS = HALF*FSPSLP - LPOS(1)
      UMINS = HALF*FSPSLN - LNEG(1)
      APLUS = HALF*FSMSLP
      AMINS = HALF*FSMSLN
      AMACHN = U_DOT_M/ABAR
      DELTA = GM1 * HALF
      TRATIO = ONE+DELTA*MACHSQR
C
      KPOS(1,1) = LPOS(1) + DELTA*MACHSQR*UPLUS-AMACHN*APLUS
      KPOS(1,2) = GM1/ASQR*UPLUS
      KPOS(1,3) = -GM1*UAVG(3)/ASQR*UPLUS+NX/ABAR*APLUS
      KPOS(1,4) = -GM1*UAVG(4)/ASQR*UPLUS+NY/ABAR*APLUS
C
      KPOS(2,1) = UPLUS*(DELTA*MACHSQR*UAVG(2)-U_DOT_M*U_DOT_M)
     &          + APLUS*AMACHN*(GM1*KINETIC-UAVG(2))
      KPOS(2,2) = HALF*FSPSLP + DELTA*MACHSQR*UPLUS+GM1*AMACHN*APLUS
      KPOS(2,3) = (U_DOT_M*NX-TRATIO*UAVG(3))*UPLUS
     &          + APLUS * (UAVG(2)/ABAR*NX-GM1*AMACHN*UAVG(3))
      KPOS(2,4) = (U_DOT_M*NY-TRATIO*UAVG(4))*UPLUS
     &          + APLUS * (UAVG(2)/ABAR*NY-GM1*AMACHN*UAVG(4))
C
      KPOS(3,1) = (DELTA*MACHSQR*UAVG(3)-U_DOT_M*NX)*UPLUS
     &          + (DELTA*MACHSQR*ABAR*NX-AMACHN*UAVG(3))*APLUS
      KPOS(4,1) = (DELTA*MACHSQR*UAVG(4)-U_DOT_M*NY)*UPLUS
     &          + (DELTA*MACHSQR*ABAR*NY-AMACHN*UAVG(4))*APLUS
C
      KPOS(3,2) = GM1/ABAR*(UAVG(3)/ABAR*UPLUS+NX*APLUS)
      KPOS(4,2) = GM1/ABAR*(UAVG(4)/ABAR*UPLUS+NY*APLUS)
C
      KPOS(3,3) = (NX*NX-GM1*UAVG(3)*UAVG(3)/ASQR)*UPLUS
     &          + (UAVG(3)*NX-GM1*NX*UAVG(3))*APLUS/ABAR + LPOS(1)
      KPOS(3,4) = (NX*NY-GM1*UAVG(3)*UAVG(4)/ASQR)*UPLUS
     &          + (UAVG(3)*NY-GM1*NX*UAVG(4))*APLUS/ABAR
C
      KPOS(4,3) = (NY*NX-GM1*UAVG(4)*UAVG(3)/ASQR)*UPLUS
     &          + (UAVG(4)*NX-GM1*NY*UAVG(3))*APLUS/ABAR
      KPOS(4,4) = (NY*NY-GM1*UAVG(4)*UAVG(4)/ASQR)*UPLUS
     &          + (UAVG(4)*NY-GM1*NY*UAVG(4))*APLUS/ABAR + LPOS(1)
C
C
      KNEG(1,1) = LNEG(1) + DELTA*MACHSQR*UMINS-AMACHN*AMINS
      KNEG(1,2) = GM1/ASQR*UMINS
      KNEG(1,3) = -GM1*UAVG(3)/ASQR*UMINS+NX/ABAR*AMINS
      KNEG(1,4) = -GM1*UAVG(4)/ASQR*UMINS+NY/ABAR*AMINS
C
      KNEG(2,1) = UMINS*(DELTA*MACHSQR*UAVG(2)-U_DOT_M*U_DOT_M)
     &          + AMINS*AMACHN*(GM1*KINETIC-UAVG(2))
      KNEG(2,2) = HALF*FSPSLN + DELTA*MACHSQR*UMINS+GM1*AMACHN*AMINS
      KNEG(2,3) = (U_DOT_M*NX-TRATIO*UAVG(3))*UMINS
     &          + AMINS * (UAVG(2)/ABAR*NX-GM1*AMACHN*UAVG(3))
      KNEG(2,4) = (U_DOT_M*NY-TRATIO*UAVG(4))*UMINS
     &          + AMINS * (UAVG(2)/ABAR*NY-GM1*AMACHN*UAVG(4))
C
      KNEG(3,1) = (DELTA*MACHSQR*UAVG(3)-U_DOT_M*NX)*UMINS
     &          + (DELTA*MACHSQR*ABAR*NX-AMACHN*UAVG(3))*AMINS
      KNEG(4,1) = (DELTA*MACHSQR*UAVG(4)-U_DOT_M*NY)*UMINS
     &          + (DELTA*MACHSQR*ABAR*NY-AMACHN*UAVG(4))*AMINS
C
      KNEG(3,2) = GM1/ABAR*(UAVG(3)/ABAR*UMINS+NX*AMINS)
      KNEG(4,2) = GM1/ABAR*(UAVG(4)/ABAR*UMINS+NY*AMINS)
C
      KNEG(3,3) = (NX*NX-GM1*UAVG(3)*UAVG(3)/ASQR)*UMINS
     &          + (UAVG(3)*NX-GM1*NX*UAVG(3))*AMINS/ABAR + LNEG(1)
      KNEG(3,4) = (NX*NY-GM1*UAVG(3)*UAVG(4)/ASQR)*UMINS
     &          + (UAVG(3)*NY-GM1*NX*UAVG(4))*AMINS/ABAR
C
      KNEG(4,3) = (NY*NX-GM1*UAVG(4)*UAVG(3)/ASQR)*UMINS
     &          + (UAVG(4)*NX-GM1*NY*UAVG(3))*AMINS/ABAR
      KNEG(4,4) = (NY*NY-GM1*UAVG(4)*UAVG(4)/ASQR)*UMINS
     &          + (UAVG(4)*NY-GM1*NY*UAVG(4))*AMINS/ABAR + LNEG(1)
d310 20
d333 12
a344 37
      KPOS(1,5) = -GM1*UAVG(5)/ASQR*UPLUS+NZ/ABAR*APLUS
      KPOS(2,5) = (U_DOT_M*NZ-TRATIO*UAVG(5))*UPLUS
     &          + APLUS * (UAVG(2)/ABAR*NZ-GM1*AMACHN*UAVG(5))
      KPOS(3,5) = (NX*NZ-GM1*UAVG(3)*UAVG(5)/ASQR)*UPLUS
     &          + (UAVG(3)*NZ-GM1*NX*UAVG(5))*APLUS/ABAR
      KPOS(4,5) = (NY*NZ-GM1*UAVG(4)*UAVG(5)/ASQR)*UPLUS
     &          + (UAVG(4)*NZ-GM1*NY*UAVG(5))*APLUS/ABAR
C
      KPOS(5,1) = (DELTA*MACHSQR*UAVG(5)-U_DOT_M*NZ)*UPLUS
     &          + (DELTA*MACHSQR*ABAR*NZ-AMACHN*UAVG(5))*APLUS
      KPOS(5,2) = GM1/ABAR*(UAVG(5)/ABAR*UPLUS+NZ*APLUS)
C
      KPOS(5,3) = (NZ*NX-GM1*UAVG(5)*UAVG(3)/ASQR)*UPLUS
     &          + (UAVG(5)*NX-GM1*NZ*UAVG(3))*APLUS/ABAR
      KPOS(5,4) = (NZ*NY-GM1*UAVG(5)*UAVG(4)/ASQR)*UPLUS
     &          + (UAVG(5)*NY-GM1*NZ*UAVG(4))*APLUS/ABAR
      KPOS(5,5) = (NZ*NZ-GM1*UAVG(5)*UAVG(5)/ASQR)*UPLUS
     &          + (UAVG(5)*NZ-GM1*NZ*UAVG(5))*APLUS/ABAR + LPOS(1)
C
      KNEG(1,5) = -GM1*UAVG(5)/ASQR*UMINS+NZ/ABAR*AMINS
      KNEG(2,5) = (U_DOT_M*NZ-TRATIO*UAVG(5))*UMINS
     &          + AMINS * (UAVG(2)/ABAR*NZ-GM1*AMACHN*UAVG(5))
      KNEG(3,5) = (NX*NZ-GM1*UAVG(3)*UAVG(5)/ASQR)*UMINS
     &          + (UAVG(3)*NZ-GM1*NX*UAVG(5))*AMINS/ABAR
      KNEG(4,5) = (NY*NZ-GM1*UAVG(4)*UAVG(5)/ASQR)*UMINS
     &          + (UAVG(4)*NZ-GM1*NY*UAVG(5))*AMINS/ABAR
C
      KNEG(5,1) = (DELTA*MACHSQR*UAVG(5)-U_DOT_M*NZ)*UMINS
     &          + (DELTA*MACHSQR*ABAR*NZ-AMACHN*UAVG(5))*AMINS
      KNEG(5,2) = GM1/ABAR*(UAVG(5)/ABAR*UMINS+NZ*AMINS)
C
      KNEG(5,3) = (NZ*NX-GM1*UAVG(5)*UAVG(3)/ASQR)*UMINS
     &          + (UAVG(5)*NX-GM1*NZ*UAVG(3))*AMINS/ABAR
      KNEG(5,4) = (NZ*NY-GM1*UAVG(5)*UAVG(4)/ASQR)*UMINS
     &          + (UAVG(5)*NY-GM1*NZ*UAVG(4))*AMINS/ABAR
      KNEG(5,5) = (NZ*NZ-GM1*UAVG(5)*UAVG(5)/ASQR)*UMINS
     &          + (UAVG(5)*NZ-GM1*NZ*UAVG(5))*AMINS/ABAR + LNEG(1)
d346 32
d380 2
a381 3
cnew
  747 CONTINUE
cnew
d393 2
a394 2
         WRITE(6,*)NULLMAT(WORK1,NORDER,NORDER,5,1.D-15)
         WRITE(6,*)NULLMAT(WORK2,NORDER,NORDER,5,1.D-15)
d430 1
a430 1
#if 1
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
C     $Id: matsplXI.F,v 1.1 2003/07/17 13:58:36 abonfi Exp $
d14 1
a14 1
#define FSPL_USE_DEBUG
d54 1
a54 1
     &AREAINV,AREA,TRATIO,DELTA,DENSINV,ABARINV,HELP
a57 1
#ifdef FSPL_USE_DEBUG
d64 1
a64 1
      INTEGER TABLE(3,3),INDX
d67 1
d89 1
d91 1
a91 1
C          and the face normal ..
d100 1
d115 1
a115 1
      KMAT(3,2) = GM1 * l
d119 3
a121 3
      KMAT(4,1) = GM1*(AMPSQR-ONE)*M_INFTY*M_INFTY*U_dot_M/UAVG(1)
      KMAT(4,2) = GM1*AMPSQR*ASQR*M_INFTY*M_INFTY*l
      KMAT(4,3) = GM1*AMPSQR*ASQR*M_INFTY*M_INFTY*m
d126 1
a126 1
      KMAT(1,5) = n
d148 1
a148 1
C     Eigenvalues are divided by d ..
d150 1
a150 1
      U_dot_M = U_dot_M / AREA
d153 1
d155 22
a176 5
      WR(1) = AREA * U_dot_M
      WR(2) = AREA * U_dot_M
      WR(3) = AREA * ( U_dot_M*(ONE+AMPSQR) - SQRT(DELTA) ) * HALF
      WR(4) = AREA * ( U_dot_M*(ONE+AMPSQR) + SQRT(DELTA) ) * HALF
      WR(5) = AREA * U_dot_M
d181 2
a182 2
         LPOS(IDIM) = HALF * (WR(IDIM) + ABS(WR(IDIM)) )
         LNEG(IDIM) = HALF * (WR(IDIM) - ABS(WR(IDIM)) )
d185 1
a185 1
#ifdef FSPL_USE_DEBUG
a214 1
      ABARINV = ONE/ABAR
d216 6
a221 1
C     Left Eigenvectors (1st row) ..
d223 1
a223 2
      HELP = ABAR*(WR(3)-WR(4))
      VLEFT(1,1) = GM1OG/ASQR
d225 3
a227 3
      VLEFT(3,1) = GINV/HELP
      VLEFT(4,1) = GINV/HELP
      IF(NDIM.EQ.3) VLEFT(5,1) = -U_DOT_T*DENSINV
d229 1
a229 1
C     Left Eigenvectors (2nd row) ..
d231 1
a231 1
      VLEFT(1,4) = -UAVG(1)/ASQR
d241 2
a242 2
      VRIGHT(1,3) = ABAR*GAM*(WR(3)-U_dot_m)
      VRIGHT(1,4) =-ABAR*GAM*(WR(4)-U_dot_m)
d245 1
a245 1
C     Right Eigenvectors (1st row) ..
d247 1
a247 1
      VRIGHT(4,1) =-ASQR*DENSINV
d249 2
a250 2
      VRIGHT(4,3) = ABAR*DENSINV*GM1*(WR(3)-U_dot_m)
      VRIGHT(4,4) =-ABAR*DENSINV*GM1*(WR(4)-U_dot_m)
a262 2
         HELP = ABAR*(WR(3)-WR(4))
         HELP = UAVG(1)/HELP
d264 4
a267 4
         VLEFT(2,IDIM) = Sxyz*UAVG(1)
         VLEFT(3,IDIM) =-Nxyz*(WR(4)-U_dot_m)*HELP
         VLEFT(4,IDIM) =-Nxyz*(WR(3)-U_dot_m)*HELP
         IF(NDIM.EQ.3) VLEFT(5,IDIM) = DENSINV*Txyz
d272 3
a274 3
         VRIGHT(IDIM,2) = Sxyz*DENSINV
         VRIGHT(IDIM,3) = ABAR*DENSINV*Nxyz
         VRIGHT(IDIM,4) =-ABAR*DENSINV*Nxyz 
d279 2
d292 1
a312 1
#endif
d491 1
a491 1
#if 0
d498 1
d500 1
a500 1
            CALL DGEMM('N','N',NORDER,NORDER,NORDER,1.D0,VLEFT,LDA,
d502 1
a502 1
            CALL DGEMM('N','N',NORDER,NORDER,NORDER,1.D0,KMAT,LDA,
d523 1
a523 1
     +                  'Original matrix',IFAIL)
@
