head	1.5;
access
	abonfi
	aldo
	tesistim;
symbols
	release3_14_0:1.5
	release3_13_0:1.5
	release3_12_0:1.5
	release3_11_0:1.5
	release3_10_0:1.5
	release3_8_0:1.5
	release3_7_1:1.5
	release3_7_0:1.5
	release3_4_5:1.5
	release3_4_4:1.5
	release3_4_3:1.5
	release3_4_2:1.5
	release3_4_1:1.5
	release3_4_0:1.5
	release3_3_5:1.5
	release3_3_4:1.5
	release3_3_3:1.5
	release3_3_2:1.5
	release3_3_1:1.5
	release3_3_0:1.4;
locks; strict;
comment	@c @;


1.5
date	2013.01.26.11.54.11;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2002.09.13.08.42.01;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	2000.10.13.13.17.18;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	98.08.21.12.00.56;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	98.01.03.17.23.34;	author aldo;	state Exp;
branches;
next	;


desc
@Eigenvalues for the incompressible euler equations
@


1.5
log
@fixed the name of included header/common files
@
text
@      SUBROUTINE Eigen_VIII(Matrix,LDA,DVDZ,DUDV,NDIM,LDB)
C
C     Conserved (pressure,velocity) variables ..
C
      IMPLICIT NONE
C
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
C
C
      INCLUDE 'three.com'
      INCLUDE 'chorin.com'
C
C
      INTEGER LDA,NDIM,LDB
C
C
      DOUBLE PRECISION Matrix(LDA,LDA,*),DVDZ(*),DUDV(*)
C
C
      INTEGER IDIM
C
      DOUBLE PRECISION DDOT
      EXTERNAL         DDOT
C
C     Jacobian matrix of the inviscid fluxes
C
      IDIM = 1
C
      Matrix(1,1,IDIM) = ZERO
      Matrix(1,2,IDIM) = BETA
      Matrix(1,3,IDIM) = ZERO
      Matrix(1,4,IDIM) = ZERO
C
      Matrix(2,1,IDIM) = ONE
      Matrix(2,2,IDIM) = TWO*ZAVG(2)
      Matrix(2,3,IDIM) = ZERO
      Matrix(2,4,IDIM) = ZERO
C
      Matrix(3,1,IDIM) = ZERO
      Matrix(3,2,IDIM) = ZAVG(3)
      Matrix(3,3,IDIM) = ZAVG(2)
      Matrix(3,4,IDIM) = ZERO
C
      Matrix(4,1,IDIM) = ZERO
      Matrix(4,2,IDIM) = ZAVG(4)
      Matrix(4,3,IDIM) = ZERO
      Matrix(4,4,IDIM) = ZAVG(2)
*
      IDIM = 2
C
      Matrix(1,1,IDIM) = ZERO
      Matrix(1,2,IDIM) = ZERO
      Matrix(1,3,IDIM) = BETA
      Matrix(1,4,IDIM) = ZERO
C
      Matrix(2,1,IDIM) = ZERO
      Matrix(2,2,IDIM) = ZAVG(3)
      Matrix(2,3,IDIM) = ZAVG(2)
      Matrix(2,4,IDIM) = ZERO
C
      Matrix(3,1,IDIM) = ONE
      Matrix(3,2,IDIM) = ZERO
      Matrix(3,3,IDIM) = TWO*ZAVG(3)
      Matrix(3,4,IDIM) = ZERO
C
      Matrix(4,1,IDIM) = ZERO
      Matrix(4,2,IDIM) = ZERO
      Matrix(4,3,IDIM) = ZAVG(4)
      Matrix(4,4,IDIM) = ZAVG(3)
*
      IDIM = 3
C
      Matrix(1,1,IDIM) = ZERO
      Matrix(1,2,IDIM) = ZERO
      Matrix(1,3,IDIM) = ZERO
      Matrix(1,4,IDIM) = BETA
C
      Matrix(2,1,IDIM) = ZERO
      Matrix(2,2,IDIM) = ZAVG(4)
      Matrix(2,3,IDIM) = ZERO
      Matrix(2,4,IDIM) = ZAVG(2)
C
      Matrix(3,1,IDIM) = ZERO
      Matrix(3,2,IDIM) = ZERO
      Matrix(3,3,IDIM) = ZAVG(4)
      Matrix(3,4,IDIM) = ZAVG(3)
C
      Matrix(4,1,IDIM) = ONE
      Matrix(4,2,IDIM) = ZERO
      Matrix(4,3,IDIM) = ZERO
      Matrix(4,4,IDIM) = TWO*ZAVG(4)
C
      RETURN
      END
@


1.4
log
@restored checks when ICHECK != 0
@
text
@d8 1
a8 1
      INCLUDE 'constants'
d11 1
a11 1
      INCLUDE 'three'
@


1.3
log
@a number of changes, both in the calling sequence and in the storage
of certain arrays
@
text
@d1 1
a1 1
      SUBROUTINE Eigen_VIII(Matrix,LDA,DVDZ,DUDV,NDIM,NOFVAR)
d15 1
a15 1
      INTEGER LDA,NDIM,NOFVAR
d30 19
a48 19
         Matrix(1,1,IDIM) = ZERO
         Matrix(1,2,IDIM) = BETA
         Matrix(1,3,IDIM) = ZERO
         Matrix(1,4,IDIM) = ZERO
C
         Matrix(2,1,IDIM) = ONE
         Matrix(2,2,IDIM) = TWO*ZAVG(2)
         Matrix(2,3,IDIM) = ZERO
         Matrix(2,4,IDIM) = ZERO
C
         Matrix(3,1,IDIM) = ZERO
         Matrix(3,2,IDIM) = ZAVG(3)
         Matrix(3,3,IDIM) = ZAVG(2)
         Matrix(3,4,IDIM) = ZERO
C
         Matrix(4,1,IDIM) = ZERO
         Matrix(4,2,IDIM) = ZAVG(4)
         Matrix(4,3,IDIM) = ZERO
         Matrix(4,4,IDIM) = ZAVG(2)
d52 19
a70 19
         Matrix(1,1,IDIM) = ZERO
         Matrix(1,2,IDIM) = ZERO
         Matrix(1,3,IDIM) = BETA
         Matrix(1,4,IDIM) = ZERO
C
         Matrix(2,1,IDIM) = ZERO
         Matrix(2,2,IDIM) = ZAVG(3)
         Matrix(2,3,IDIM) = ZAVG(2)
         Matrix(2,4,IDIM) = ZERO
C
         Matrix(3,1,IDIM) = ONE
         Matrix(3,2,IDIM) = ZERO
         Matrix(3,3,IDIM) = TWO*ZAVG(3)
         Matrix(3,4,IDIM) = ZERO
C
         Matrix(4,1,IDIM) = ZERO
         Matrix(4,2,IDIM) = ZERO
         Matrix(4,3,IDIM) = ZAVG(4)
         Matrix(4,4,IDIM) = ZAVG(3)
d74 19
a92 19
         Matrix(1,1,IDIM) = ZERO
         Matrix(1,2,IDIM) = ZERO
         Matrix(1,3,IDIM) = ZERO
         Matrix(1,4,IDIM) = BETA
C
         Matrix(2,1,IDIM) = ZERO
         Matrix(2,2,IDIM) = ZAVG(4)
         Matrix(2,3,IDIM) = ZERO
         Matrix(2,4,IDIM) = ZAVG(2)
C
         Matrix(3,1,IDIM) = ZERO
         Matrix(3,2,IDIM) = ZERO
         Matrix(3,3,IDIM) = ZAVG(4)
         Matrix(3,4,IDIM) = ZAVG(3)
C
         Matrix(4,1,IDIM) = ONE
         Matrix(4,2,IDIM) = ZERO
         Matrix(4,3,IDIM) = ZERO
         Matrix(4,4,IDIM) = TWO*ZAVG(4)
@


1.2
log
@removed some unuseful pieces of code
@
text
@d1 1
a1 1
      SUBROUTINE Eigen_VIII(Matrix,LDA,NDIM)
d15 1
a15 1
      INTEGER LDA,NDIM
d18 1
a18 1
      DOUBLE PRECISION Matrix(LDA,LDA,*)
@


1.1
log
@Initial revision
@
text
@a0 2
CC------------------------------+------------------------------
CC
d3 1
a3 1
C     .. Conserved (1.,pressure,velocity) variables ..
a6 2
C     .. Parameters ..
C
a9 1
C     .. Commons ..
a13 1
C     .. Scalar Arguments ..
a16 1
C     .. Array Arguments ..
a19 1
C     .. Local Scalars ..
a22 5
C     .. Local Arrays ..
C
C
C     .. External Functions ..
C
d26 1
a26 20
C     .. Data Statements ..
C
C
C     .. Executable Statements ..
C
C
C     .. Here characteristic variables are conserved variables ..
C
      DO 11 IDIM = 1 , NDIM
         GRAD_CHAR(1,IDIM) = GRAD_PARM(1,IDIM)
         GRAD_CHAR(2,IDIM) = GRAD_PARM(2,IDIM)
         GRAD_CHAR(3,IDIM) = GRAD_PARM(3,IDIM)
         GRAD_CHAR(4,IDIM) = GRAD_PARM(4,IDIM)
C
C        GRAD_CHAR(1,IDIM) = GRAD_PRIM(1,IDIM) -
C    1   DDOT(DIM,UAVG(3),1,GRAD_PRIM(3,IDIM),1)
C        GRAD_CHAR(3,IDIM) = GRAD_PRIM(3,IDIM)
C        GRAD_CHAR(4,IDIM) = GRAD_PRIM(4,IDIM)
C        GRAD_CHAR(5,IDIM) = GRAD_PRIM(5,IDIM)
   11 CONTINUE ! End loop on IDIM
@
