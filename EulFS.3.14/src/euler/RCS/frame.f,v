head	1.4;
access
	abonfi
	aldo
	tesistim;
symbols
	release3_14_0:1.4
	release3_13_0:1.4
	release3_12_0:1.4
	release3_11_0:1.4
	release3_10_0:1.4
	release3_8_0:1.4
	release3_7_1:1.4
	release3_7_0:1.4
	release3_4_5:1.4
	release3_4_4:1.4
	release3_4_3:1.4
	release3_4_2:1.4
	release3_4_1:1.4
	release3_4_0:1.4
	release3_3_5:1.4
	release3_3_4:1.4
	release3_3_3:1.4
	release3_3_2:1.4
	release3_3_1:1.4
	release3_3_0:1.2;
locks; strict;
comment	@c @;


1.4
date	2013.01.26.11.54.11;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	2013.01.26.11.39.21;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	99.12.27.09.30.37;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	99.01.15.09.49.24;	author aldo;	state Exp;
branches;
next	;


desc
@Builds the transformation matrix relating a cartesian
and a stream aligned reference frames
@


1.4
log
@fixed the name of included header/common files
@
text
@C
      SUBROUTINE StreamAlignedFrame(NDIM)
C
      IMPLICIT NONE
C
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
C
      INCLUDE 'three.com'
      INCLUDE 'frame.com'
C
      INTEGER I,NDIM

      DOUBLE PRECISION SING,COSG,TEMP2
C
      EXTERNAL CROSS_PROD,DCOPY
C
      INTEGER  ISDMIN,JCYCL
      EXTERNAL ISDMIN,JCYCL
      DOUBLE PRECISION DNRM2
      EXTERNAL         DNRM2
C
      GOTO(20,30),NDIM-1
C
   20 CONTINUE
C
      RotationMatrix(1,1) = UAVG(3)*QINV
      RotationMatrix(2,1) = UAVG(4)*QINV
      RotationMatrix(3,1) = ZERO
C
      RotationMatrix(1,2) =-UAVG(4)*QINV
      RotationMatrix(2,2) = UAVG(3)*QINV
      RotationMatrix(3,2) = ZERO
C
      CALL CROSS_PROD( RotationMatrix(1,1) , RotationMatrix(1,2) ,
     &                 RotationMatrix(1,3) )
C
      RETURN
C
   30 CONTINUE

      RotationMatrix(1,1) = UAVG(3) * QINV
      RotationMatrix(2,1) = UAVG(4) * QINV
      RotationMatrix(3,1) = UAVG(5) * QINV
C
      TEMP2 = ONE / SQRT( UAVG(3)*UAVG(3)+UAVG(4)*UAVG(4) )
C
      COSG = ONE
      SING = ZERO
C
C
      RotationMatrix(1,2) =(-UAVG(4)*COSG-UAVG(3)*UAVG(5)*SING*
     1				QINV)*TEMP2
      RotationMatrix(2,2) =( UAVG(3)*COSG-UAVG(4)*UAVG(5)*SING*
     1				QINV)*TEMP2
      RotationMatrix(3,2) =  SING*QINV/TEMP2
C
      RotationMatrix(1,3) =( UAVG(4)*SING-UAVG(3)*UAVG(5)*COSG*
     1				QINV)*TEMP2
      RotationMatrix(2,3) =(-UAVG(3)*SING-UAVG(4)*UAVG(5)*COSG*
     1				QINV)*TEMP2
      RotationMatrix(3,3) =  COSG*QINV/TEMP2
C
      RETURN
      END
@


1.3
log
@changed the name of an header file
@
text
@d7 1
a7 1
      INCLUDE 'constants.com'
@


1.2
log
@add an include file for a common
@
text
@d7 1
a7 1
      INCLUDE 'constants'
d9 1
a9 1
      INCLUDE 'three'
d16 1
a16 1
      EXTERNAL	CROSS_PROD,DCOPY
d36 1
a36 1
     &	               RotationMatrix(1,3) )
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
      INCLUDE 'blkEulerII'
@
