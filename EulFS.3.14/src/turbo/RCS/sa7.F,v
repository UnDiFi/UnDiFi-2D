head	1.8;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.8
	release3_13_0:1.8
	release3_12_0:1.8
	release3_11_0:1.8
	release3_10_0:1.8
	release3_8_0:1.8
	release3_7_1:1.7
	release3_7_0:1.7
	release3_4_5:1.7
	release3_4_4:1.7
	release3_4_3:1.7
	release3_4_2:1.6
	release3_4_1:1.6
	release3_4_0:1.6
	release3_3_5:1.6
	release3_3_4:1.6
	release3_3_3:1.6
	release3_3_2:1.6
	release3_3_1:1.6
	release3_3_0:1.6;
locks; strict;
comment	@c @;


1.8
date	2020.04.23.09.56.14;	author abonfi;	state Exp;
branches;
next	1.7;

1.7
date	2013.09.17.11.05.13;	author abonfi;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.13.08.20.04;	author abonfi;	state Exp;
branches;
next	1.5;

1.5
date	2009.06.11.09.49.36;	author abonfi;	state Exp;
branches;
next	1.4;

1.4
date	2007.11.14.07.23.44;	author abonfi;	state Exp;
branches;
next	1.3;

1.3
date	2007.03.12.11.06.25;	author abonfi;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.24.08.57.54;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.24.01.58.51;	author abonfi;	state Exp;
branches;
next	;


desc
@Spalart-Allmaras for compressible flows,
coupled solution strategy
@


1.8
log
@now calling R8Mat_Print
@
text
@      SUBROUTINE SA7(IELEM,VCN,VCZ,NDIM,NOFVERT,
     +         NOFVAR,NTURB,NODRES,
     +         TSTEP,STIFEL,VOLUME,MATRIX_ASSEMBLY,
     +         SCALARSCHEME,MATRIXSCHEME,RWORK,COMPRESSIBLE,
     4         VISCL,VISCT)
#undef _FUNCT_
#define _FUNCT_ "SA7"
C
C     $Id: sa7.F,v 1.7 2013/09/17 11:05:13 abonfi Exp abonfi $
C
      IMPLICIT NONE
C
C     Spalart-Allmaras model; 
C     transport equation for the KINEMATIC viscosity 
C     to be used in the coupled solution approach
C     for compressible flows
C     
C     define DEBUG if you wish to solve a simple convection
C     diffusion equation
C
CCCCC#define DEBUG
CCC#define PRINT
C
C
C     .. Parameters ..
C     ..
      INCLUDE 'paramt.h'
      INCLUDE 'constants.h'
      INCLUDE 'time.h'
C
C     .. Common blocks ..
C     ..
C
      INCLUDE 'three.com'
      INCLUDE 'flags.com'
      INCLUDE 'turb.com'
      INCLUDE 'time.com'
      INCLUDE 'visco.com'
      INCLUDE 'nboun.com'
      INCLUDE 'sa.com'
C
C     Sets residual and local timestep to zero
C
C     .. Parameters ..
C     ..
C     .. Scalar Arguments ..
      INTEGER NDIM,NELEM,NOFVAR,NTURB,NOFVERT
      DOUBLE PRECISION VISCL,VISCT
      LOGICAL COMPRESSIBLE
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION TSTEP(NOFVAR,*),NODRES(NOFVAR,NOFVERT),
     +                 VCN(3*MAXNOFVERT),VCZ(NOFVAR,NOFVERT,*),RWORK(*),
     +                 STIFEL(nofvar,nofvar,nofvert,nofvert),VOLUME(*)
C     ..
C     .. Subroutine Arguments ..
      EXTERNAL SCALARSCHEME,MATRIXSCHEME
C     ..
C     .. Arrays in Common ..
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION CELRES,SOURCE,OMEGA,OMEX,OMEY,OMEZ,
     +                 TS,TBDIFFX,GRADNRM,NULAM,NUTUR
      INTEGER I,J,IELEM,IFAIL,JADD,IVERT
      LOGICAL MATRIX_ASSEMBLY
C     ..
C     .. Local Arrays ..
      DOUBLE PRECISION STIFC(MAX_NOFVERT_SQR),STIFD(MAX_NOFVERT_SQR),
     +                 WORK(MAXNOFVERT*MAXTIMLEVS),DWORK(MAXNOFVERT),
     2                 TAUX(MAXNOFVERT),BETA(MAXNOFVERT)
C     ..
C     .. External Functions ..
      DOUBLE PRECISION TBDEST,TBPROD,TBTRIP,TSC,
     1                 TFV1,SUTHERLAW
      EXTERNAL TBDEST,TBPROD,TBTRIP,TSC,TFV1,SUTHERLAW
C     ..
C     .. External Subroutines ..
      EXTERNAL DINIT,TDIFF,VISCO
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC ABS,MAX,SIGN,SQRT
C     ..
C
C
      CALL DINIT(NOFVERT,ZERO,TAUX,1)
C
C     this will be called again within the viscous routines
C
      CALL GRADPRIM(IELEM,NDIM,NDIM+2)
C
C     molecular viscosity
C
      VISCL = SUTHERLAW(ZERO,ABAR,ASQR)
C
C     kinematic viscosity
C
      NULAM = VISCL / UAVG(1)
cxxx  visct = 0.d0
cxxx  return
C
C Cell averaged vorticity
C
      IF( NDIM .EQ. 3 )THEN
          OMEX = GRAD_PRIM(5,2) - GRAD_PRIM(4,3)
          OMEY = GRAD_PRIM(3,3) - GRAD_PRIM(5,1)
      ELSE
          OMEX = ZERO
          OMEY = ZERO
      ENDIF
      OMEZ = GRAD_PRIM(4,1) - GRAD_PRIM(3,2)
C
      OMEGA = SQRT(OMEX*OMEX+OMEY*OMEY+OMEZ*OMEZ)
C     write(6,*)'w = ',omex,omey,omez
C
Caldo NUTUR = MAX(0.d0,ZAVG(NOFVAR))
C
C     taking the max bw. 0 and NUTUR seems to have
C     a de-stabilizing effect on convergence
C
      NUTUR = ZAVG(NOFVAR)
C
C     CALL R8Mat_Print('General',' ',NOFVAR,3,GRAD_PRIM,NMAX,
C    +         'Gradiente ',IFAIL)
C     CALL R8Mat_Print('General',' ',NOFVAR,NOFVERT*NTIMLEVS,VCZ,NOFVAR,
C    +         'Nodal values ',IFAIL)
C
      DO 22 J = 1, NTIMLEVS
         JADD = (J-1)*NOFVERT
         DO 22 IVERT = 1, NOFVERT
             WORK(JADD+IVERT) = VCZ(NOFVAR,IVERT,J)
   22 CONTINUE
C
C
C ****************************************************
C          computation of the source term
C ****************************************************
C
C
C     compute "modified" vorticity
C
      TS = TSC(OMEGA,TD,NUTUR,NULAM)
#ifdef PRINT
!     write(6,*)'w = ',omega,' ts ',ts,' nut ',nutur
#endif
C
C   it would be nice to enforce the compiler to inline all these
C   functions
C
      GRADNRM = GRAD_PARM(NOFVAR,1)**2 + 
     >          GRAD_PARM(NOFVAR,2)**2
      IF(NDIM.EQ.3)GRADNRM = GRADNRM + GRAD_PARM(NOFVAR,3)**2
C
      TBDIFFX = TCB2/TPR1*REINV * GRADNRM
C
      SOURCE = TBPROD(NUTUR,NULAM,TS) + 
     2         TBDEST(TD,TS,NUTUR,NULAM) +
     3         TBDIFFX
C
      SOURCE = -SOURCE*VOLUME(1)
C
          IF (TTFLAG.EQ.1) THEN
              STOP 'trip term NOT implemented '
              SOURCE=SOURCE+TBTRIP(TD,RWORK(7),RWORK(4),
     >RWORK(5),RWORK(6))
C
          ENDIF
C
CXXXX     pause
CXXXX     write(6,*)source,(NUTUR+NULAM)*REINV/TPR1
C
C
C        the convection speed is the velocity vector
C
#ifdef DEBUG
      CALL NS_SCHEME(IELEM,VCN,UAVG(3),CELRES,ZERO,WORK,
     +                      TAUX,DWORK,BETA,STIFC,NDIM,NOFVERT,
     +                      MATRIX_ASSEMBLY)
          CALL VISCO(IELEM,WORK,DWORK,TAUX,NOFVAR,VCN,NDIM,
     +               NOFVERT,VOLUME(1),STIFD,0.01,
     +               ZERO,MATRIX_ASSEMBLY)
#else
      CALL SCALARSCHEME(IELEM,VCN,UAVG(3),CELRES,SOURCE,WORK,
     +                  TAUX,DWORK,BETA,STIFC,NDIM,NOFVERT,
     +                  MATRIX_ASSEMBLY)
C
C     Diffusion term ...
C
          CALL VISCO(IELEM,WORK,DWORK,TAUX,NOFVAR,VCN,NDIM,
     +               NOFVERT,VOLUME(1),STIFD,(NUTUR+NULAM)*REINV/TPR1,
     +               ZERO,MATRIX_ASSEMBLY)
#endif
C
      IF(LTIME)THEN
          DTVOL = DELT/VOLUME(1)
          CALL UNSTEADY1(WORK,BETA,WORK,NTURB,DWORK,STIFC,VOLUME,
     1                   NTURB,NDIM,NOFVERT,MMTYPE,.FALSE.)
!    1                   NOFVERT,MM_LUMPED,.FALSE.)
      ENDIF 
C
C we could transpose NODRES: don't know what's better.....
C
         DO 33 IVERT = 1, NOFVERT
            NODRES(NOFVAR,IVERT) = DWORK(IVERT)
            TSTEP(NOFVAR,IVERT) = TSTEP(NOFVAR,IVERT) + TAUX(IVERT)
   33    CONTINUE
C
#ifdef PRINT
      write(6,*)'IELEM = ',ielem
      write(6,*)(work(ivert),ivert=1,nofvert)
      write(6,*)(dwork(ivert),ivert=1,nofvert)
#if 0
      CALL R8Mat_Print('General',' ',NOFVAR,NOFVERT,NODRES,NOFVAR,
     +         'Nodal update ',IFAIL)
!     write(6,*)'TD,TS,NT,SOU = ',td,ts,nutur,source
!     write(6,*)'OME, U,V ',omega,uavg(3),uavg(4)
      write(6,*)td,ts,nutur,source
      write(6,*)omega,uavg(3),uavg(4)
      write(6,*)'prod = ',TBPROD(NUTUR,NULAM,TS)
      write(6,*)'dest = ',TBDEST(TD,TS,NUTUR,NULAM)
      write(6,*)'diff = ',TBDIFFX
      write(6,*)'celr = ',CELRES
#endif
!     pause
      CALL FLUSH(6)
#endif
C
      IF (MATRIX_ASSEMBLY) THEN
             WRITE(6,*) 'Picard NOT implemented'
cxxx         STOP 'Picard NOT implemented'
      ENDIF
C
C     compute "real" turbulent viscosity
C
      VISCT = NUTUR*TFV1(NUTUR/NULAM)*UAVG(1)
#ifdef PRINT
!     write(6,FMT="(I6,4(1X,F12.6))")ielem,visct,viscl,uavg(1)
!     CALL FLUSH(6)
#endif
c
#ifdef DEBUG
      VISCT = 0.d0
#endif
C
      RETURN
      END
@


1.7
log
@VOLUME is now an array used to store volumes at previous time levels (ALE formulation)
@
text
@d9 1
a9 1
C     $Id: sa7.F,v 1.6 2009/10/13 08:20:04 abonfi Exp abonfi $
d122 1
a122 1
C     CALL X04CAF('General',' ',NOFVAR,3,GRAD_PRIM,NMAX,
d124 1
a124 1
C     CALL X04CAF('General',' ',NOFVAR,NOFVERT*NTIMLEVS,VCZ,NOFVAR,
d212 1
a212 1
      CALL X04CAF('General',' ',NOFVAR,NOFVERT,NODRES,NOFVAR,
@


1.6
log
@Added support for choosing the scalar advection scheme
@
text
@d9 1
a9 1
C     $Id: sa7.F,v 1.5 2009/06/11 09:49:36 abonfi Exp abonfi $
d48 1
a48 1
      DOUBLE PRECISION VOLUME,VISCL,VISCT
d54 1
a54 1
     +                 STIFEL(nofvar,nofvar,nofvert,nofvert)
a84 2
C
C
d159 1
a159 1
      SOURCE = -SOURCE*VOLUME
d179 1
a179 1
     +               NOFVERT,VOLUME,STIFD,0.01,
d189 1
a189 1
     +               NOFVERT,VOLUME,STIFD,(NUTUR+NULAM)*REINV/TPR1,
d194 3
a196 3
          DTVOL = DELT/VOLUME
          CALL UNSTEADY1(WORK,BETA,WORK,NTURB,DWORK,STIFC,NTURB,NDIM,
     1                   NOFVERT,MMTYPE,.FALSE.)
@


1.5
log
@unsteady flow release
@
text
@d9 1
a9 1
C     $Id: sa7.F,v 1.4 2007/11/14 07:23:44 abonfi Exp abonfi $
d184 3
a186 8
C     CALL NS_SCHEME(IELEM,VCN,UAVG(3),CELRES,SOURCE,WORK,
C    +                      TAUX,DWORK,BETA,STIFC,NDIM,NOFVERT,
C    +                      MATRIX_ASSEMBLY)
!     CALL NL_SCHEME(IELEM,VCN,UAVG(3),CELRES,SOURCE,WORK,
!     CALL LDA_SCHEME(IELEM,VCN,UAVG(3),CELRES,SOURCE,WORK,
      CALL NL2_SCHEME(IELEM,VCN,UAVG(3),CELRES,SOURCE,WORK,
     +                      TAUX,DWORK,BETA,STIFC,NDIM,NOFVERT,
     +                      MATRIX_ASSEMBLY)
@


1.4
log
@bug discovered with the gfortran Compiler: maybe not a true bug,
but smthg that has to do with the compiler itself....
@
text
@d9 1
a9 1
C     $Id: sa7.F,v 1.3 2007/03/12 11:06:25 abonfi Exp abonfi $
d25 2
d28 2
d31 2
d34 1
a34 2
      INCLUDE 'constants'
      INCLUDE 'three'
d37 1
d51 5
d64 1
a64 1
      INTEGER I,IELEM,IFAIL,INODE,IVERT,J
d68 3
a70 5
      DOUBLE PRECISION TSTEP(NOFVAR,*),NODRES(NOFVAR,NOFVERT),
     +                 STIFC(MAX_NOFVERT_SQR),STIFD(MAX_NOFVERT_SQR),
     +                 VCN(3*MAXNOFVERT),VCZ(NOFVAR,NOFVERT),RWORK(*),
     +                 STIFEL(nofvar,nofvar,nofvert,nofvert),
     +                 WORK(4),DWORK(4),TAUX(MAXNOFVERT)
a82 4
C     .. Common blocks ..
C     ..
C     .. Equivalences ..
C     ..
a90 3
#ifdef PRINT
      write(6,*)'before GRAD PRIM'
#endif
a91 3
#ifdef PRINT
      write(6,*)'after GRAD PRIM'
#endif
d95 1
a95 1
      VISCL = SUTHERLAW(0.d0,ABAR,ASQR)
d126 1
a126 1
C     CALL X04CAF('General',' ',NOFVAR,NOFVERT,VCZ,NOFVAR,
d129 4
a132 2
      DO 22 IVERT = 1, NOFVERT
             WORK(IVERT) = VCZ(NOFVAR,IVERT)
d145 1
a145 1
      write(6,*)'w = ',omega,' ts ',ts,' nut ',nutur
d177 2
a178 2
      CALL NS_SCHEME(IELEM,VCN,UAVG(3),CELRES,0.d0,WORK,
     +                      TAUX,DWORK,STIFC,NDIM,NOFVERT,
d185 1
a185 1
C    +                      TAUX,DWORK,STIFC,NDIM,NOFVERT,
d187 4
a190 2
      CALL NL_SCHEME(IELEM,VCN,UAVG(3),CELRES,SOURCE,WORK,
     +                      TAUX,DWORK,STIFC,NDIM,NOFVERT,
a194 4
#ifdef PRINT
      write(6,*)'before visco '
      call flush(6)
#endif
d200 7
a209 6
C
C there is no need to add the residual since it should
C be empty
C
caldo       NODRES(NOFVAR,IVERT) = NODRES(NOFVAR,IVERT) + DWORK(IVERT)
caldo
a210 1
caldo
d216 1
d243 2
a244 2
      write(6,FMT="(I6,4(1X,F12.6))")ielem,visct,viscl,uavg(1)
      CALL FLUSH(6)
a245 2
!     write(6,FMT="(I6,4(1X,F12.6))")ielem,zavg(nofvar),
!    +TBPROD(NUTUR,NULAM,TS),TBDEST(TD,TS,NUTUR,NULAM),TBDIFFX
a250 3
#ifdef PRINT
      write(6,*) 'before leaving sa7' 
#endif
@


1.3
log
@before introducing changes related to GCC4.1.1
@
text
@d6 2
d9 1
a9 1
C     $Id: sa7.F,v 1.2 2003/07/24 08:57:54 abonfi Exp abonfi $
d58 2
a59 2
     +                 STIFC(VMAX*VMAX),STIFD(VMAX*VMAX),VCN(3*VMAX),
     +                 VCZ(NOFVAR,NOFVERT),RWORK(*),
d61 1
a61 1
     +                 WORK(4),DWORK(4),TAUX(VMAX)
d86 3
d90 3
d143 3
a145 1
C     write(6,*)'w = ',omega,' ts ',ts
d192 4
d208 1
a208 1
            NODRES(NOFVAR,IVERT) = NODRES(NOFVAR,IVERT) + DWORK(IVERT)
d218 3
a220 3
#if 1
!     CALL X04CAF('General',' ',NOFVAR,NOFVERT,NODRES,NOFVAR,
!    +         'Nodal update ',IFAIL)
d231 1
a240 1
C     write(6,*)ielem,visct
d242 4
a245 1
!     write(6,FMT="(I6,4(1X,F12.6))")ielem,visct,viscl,uavg(1)
d253 3
@


1.2
log
@a working version
@
text
@d7 1
a7 1
C     $Id: sa7.F,v 1.1 2002/10/24 01:58:51 abonfi Exp abonfi $
d20 1
d110 6
a115 1
      NUTUR = MAX(0.d0,ZAVG(NOFVAR))
d173 4
a176 1
      CALL NS_SCHEME(IELEM,VCN,UAVG(3),CELRES,SOURCE,WORK,
d195 3
d202 1
a202 1
      write(6,*)ielem
d204 6
a209 3
      CALL X04CAF('General',' ',NOFVAR,NOFVERT,NODRES,NOFVAR,
     +         'Nodal update ',IFAIL)
      write(6,*)ielem,td,ts,nutur,source
d215 2
a216 1
      pause
d228 3
a230 1
c     write(6,*)ielem,nutur,nulam,visct,viscl
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
C     $Id: sa8.F,v 1.1 2002/09/13 15:59:00 abonfi Exp abonfi $
d16 2
d19 1
a19 1
#define DEBUG
d49 1
a49 1
     +                 TS,TCHI,TBDIFFX,GRADNRM
d85 4
d91 3
a93 1
      VISCL = SUTHERLAW(0.d0,ABAR,ASQR)/UAVG(1)
d109 1
a109 1
      VISCT = MAX(0.d0,ZAVG(NOFVAR))
d128 1
a128 1
      TS = TSC(OMEGA,TD,VISCT,VISCL)
d140 2
a141 2
      SOURCE = TBPROD(VISCT,VISCL,TS) + 
     2         TBDEST(TD,TS,VISCT,VISCL) +
d154 1
a154 1
CXXXX     write(6,*)source,(VISCT+VISCL)*REINV/TPR1
d159 8
a172 1
#ifdef DEBUG
d174 1
a174 5
     +               NOFVERT,VOLUME,STIFD,0.01,
     +               ZERO,MATRIX_ASSEMBLY)
#else
          CALL VISCO(IELEM,WORK,DWORK,TAUX,NOFVAR,VCN,NDIM,
     +               NOFVERT,VOLUME,STIFD,(VISCT+VISCL)*REINV/TPR1,
d181 5
a185 1
            NODRES(NOFVAR,IVERT) = DWORK(IVERT)
d189 13
a201 11
!     write(6,*)ielem
!     write(6,*)(dwork(ivert),ivert=1,nofvert)
!     CALL X04CAF('General',' ',NOFVAR,NOFVERT,NODRES,NOFVAR,
!    +         'Nodal update ',IFAIL)
C     write(6,*)ielem,td,ts,visct,source
C     write(6,*)omega,uavg(3),uavg(4)
C     write(6,*)'prod = ',TBPROD(VISCT,VISCL,TS)
C     write(6,*)'dest = ',TBDEST(TD,TS,VISCT,VISCL)
C     write(6,*)'diff = ',TBDIFFX
C     write(6,*)'celr = ',CELRES
C     pause
d204 2
a205 1
             STOP 'Picard NOT implemented'
d211 3
a213 3
      TCHI = VISCT/VISCL
      VISCT = VISCT*TFV1(TCHI)
cxxx
a215 3
c
c     prova con VISCL=0.d0 ed il modello "intero"
c
a216 1
cxxx
a218 1
C
@
