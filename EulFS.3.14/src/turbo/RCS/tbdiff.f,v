head	1.2;
access
	abonfi
	tesistim;
symbols
	release3_14_0:1.2
	release3_13_0:1.2
	release3_12_0:1.2
	release3_11_0:1.2
	release3_10_0:1.2
	release3_8_0:1.2
	release3_7_1:1.2
	release3_7_0:1.2
	release3_4_5:1.2
	release3_4_4:1.2
	release3_4_3:1.2
	release3_4_2:1.2
	release3_4_1:1.2
	release3_4_0:1.2
	release3_3_5:1.2
	release3_3_4:1.2
	release3_3_3:1.2
	release3_3_2:1.2
	release3_3_1:1.2
	release3_3_0:1.1;
locks; strict;
comment	@c @;


1.2
date	2013.01.26.12.01.29;	author abonfi;	state Exp;
branches;
next	1.1;

1.1
date	2000.06.20.08.53.11;	author aldo;	state Exp;
branches;
next	;


desc
@alternative discretization of the non-conservative diffusion
term
@


1.2
log
@changed the name of included files
@
text
@      DOUBLE PRECISION FUNCTION TBDIFF(GRADVT,NDIM)
C
C     $Id: tbdiff.f,v 1.1 2000/06/20 08:53:11 aldo Exp abonfi $
C
      IMPLICIT NONE
C
C     NON conservative Diffusion term: TCB2 / TPR1 * (\nabla u)**2
C     from the Spalart-Allmaras model
C
      INCLUDE 'paramt.h'
      INCLUDE 'three.com'
      INCLUDE 'turb.com'
      INCLUDE 'visco.com'
C
C     GRADVT is just a dummy, should be used to store the
C            gradient of turb. viscosity
C
      INTEGER NDIM
      DOUBLE PRECISION GRADVT(NDIM)
      DOUBLE PRECISION GRADNRM
C
C     Executable Statements ..
C
C     potrebbe essere piu` appropriato ricalcolare il
C     gradiente ed aggiungere la parte implicita
C
      GRADNRM = GRAD_PARM(1,1)**2 + GRAD_PARM(1,2)**2
      IF(NDIM.EQ.3)GRADNRM = GRADNRM + GRAD_PARM(1,3)**2
C
      TBDIFF = TCB2/TPR1*REINV * GRADNRM
C
      RETURN
      END
C
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
C     $Id$
d11 1
a11 1
      INCLUDE 'three'
@
