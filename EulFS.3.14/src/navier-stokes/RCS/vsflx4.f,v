head	1.19;
access
	tesistim
	abonfi;
symbols
	release3_14_0:1.19
	release3_13_0:1.19
	release3_12_0:1.19
	release3_11_0:1.19
	release3_10_0:1.19
	release3_8_0:1.19
	release3_7_1:1.19
	release3_7_0:1.18
	release3_4_5:1.17
	release3_4_4:1.17
	release3_4_3:1.17
	release3_4_2:1.17
	release3_4_1:1.17
	release3_4_0:1.17
	release3_3_5:1.17
	release3_3_4:1.16
	release3_3_3:1.16
	release3_3_2:1.16
	release3_3_1:1.15
	release3_3_0:1.14;
locks; strict;
comment	@c @;


1.19
date	2020.03.28.09.52.52;	author abonfi;	state Exp;
branches;
next	1.18;

1.18
date	2020.02.27.10.35.31;	author abonfi;	state Exp;
branches;
next	1.17;

1.17
date	2013.05.02.15.51.36;	author abonfi;	state Exp;
branches;
next	1.16;

1.16
date	2013.01.29.14.38.03;	author abonfi;	state Exp;
branches;
next	1.15;

1.15
date	2013.01.26.11.56.44;	author abonfi;	state Exp;
branches;
next	1.14;

1.14
date	2009.06.11.09.42.20;	author abonfi;	state Exp;
branches;
next	1.13;

1.13
date	2004.03.04.18.34.50;	author abonfi;	state Exp;
branches;
next	1.12;

1.12
date	2002.09.14.09.12.49;	author abonfi;	state Exp;
branches;
next	1.11;

1.11
date	2002.09.10.12.51.18;	author abonfi;	state Exp;
branches;
next	1.10;

1.10
date	2000.11.14.17.09.35;	author aldo;	state Exp;
branches;
next	1.9;

1.9
date	2000.10.20.08.19.08;	author aldo;	state Exp;
branches;
next	1.8;

1.8
date	2000.10.12.10.55.21;	author aldo;	state Exp;
branches;
next	1.7;

1.7
date	2000.08.18.14.16.45;	author aldo;	state Exp;
branches;
next	1.6;

1.6
date	98.11.19.10.04.45;	author aldo;	state Exp;
branches;
next	1.5;

1.5
date	98.02.09.17.32.38;	author aldo;	state Exp;
branches;
next	1.4;

1.4
date	98.02.06.18.26.19;	author aldo;	state Exp;
branches;
next	1.3;

1.3
date	98.01.04.23.15.57;	author aldo;	state Exp;
branches;
next	1.2;

1.2
date	97.12.01.15.45.09;	author aldo;	state Exp;
branches;
next	1.1;

1.1
date	97.11.29.09.22.49;	author aldo;	state Exp;
branches;
next	;


desc
@routine for computing viscous fluxes in COMPRESSIBLE flows
@


1.19
log
@renamed subroutine call
@
text
@!>
!> Compute viscous fluxes in the interior cells (compressible case)
!>
!> Calculation of the nodal residual
!> =================================
!>
!> Each vertex \c i of cell \c T receives a contribution due to the
!> viscous fluxes which amounts to:
!> \f[
!> {\tt GFLUX(:,IVERT)} =
!>   -\frac{1}{d} \mathbf{n}_i^T \cdot \mathbf{G}^T
!> \f]
!>
!> where:
!> \f[
!> \mathbf{G}^T = \left(
!>    \begin{array}{c}
!>  0 \\ \mathbf{u}  \cdot \mathbf{\tau} + \nabla q \\ \mathbf{\tau}
!>    \end{array}
!> \right)
!> \f]
!> is cell-wise constant (hence the superscript  <tt>T</tt>).
!>
!> In order to be consistent with the use of parameter vector as the set of dependent variables,
!> the gradient of the primitive variables \f$\left(\rho,p,u,v,w\right)\f$
!> is computed from the gradient of the parameter vector and stored in: 
!> \f[
!> {\tt GRAD\_PRIM} = \left(
!>    \begin{array}{ccc}
!>        \rho_x & \rho_x & \rho_x \\
!>        p_x & p_x & p_x  \\
!>        u_x & u_x & u_x  \\
!>        v_x & v_x & v_x  \\
!>        w_x & w_x & w_x 
!>    \end{array} \right)
!> \f]
!>
!> The stress tensor, which is also cell-wise constant, is stored in \f${\tt TAU}\f$
!> and it is computed using the entries of \f${\tt GRAD\_PRIM}\f$
!>
!> \f{eqnarray*}{ 
!> {\tt TAU} &=& \mu \left[ \nabla \mathbf{u} + \left(\nabla\mathbf{u}\right)^t \right] + \lambda \left(\nabla \cdot \mathbf{u} \right)\\ 
!> &=&
!> \left(
!>    \begin{array}{ccc}
!>    2\,\mu\,u_x +\lambda\,{\tt DIVV} & \mu\left(u_y+v_x\right) & \mu\left(u_z+w_x\right) \\
!>     \mu\left(v_x+u_y\right) & 2\,\mu\,v_y +\lambda\,{\tt DIVV} & \mu\left(v_z+w_y\right) \\
!>     \mu\left(w_x+u_z\right) & \mu\left(w_y+v_z\right) & 2\,\mu\,w_z +\lambda\,{\tt DIVV}
!>    \end{array}
!> \right)
!> \f}
!>
!> where \f${\tt DIVV} = u_x + v_y + w_z\f$, \f$\mu = {\tt VISCL} + {\tt VISCT}\f$ and \f$\lambda = -2/3\,\mu\f$.
!>
!>
!> The term that accounts for thermal conductivity is:
!>
!> \f[ 
!> \nabla q = \frac{1}{\gamma-1} \; k \; \nabla a^2
!> \f]
!>
!> where:
!>
!> \f[ 
!> k = \left( \frac{\mu}{\mbox{Pr}} + \frac{\mu_T}{\mbox{Pr}_T} \right) = {\tt VISCL/PRANDTL+VISCT/TPR}
!> \f]
!>
!> \f[ 
!> \nabla a^2 = \gamma \nabla \left( \frac{p}{\rho} \right) =
!> \frac{1}{\hat{\rho}} \left[\gamma\,\nabla p - \hat{a}^2\,\nabla\rho\right]
!> \f]
!>
!> Having set:
!>
!> \f[ 
!> {\tt CNST} = \frac{k}{\left(\gamma-1\right)\hat{\rho}}
!> \f]
!>
!> the viscous contribution to the energy equation is stored in the fourth column of the array \f${\tt TAU}\f$:
!>
!> \f[ 
!> {\tt TAU(:,4)} = {\tt CNST} \left[\gamma\,\nabla p - \hat{a}^2\,\nabla\rho\right]
!> + \hat{\mathbf{u}} \cdot \mathbf{\tau}
!> \f]
!>
!> The cell-averaged flow velocity \f$\hat{\mathbf{u}}\f$ is stored in \f${UAVG(3:5)}\f$;
!> the entries of \f${UAVG}\f$ are \f$\left(\hat{\rho},\hat{H},\hat{u},\hat{v},\hat{w}\right)\f$, where:
!>
!> \f[
!> \hat{\rho} = \widehat{Z}_1^2, \quad
!> \hat{H} = \widehat{Z}_2/\widehat{Z}_1, \quad
!> \hat{u} = \widehat{Z}_3/\widehat{Z}_1, \quad
!> \hat{v} = \widehat{Z}_4/\widehat{Z}_1, \quad
!> \hat{w} = \widehat{Z}_5/\widehat{Z}_1
!> \f]
!> and the cell-averaged value of the parameter vector is:
!> \f[ 
!> \hat{Z} = \frac{1}{d+1} \sum_{j=1}^{d+1} Z_j
!> \f]
!>
!> where the subscript \f$j\f$ refers to the vertex, not to the individual components of \f$Z\f$.
!>
!> Calculation of the time-step
!> ============================
!>
!> In order to mimick the scalar case, the time-step restriction should read:
!>
!> \f[
!> \frac{\Delta t}{V_i} \le \frac{1}{\sum d_{ij}} \quad\quad\mbox{where}\quad\quad d_{ij} = \frac{\nu}{d^2 \,V^T} \mathbf{n}_i \cdot \mathbf{n}_j
!> \f]
!>
!> \f$\nu = \mu/\hat{\rho}\f$ being the cell-averaged kinematic viscosity.
!>
!> Instead, the dimensionless version we use is:
!>
!> \f[
!> d_{ij} = \frac{1}{d^2 \, \mbox{Re} \, V^T} \mathbf{n}_i \cdot \mathbf{n}_j
!> \f]
!>
!> which amounts to assume that the dimensionless kinematic viscosity equals 1.
!>
!> Matrix assembly (only when \c MATRIX_ASSEMBLY \c .EQV. \c TRUE )
!> ============================
!>
!> the \c DMAT(:,:,i,j) matrix is such that
!>
!>
!> \f[
!> -\frac{1}{d} \mathbf{n}_i^T \cdot \mathbf{G}^T = \sum_{j=1}^{d+1} D_{ij} U_j
!> \f]
!>
!> where the summation ranges over all \c d+1 vertices of the cell and \f$U_j\f$ is the value of the conservative variable in vertex <tt>j</tt>.
!>
!> It can be shown that:
!>
!> \f[
!> D_{ij}^T = \frac{1}{d^2 \, V^T \, \mbox{Re}}
!> \left[ D_{ij}^{\tau} + D_{ij}^{\nabla q} \right] 2 \left( \frac{\partial U}{\partial Z} \right)_{Z_j}.
!> \f]
!> where:
!> \f[
!> D_{ij}^{\tau} =
!> \frac{1}{\widehat{\sqrt{\rho}}} \left(
!> \begin{array}{ccc}  0 & 0 & {\bf 0} \\
!> - {\bf d}_{ij} \cdot \hat{\mathbf{u}} & 0 & {\bf d}_{ij}^t \\
!> -\tilde{D}_{ij} \cdot \hat{\mathbf{u}} & 0 & \tilde{D}_{ij} \end{array} \right),
!> \f]
!> \f[
!> D_{ij}^{\nabla q} =
!> \frac{k}{\widehat{\sqrt{\rho}}}\,
!> \left( \begin{array}{ccr}
!> 0 & 0 & {\bf 0}^t \\
!> \hat{H} - \hat{a}^2/\delta &
!> 1 & -\hat{\mathbf{u}} \\
!> {\bf 0} & {\bf 0} & {\bf 0} \end{array}
!> \right) \left( \mathbf{n}_i \cdot \mathbf{n}_j \right)
!>\f]
!>\f[
!> {\bf d}_{ij} =
!> \mu \left( \hat{\mathbf{u}} \cdot \mathbf{n}_j \right) \mathbf{n}_i +
!>        \mu \left( \mathbf{n}_j \cdot \mathbf{n}_i \right) \hat{\mathbf{u}} +
!>        \lambda \left( \hat{\mathbf{u}} \cdot \mathbf{n}_i \right) \mathbf{n}_j
!>\f]
!>\f[
!>   \tilde{D}_{ij} =
!>   \left[ \mu \left( \mathbf{n}_j   \mathbf{n}_i \right) + \mu
!>   \left( \mathbf{n}_i \cdot \mathbf{n}_j \right) I +
!>   \lambda \left( \mathbf{n}_i   \mathbf{n}_j \right) \right]
!>\f]
!>observe that \f$\tilde{D}_{ij} = \tilde{D}^{t}_{ji}\f$ and that matrix \f$D_{ij}^{\nabla q}\f$, apart from the term \f$\mathbf{n}_i \cdot \mathbf{n}_j\f$, is cell-wise constant. 
!>
!> This is to say that we might save some calculations, which we are not doing right now.
!>
!>the vector \f${\bf d}_{ij}\f$ is stored in <tt>WORK(2,3:5)</tt>.
!>
!>the matrix \f$\tilde{D}_{ij}\f$ is stored in <tt>WORK(3:5,3:5)</tt>.
!>
!>the scalar \f$-{\bf d}_{ij}\cdot\hat{\mathbf{u}}\f$ is stored in <tt>WORK(2,1)</tt>.
!>
!>the vector \f$-\tilde{D}_{ij}\cdot\hat{\mathbf{u}}\f$ is stored in <tt>WORK(3:5,1)</tt>.
!>
!>so that, at this stage, apart from the term \f$\widehat{\sqrt{\rho}}\f$, matrix \f$D_{ij}^{\tau}\f$ has been built and stored in <tt>WORK</tt>.
!>
!>we set \f${\tt TEMPA} = \frac{\mu}{\mbox{Pr}} + \frac{\mu_T}{\mbox{Pr}_T}\f$
!>
!>we set \f${\tt TEMPB} = {\tt TEMPA} \left( \mathbf{n}_i \cdot \mathbf{n}_j\right)\f$
!>
!>we set:
!>\f[
!> {\tt TEMPC} = \frac{1}{d^2\,\widehat{\sqrt{\rho}}\,\mbox{Re}\,V^T}
!>\f]
!>
!> then add matrix, apart from the term \f$\widehat{\sqrt{\rho}}\f$, \f$D_{ij}^{\nabla q}\f$ to <tt>WORK</tt>.
!>
!> Finally, we compute matrix \f$D_{ij}\f$ by calling the Blas routine <tt>DGEMM</tt> of each pair of vertices.
!>
!>
!> @@param[in] IELEM counter of the current triangle/tetrahedron
!> @@param[in] ZROE is parameter vector in the NOFVERT vertices of cell \c IELEM
!> @@param[in,out] NodRes nodal residual
!> @@param[in,out] TSTEP nodal timestep
!> @@param[in] NOFVAR is the nof dofs
!> @@param[in] VCN Cartesian components of the normals to a face, multiplied by the face area
!> @@param[in] NDIM dimension of the space
!> @@param[in] NOFVERT nof vertices (= NDIM+1)
!> @@param[in] VOLUME area/volume of the current element (triangle,tetrahedron)
!> @@param[in,out] STIFD implicit matrix, built only when \c MATRIX_ASSEMBLY .EQV. .TRUE.
!> @@param[in] VISCL laminar viscosity
!> @@param[in] VISCT turbulent viscosity
!> @@param[in] MATRIX_ASSEMBLY \c .EQV. \c .TRUE. if the implicit matrix \c STIFD has to be built, i.e. we are using Picard linearization
!>
!>
!>
!> \author $Author: abonfi $
!> \version $Revision: 1.18 $
!> \date $Date: 2020/02/27 10:35:31 $
!> \bug The calculation of the time-step restriction assumes that the dimensionless kinematic viscosity equals 1
!> \warning The calculation of \c DMAT might be speeded up
!>
      SUBROUTINE VSFLX4(IELEM,ZROE,NodRes,TSTEP,NOFVAR,VCN,NDIM,NOFVERT,
     +                  VOLUME,STIFD,VISCL,VISCT,MATRIX_ASSEMBLY)
C
C     $Id: vsflx4.f,v 1.18 2020/02/27 10:35:31 abonfi Exp abonfi $
C
      IMPLICIT NONE 
C
C
C
C     This routine computes the viscous fluxes which appear
C        in the Navier Stokes eqns. in the INTERIOR elements ..
C
C
      INCLUDE 'paramt.h'
      INCLUDE 'bnd.h'
      INCLUDE 'constants.h'
C
      INCLUDE 'dofs.com'
      INCLUDE 'pfcgas.com'
      INCLUDE 'three.com'
      INCLUDE 'transf.com'
      INCLUDE 'turb.com'
      INCLUDE 'visco.com'
C
C
C
C
C     .. Parameters ..
      DOUBLE PRECISION TWOTHIRD
      INTEGER NMAX2
      PARAMETER (TWOTHIRD=TWO/3.D0,NMAX2=NMAX*NMAX)
C     ..
C     .. Scalar Arguments ..
      DOUBLE PRECISION VISCL,VISCT,VOLUME
      INTEGER IELEM,NDIM,NOFVAR,NOFVERT
      LOGICAL MATRIX_ASSEMBLY
C     ..
C     .. Array Arguments ..
      DOUBLE PRECISION TSTEP(NOFVAR,NOFVERT),
     +       NodRes(NOFVAR,NOFVERT),STIFD(NOFVAR,NOFVAR,NOFVERT,
     +       NOFVERT),VCN(NDIM,NOFVERT),ZROE(NOFVAR,NOFVERT)
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION CNST,DIVV,LD,LI,LJ,MI,MJ,MPLUSL,MU,NI,NI_DOT_NJ,
     +                 NJ,TEMPA,TEMPB,TEMPC,U_DOT_NI,U_DOT_NJ,DSUM,DTV
      INTEGER I,IFAIL,IV,IVERT,JV,IADDR,NOFEQN
C     ..
C     .. Local Arrays ..
      DOUBLE PRECISION GFLUX(5,VMAX),TAU(3,4),VSFLX(5,VMAX),
     +                 WKSP1(NMAX*VMAX),WORK(NMAX,NMAX)
C     ..
C     .. External Functions ..
      DOUBLE PRECISION DDOT
      EXTERNAL DDOT
C     ..
C     .. External Subroutines ..
      EXTERNAL DCOPY,DGEMM,DGEMV,DINIT
C     ..
C     .. Data statements ..
C
C
      DATA WORK/NMAX2*ZERO/
      DATA TAU,NI,NJ/12*ZERO,2*ZERO/
C     ..
C
      NOFEQN = NDIM + 2
C
C     could compute it directly so as to
C     avoid call overhead, but for the time being .....
C
      CALL GRADPRIM(IELEM,NDIM,NOFEQN)
C
      MU = VISCL + VISCT
      LD = -TWOTHIRD*MU
C
C     Compute the divergence of the velocity field
C
      DIVV = GRAD_PRIM(3,1) + GRAD_PRIM(4,2)
      IF(NDIM.EQ.3)DIVV = DIVV + GRAD_PRIM(5,3)
C
C     Compute the stress tensor ...
C     \mu ( grad u + grad^T u ) + \lambda div u ]
C
      TAU(1,1) = TWO*MU*GRAD_PRIM(3,1) + LD*DIVV
      TAU(2,2) = TWO*MU*GRAD_PRIM(4,2) + LD*DIVV
      TAU(1,2) = MU* (GRAD_PRIM(3,2)+GRAD_PRIM(4,1))
      TAU(1,3) = MU* (GRAD_PRIM(3,3)+GRAD_PRIM(5,1))
      TAU(2,3) = MU* (GRAD_PRIM(4,3)+GRAD_PRIM(5,2))
      TAU(2,1) = TAU(1,2)
      IF(NDIM.EQ.3)THEN
          TAU(3,3) = TWO*MU*GRAD_PRIM(5,3) + LD*DIVV
          TAU(3,1) = TAU(1,3)
          TAU(3,2) = TAU(2,3)
      ENDIF
C
C     Compute the temperature gradient and energy term
C     (the latter is stored in the last column of TAU)
C
      CNST = (VISCL/PRANDTL+VISCT/TPR)/(GM1*UAVG(1))
C
C     \nabla Q = viscl / (gamma - 1.d0) / Pr * \nabla (a^2)
C
      TAU(1,4) = CNST* (GAM*GRAD_PRIM(2,1)-ASQR*GRAD_PRIM(1,1)) +
     +           UAVG(3)*TAU(1,1) + UAVG(4)*TAU(2,1)
      TAU(2,4) = CNST* (GAM*GRAD_PRIM(2,2)-ASQR*GRAD_PRIM(1,2)) +
     +           UAVG(3)*TAU(1,2) + UAVG(4)*TAU(2,2)
      IF(NDIM.EQ.3)THEN
          TAU(1,4) = TAU(1,4) + UAVG(5)*TAU(3,1)
          TAU(2,4) = TAU(2,4) + UAVG(5)*TAU(3,2)
          TAU(3,4) = CNST* (GAM*GRAD_PRIM(2,3)-ASQR*GRAD_PRIM(1,3)) +
     +           UAVG(3)*TAU(1,3) + 
     2           UAVG(4)*TAU(2,3) + 
     3           UAVG(5)*TAU(3,3)
      ENDIF
C
C     CNST = 1.d0/(d * Re)
C
      CNST = -REINV/NDIM
      DTV = REINV/(NDIM*NDIM*VOLUME)
C
C     Compute the viscous fluxes for each of the NOFVERT vertices
C
      DO 17 IVERT = 1,NOFVERT
C
          DSUM = VCN(1,IVERT)*VCN(1,IVERT)+
     1           VCN(2,IVERT)*VCN(2,IVERT)
          IF(NDIM.EQ.3)DSUM = DSUM + VCN(3,IVERT)*VCN(3,IVERT)
C
C         time step
C
          TSTEP( 1,IVERT) = TSTEP( 1,IVERT) + DTV*DSUM
          TSTEP(IE,IVERT) = TSTEP(IE,IVERT) + DTV*DSUM
          TSTEP(IX,IVERT) = TSTEP(IX,IVERT) + DTV*DSUM
          TSTEP(IY,IVERT) = TSTEP(IY,IVERT) + DTV*DSUM
          IF(NDIM.EQ.3)TSTEP(IZ,IVERT) = TSTEP(IZ,IVERT) + DTV*DSUM
C
          TEMPA = VCN(1,IVERT)*TAU(1,4)+VCN(2,IVERT)*TAU(2,4)
          TEMPB = VCN(1,IVERT)*TAU(1,1)+VCN(2,IVERT)*TAU(2,1)
          TEMPC = VCN(1,IVERT)*TAU(1,2)+VCN(2,IVERT)*TAU(2,2)
          IF(NDIM.EQ.3)THEN
             TEMPA = TEMPA + VCN(3,IVERT)*TAU(3,4)
             TEMPB = TEMPB + VCN(3,IVERT)*TAU(3,1)
             TEMPC = TEMPC + VCN(3,IVERT)*TAU(3,2)
             GFLUX(5,IVERT) = CNST*(
     1       VCN(1,IVERT)*TAU(1,3)+VCN(2,IVERT)*TAU(2,3)+
     2       VCN(3,IVERT)*TAU(3,3) )
          ENDIF
          GFLUX(1,IVERT) = ZERO
          GFLUX(2,IVERT) = CNST*TEMPA
          GFLUX(3,IVERT) = CNST*TEMPB
          GFLUX(4,IVERT) = CNST*TEMPC
C
          NodRes(2,IVERT) = NodRes(2,IVERT) + GFLUX(2,IVERT)
          NodRes(3,IVERT) = NodRes(3,IVERT) + GFLUX(3,IVERT)
          NodRes(4,IVERT) = NodRes(4,IVERT) + GFLUX(4,IVERT)
          IF (NDIM.EQ.3) NodRes(5,IVERT) = NodRes(5,IVERT) + 
     &    GFLUX(5,IVERT)
C
   17 CONTINUE
C         write(6,*)ielem
C     CALL R8Mat_Print('General',' ',NOFVAR,NOFVERT,Nodres,
C    +NOFVAR,'Nodres ',IFAIL)
C
C     Compute the stress vectors
C
      IF (.NOT.MATRIX_ASSEMBLY) RETURN
C
C     contruct a matrix D_{i,j} such that the viscous terms
C     can be written as \sum_j D_{i,j} U_j
C
      MPLUSL = MU + LD
      CNST = -ASQR/GM1 + KINETIC
      TEMPA = (VISCL/PRANDTL+VISCT/TPR)
      TEMPC = REINV/ (NDIM*NDIM*VOLUME*ZAVG(1))
C
C     Loop over vertices ...
C
      DO 10 JV = 1,NOFVERT
C
          LJ = VCN(1,JV)
          MJ = VCN(2,JV)
          IF (NDIM.EQ.3) NJ = VCN(3,JV)
C
          U_DOT_NJ = UAVG(3)*LJ + UAVG(4)*MJ + UAVG(5)*NJ
C
          DO 10 IV = NOFVERT,1,-1
c        DO 10 IV = 1, NOFVERT
C
              LI = VCN(1,IV)
              MI = VCN(2,IV)
              IF (NDIM.EQ.3) NI = VCN(3,IV)
C
              U_DOT_NI = UAVG(3)*LI + UAVG(4)*MI + UAVG(5)*NI
C
              NI_DOT_NJ = LI*LJ + MI*MJ + NI*NJ
C
C     Be VERY careful with WORK: make sure that non zero elements
C     are cleared (overwritten) when going from one vertex to the next
C
C     Energy flux
C
              WORK(2,3) = MU* (U_DOT_NJ*LI+NI_DOT_NJ*UAVG(3)) +
     +                    LD*U_DOT_NI*LJ
              WORK(2,4) = MU* (U_DOT_NJ*MI+NI_DOT_NJ*UAVG(4)) +
     +                    LD*U_DOT_NI*MJ
              WORK(2,5) = MU* (U_DOT_NJ*NI+NI_DOT_NJ*UAVG(5)) +
     +                    LD*U_DOT_NI*NJ
C
C     Momentum flux
C
              WORK(3,3) = MPLUSL*LI*LJ + MU*NI_DOT_NJ
              WORK(4,4) = MPLUSL*MI*MJ + MU*NI_DOT_NJ
              WORK(5,5) = MPLUSL*NI*NJ + MU*NI_DOT_NJ
C
              WORK(3,4) = MU*MI*LJ + LD*LI*MJ
              WORK(3,5) = MU*NI*LJ + LD*LI*NJ
C
              WORK(4,3) = MU*LI*MJ + LD*MI*LJ
              WORK(4,5) = MU*NI*MJ + LD*MI*NJ
C
              WORK(5,3) = MU*LI*NJ + LD*NI*LJ
              WORK(5,4) = MU*MI*NJ + LD*NI*MJ
C
C     Transform THE DIFFUSION matrix from primitive
C     into parameter vector; note that the density^{-1/2} term is omitted
C
              WORK(2,1) = -UAVG(3)*WORK(2,3) - UAVG(4)*WORK(2,4) -
     +                     UAVG(5)*WORK(2,5)
              WORK(3,1) = -UAVG(3)*WORK(3,3) - UAVG(4)*WORK(3,4) -
     +                     UAVG(5)*WORK(3,5)
              WORK(4,1) = -UAVG(3)*WORK(4,3) - UAVG(4)*WORK(4,4) -
     +                     UAVG(5)*WORK(4,5)
              WORK(5,1) = -UAVG(3)*WORK(5,3) - UAVG(4)*WORK(5,4) -
     +                     UAVG(5)*WORK(5,5)
C
C        Add now the heat flux term (which is already in
C            parameter vector) ...
C            NOTE that again the density^{-1/2} term is missing
C
C
              TEMPB = NI_DOT_NJ*TEMPA
C
C
              WORK(2,1) = WORK(2,1) + TEMPB*CNST
              WORK(2,2) = TEMPB
              WORK(2,3) = WORK(2,3) - TEMPB*UAVG(3)
              WORK(2,4) = WORK(2,4) - TEMPB*UAVG(4)
              WORK(2,5) = WORK(2,5) - TEMPB*UAVG(5)
C
C        Transforms the diffusion matrix from parameter vector
C            into conserved variables ...
C
C  N.B. the diffusion stiffness matrix is add to the convective one
C       (BETA = 1.d0) in DGEMM
C
              IADDR = (JV-1)*NOFEQN*NOFEQN+1
   20         CALL DGEMM('N','N',NOFEQN,NOFEQN,NOFEQN,TWO*TEMPC,WORK,
     +                   NMAX,DZDU(IADDR),NOFEQN,ONE,STIFD(1,1,IV,JV),
     +                   NOFVAR)
C
C
   10 CONTINUE
C
C     DO IV = 1,NOFVERT
C        DO JV = IV+1,NOFVERT
C        write(6,*)iv,jv
C        CALL R8Mat_Print('General',' ',NOFVAR,NOFVAR,STIFD(1,1,IV,JV),
C    +               NOFVAR,'Diffusion element matrix',IFAIL)
C        CALL R8Mat_Print('General',' ',NOFVAR,NOFVAR,STIFD(1,1,JV,IV),
C    +               NOFVAR,'Diffusion element matrix',IFAIL)
C        pause
C     ENDDO
C     ENDDO
C
      RETURN
C
C     Debugging stuff ...
C     the following will work ONLY if STIFD is 0.d0 upon entry
C
      CALL DCOPY(NOFVAR*NOFVERT,ZROE,1,WKSP1,1)
C     Compute U_i i=1,..,NOFVERT
      CALL PARM_TO_CONS(WKSP1,NDIM,NOFVAR,NOFVERT,.FALSE.,IFAIL)
C
      CALL DINIT(5*VMAX,ZERO,VSFLX,1)
C
C     CALL R8Mat_Print('General',' ',NOFVAR,NOFVERT,WKSP1,
C    +NOFVAR,'Diffusion flux ',IFAIL)
C
C     The "explicitely" calculated viscous flux is compared
C     with the "implicit" one ...
C
      DO 12 IV = 1,NOFVERT
          DO 14 JV = 1,NOFVERT
C
              CALL DGEMV('N',NOFEQN,NOFEQN,ONE,STIFD(1,1,IV,JV),NOFVAR,
     +                   WKSP1((JV-1)*NOFVAR+1),1,ONE,VSFLX(1,IV),1)
C
C        CALL R8Mat_Print('General',' ',NOFVAR,NOFVAR,STIFD(1,1,IV,JV),
C    +   NOFVAR,'Diffusion element matrix',IFAIL)

   14     CONTINUE

          WRITE (6,FMT=*) 'Element # ',IELEM,' vertex # ',IV,'  ',
     +      TEMPC
C
          DO 15 I = 2,NOFEQN
              WRITE (6,FMT=100) GFLUX(I,IV),VSFLX(I,IV),
     +          VSFLX(I,IV)/GFLUX(I,IV)
   15     CONTINUE
C
      pause
   12 CONTINUE
C
C     PAUSE
C
      RETURN

  100 FORMAT (3 (5X,E18.8))

      END
@


1.18
log
@Added Doxygen documentation
@
text
@d215 2
a216 2
!> \version $Revision: 1.3 $
!> \date $Date: 2013/09/17 10:01:18 $
d223 1
a223 1
C     $Id: vsflx4.f,v 1.17 2013/05/02 15:51:36 abonfi Exp abonfi $
d380 1
a380 1
C     CALL X04CAF('General',' ',NOFVAR,NOFVERT,Nodres,
d486 1
a486 1
C        CALL X04CAF('General',' ',NOFVAR,NOFVAR,STIFD(1,1,IV,JV),
d488 1
a488 1
C        CALL X04CAF('General',' ',NOFVAR,NOFVAR,STIFD(1,1,JV,IV),
d505 1
a505 1
C     CALL X04CAF('General',' ',NOFVAR,NOFVERT,WKSP1,
d517 1
a517 1
C        CALL X04CAF('General',' ',NOFVAR,NOFVAR,STIFD(1,1,IV,JV),
@


1.17
log
@characteristic time stepping: allowable dt/V
is kept separately for each dof
@
text
@d1 219
d223 1
a223 1
C     $Id: vsflx4.f,v 1.16 2013/01/29 14:38:03 abonfi Exp abonfi $
a232 14
C     output:
C     ------
C     NodRes(1:NOFVAR,1:NOFVERT) is the nodal residual
C                             updated with the addition of the viscous
C                             fluxes
C     TSTEP(1:NPOIN) is the nodal timestep divided by the median
C                 dual cell updated with the addition of the viscous
C                 contribution
C
C     STIFD(1:NOFVAR,1:NOFVAR,1:NOFVERT,1:NOFVERT) is the approximate
C            jacobian updated with the addition of the viscous terms
C
C
C
d282 1
a282 1
      DATA TAU,NI,NJ/12*0.D0,2*ZERO/
d345 1
a345 1
     1          VCN(2,IVERT)*VCN(2,IVERT)
d350 1
a350 1
          TSTEP(1,IVERT) = TSTEP(1,IVERT) + DTV*DSUM
d447 1
a447 1
     +                    UAVG(5)*WORK(2,5)
d449 1
a449 1
     +                    UAVG(5)*WORK(3,5)
d451 1
a451 1
     +                    UAVG(5)*WORK(4,5)
d453 1
a453 1
     +                    UAVG(5)*WORK(5,5)
@


1.16
log
@The adiabatic index is not any longer a parameter, but a variable
@
text
@d4 1
a4 1
C     $Id: vsflx4.f,v 1.15 2013/01/26 11:56:44 abonfi Exp abonfi $
d32 1
d59 1
a59 1
     +                 NJ,TEMPA,TEMPB,TEMPC,U_DOT_NI,U_DOT_NJ,SUM
d133 1
d139 1
a139 1
          SUM = VCN(1,IVERT)*VCN(1,IVERT)+
d141 9
a149 2
          IF(NDIM.EQ.3)SUM = SUM + VCN(3,IVERT)*VCN(3,IVERT)
          TSTEP(1,IVERT) = TSTEP(1,IVERT) - CNST/ (NDIM*VOLUME)*SUM
@


1.15
log
@changed the name of included header/common files
@
text
@d4 1
a4 1
C     $Id: vsflx4.f,v 1.14 2009/06/11 09:42:20 abonfi Exp abonfi $
d32 2
a33 1
      INCLUDE 'visco.com'
d36 1
a36 1
      INCLUDE 'three.com'
@


1.14
log
@changed the calling sequence of PARM_TO_CONS
@
text
@d4 1
a4 1
C     $Id: vsflx4.f,v 1.13 2004/03/04 18:34:50 abonfi Exp abonfi $
d30 1
a30 2
      INCLUDE 'constants'
C
d35 1
a35 1
      INCLUDE 'three'
@


1.13
log
@just a variable being renamed
@
text
@d4 1
a4 1
C     $Id: vsflx4.f,v 1.12 2002/09/14 09:12:49 abonfi Exp abonfi $
d287 1
a287 1
      CALL PARM_TO_CONS(WKSP1,NDIM,NOFVAR,NOFVERT,.FALSE.)
@


1.12
log
@the timestep vector is now dimensioned NOFVAR x NPOIN
@
text
@d4 1
a4 1
C     $Id: vsflx4.f,v 1.11 2002/09/10 12:51:18 abonfi Exp abonfi $
d59 1
a59 1
      INTEGER I,IFAIL,IV,IVERT,JV,IADDR,NONAME
d79 1
a79 1
      NONAME = NDIM + 2
d84 1
a84 1
      CALL GRADPRIM(IELEM,NDIM,NONAME)
d165 3
d261 3
a263 3
              IADDR = (JV-1)*NONAME*NONAME+1
   20         CALL DGEMM('N','N',NONAME,NONAME,NONAME,TWO*TEMPC,WORK,
     +                   NMAX,DZDU(IADDR),NONAME,ONE,STIFD(1,1,IV,JV),
d287 1
a287 1
      CALL PARM_TO_CONS(WKSP1,NDIM,NOFVAR,NOFVERT)
d300 1
a300 1
              CALL DGEMV('N',NONAME,NONAME,ONE,STIFD(1,1,IV,JV),NOFVAR,
d311 1
a311 1
          DO 15 I = 2,NONAME
@


1.11
log
@changes made necessary to implement the coupled approach for RANS
@
text
@d1 1
a1 1
      SUBROUTINE VSFLX4(IELEM,ZROE,NodRes,DT,NOFVAR,VCN,NDIM,NOFVERT,
d4 1
a4 1
C     $Id: vsflx4.f,v 1.10 2000/11/14 17:09:35 aldo Exp abonfi $
d19 1
a19 1
C     DT(1:NPOIN) is the nodal timestep divided by the median
d52 1
a52 1
      DOUBLE PRECISION DT(NOFVERT),
d140 1
a140 1
          DT(IVERT) = DT(IVERT) - CNST/ (NDIM*VOLUME)*SUM
@


1.10
log
@not any more including IO devices
@
text
@d1 2
a2 2
      SUBROUTINE VSFLX4(IELEM,ZROE,RHS,DT,NOFVAR,VCN,NDIM,NOFVERT,
     +                  VOLUME,STIFD,VISCL,VISCT,TIMEIMPL)
d4 1
a4 1
C     $Id: vsflx4.f,v 1.9 2000/10/20 08:19:08 aldo Exp aldo $
d16 1
a16 1
C     RHS(1:NOFVAR,1:NOFVERT) is the nodal residual
d23 1
a23 1
C     ELTMAT(1:NOFVAR,1:NOFVAR,1:NOFVERT,1:NOFVERT) is the approximate
d49 1
a49 1
      LOGICAL TIMEIMPL
d53 2
a54 2
     +                 RHS(NOFVAR,NOFVERT),STIFD(NOFVAR,NOFVAR,NOFVERT,
     +                 NOFVERT),VCN(NDIM,NOFVERT),ZROE(NOFVAR,NOFVERT)
d59 1
a59 1
      INTEGER I,IFAIL,IV,IVERT,JV,IADDR
d79 1
d81 5
d158 5
a162 4
          RHS(2,IVERT) = RHS(2,IVERT) + GFLUX(2,IVERT)
          RHS(3,IVERT) = RHS(3,IVERT) + GFLUX(3,IVERT)
          RHS(4,IVERT) = RHS(4,IVERT) + GFLUX(4,IVERT)
          IF (NDIM.EQ.3) RHS(5,IVERT) = RHS(5,IVERT) + GFLUX(5,IVERT)
d168 1
a168 1
      IF (.NOT.TIMEIMPL) RETURN
d258 3
a260 3
              IADDR = (JV-1)*NOFVAR*NOFVAR+1
   20         CALL DGEMM('N','N',NOFVAR,NOFVAR,NOFVAR,TWO*TEMPC,WORK,
     +                   NMAX,DZDU(IADDR),NOFVAR,ONE,STIFD(1,1,IV,JV),
d280 1
a280 1
C     the following will work ONLY if ELTMAT is 0.d0 upon entry
d297 1
a297 1
              CALL DGEMV('N',NOFVAR,NOFVAR,ONE,STIFD(1,1,IV,JV),NOFVAR,
d308 1
a308 1
          DO 15 I = 2,NOFVAR
@


1.9
log
@minor change
@
text
@d4 1
a4 1
C     $Id: vsflx4.f,v 1.8 2000/10/12 10:55:21 aldo Exp $
a36 1
      INCLUDE 'IO'
d298 1
a298 1
          WRITE (NOUT,FMT=*) 'Element # ',IELEM,' vertex # ',IV,'  ',
d302 1
a302 1
              WRITE (NOUT,FMT=100) GFLUX(I,IV),VSFLX(I,IV),
@


1.8
log
@the diffusion edge matrices are ADD to the convection matrices;
also dropped dZdU from the arguments of the call
@
text
@d4 1
a4 1
C     $Id: vsflx4.f,v 1.7 2000/08/18 14:16:45 aldo Exp aldo $
a79 1
C     Compute laminar viscosity
@


1.7
log
@loop unrolling, also fixed a bug with one of the components
of the stress tensor and introduced the turbulent conductivity
@
text
@d1 1
a1 1
      SUBROUTINE VSFLX4(IELEM,ZROE,RHS,DT,NOFVAR,VCN,DZDU,NDIM,NOFVERT,
d4 1
a4 1
C     $Id$
d14 8
d23 5
d34 1
d53 1
a53 1
      DOUBLE PRECISION DT(NOFVERT),DZDU(NOFVAR,NOFVAR,NOFVERT),
d60 1
a60 1
      INTEGER I,IFAIL,IV,IVERT,JV
d250 4
d255 1
a255 1
     +                   NMAX,DZDU(1,1,JV),NOFVAR,ZERO,STIFD(1,1,IV,JV),
d275 1
@


1.6
log
@changed dZdU to dzDU(1:NOFVAR,1:NOFVAR,1:NOFVERT)[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[d[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
@
text
@d4 2
d8 2
d21 1
a27 10
C
C
C
C
C
C
C
C
C
C
d45 1
a45 1
     +                 NJ,TEMPA,TEMPB,TEMPC,U_DOT_NI,U_DOT_NJ
d73 2
a74 1
      DIVV = GRAD_PRIM(3,1) + GRAD_PRIM(4,2) + GRAD_PRIM(5,3)
a80 1
      TAU(3,3) = TWO*MU*GRAD_PRIM(5,3) + LD*DIVV
d85 5
a89 2
      TAU(3,1) = TAU(1,3)
      TAU(3,2) = TAU(2,2)
d94 1
a94 1
      CNST = MU/ (GM1*PRANDTL*UAVG(1))
d99 1
a99 1
     +           UAVG(3)*TAU(1,1) + UAVG(4)*TAU(2,1) + UAVG(5)*TAU(3,1)
d101 9
a109 3
     +           UAVG(3)*TAU(1,2) + UAVG(4)*TAU(2,2) + UAVG(5)*TAU(3,2)
      TAU(3,4) = CNST* (GAM*GRAD_PRIM(2,3)-ASQR*GRAD_PRIM(1,3)) +
     +           UAVG(3)*TAU(1,3) + UAVG(4)*TAU(2,3) + UAVG(5)*TAU(3,3)
d119 16
a134 3
          DT(IVERT) = DT(IVERT) - CNST/ (NDIM*VOLUME)*
     +                DDOT(NDIM,VCN(1,IVERT),1,VCN(1,IVERT),1)
C
d136 3
a138 5
          GFLUX(2,IVERT) = CNST*DDOT(NDIM,VCN(1,IVERT),1,TAU(1,4),1)
          GFLUX(3,IVERT) = CNST*DDOT(NDIM,VCN(1,IVERT),1,TAU(1,1),1)
          GFLUX(4,IVERT) = CNST*DDOT(NDIM,VCN(1,IVERT),1,TAU(1,2),1)
          IF (NOFVAR.EQ.5) GFLUX(5,IVERT) = CNST*
     +        DDOT(NDIM,VCN(1,IVERT),1,TAU(1,3),1)
d143 1
a143 1
          IF (NOFVAR.EQ.5) RHS(5,IVERT) = RHS(5,IVERT) + GFLUX(5,IVERT)
d156 1
a156 1
      TEMPA = MU/PRANDTL
d289 1
a289 1
C     pause
@


1.5
log
@Laminar viscosity is now passed as an argument
Reformatted using toolpack
@
text
@d44 1
a44 1
      DOUBLE PRECISION DT(NOFVERT),DZDU(5,5,NOFVERT),
d222 1
a222 1
     +                   NMAX,DZDU(1,1,JV),5,ZERO,STIFD(1,1,IV,JV),
@


1.4
log
@Improved linearization of the residual
@
text
@d1 4
a4 2
      SUBROUTINE VSFLX4(IELEM,ZROE,DU,DT,NOFVAR,VCN,dZdU,NDIM,NOFVERT,
     +VOLUME,STIFD,VISCT,TIMEIMPL)
a8 1
      IMPLICIT NONE
a13 3
      DOUBLE PRECISION TWOTHIRD
      INTEGER NMAX2
      PARAMETER(TWOTHIRD=TWO/3.D0,NMAX2=NMAX*NMAX)
a16 1
      INCLUDE 'stream.com'
a19 3
      INTEGER IELEM,NOFVAR,NDIM,NOFVERT
      DOUBLE PRECISION VISCT
      LOGICAL TIMEIMPL
a21 2
      DOUBLE PRECISION DU(NOFVAR,NOFVERT),DT(NOFVERT),dZdU(5,5,NOFVERT),
     +ZROE(NOFVAR,NOFVERT),VCN(NDIM,NOFVERT),VOLUME
a27 1
      DOUBLE PRECISION STIFD(NOFVAR,NOFVAR,NOFVERT,NOFVERT)
a28 3
      INTEGER I,IV,JV,IVERT,ifail
      DOUBLE PRECISION DIVV,CNST,TEMPA,TEMPB,TEMPC,Z1INV,Z1SQRINV,
     +LI,LJ,MI,MJ,NI,NJ,MU,LD,MPLUSL,Ni_DOT_Nj,U_DOT_Ni,U_DOT_Nj
a30 3
      DOUBLE PRECISION TAU(3,4),GFLUX(5,VMAX)
      DOUBLE PRECISION WORK(NMAX,NMAX),VSFLX(5,VMAX),
     +WKSP1(NMAX*VMAX)
d33 32
a64 2
      DOUBLE PRECISION SUTHERLAW,DDOT
      EXTERNAL         SUTHERLAW,DDOT
d69 1
d73 2
a74 4
      MU = SUTHERLAW( M_INFTY, ABAR, ASQR )
      LD = - TWOTHIRD * MU
C     is this correct?
      MU = MU+VISCT
d80 1
a80 1
C     ... Compute the stress tensor ...
d83 6
a88 6
      TAU(1,1) = TWO*MU*GRAD_PRIM(3,1) + LD * DIVV
      TAU(2,2) = TWO*MU*GRAD_PRIM(4,2) + LD * DIVV
      TAU(3,3) = TWO*MU*GRAD_PRIM(5,3) + LD * DIVV
      TAU(1,2) = MU*(GRAD_PRIM(3,2)+GRAD_PRIM(4,1))
      TAU(1,3) = MU*(GRAD_PRIM(3,3)+GRAD_PRIM(5,1))
      TAU(2,3) = MU*(GRAD_PRIM(4,3)+GRAD_PRIM(5,2))
d96 1
a96 1
      CNST = MU / (GM1*PRANDTL*UAVG(1))
d100 6
a105 6
      TAU(1,4) = CNST * ( GAM*GRAD_PRIM(2,1) - ASQR * GRAD_PRIM(1,1) ) +
     &   UAVG(3)*TAU(1,1)+UAVG(4)*TAU(2,1)+UAVG(5)*TAU(3,1)
      TAU(2,4) = CNST * ( GAM*GRAD_PRIM(2,2) - ASQR * GRAD_PRIM(1,2) ) +
     &   UAVG(3)*TAU(1,2)+UAVG(4)*TAU(2,2)+UAVG(5)*TAU(3,2)
      TAU(3,4) = CNST * ( GAM*GRAD_PRIM(2,3) - ASQR * GRAD_PRIM(1,3) ) +
     &   UAVG(3)*TAU(1,3)+UAVG(4)*TAU(2,3)+UAVG(5)*TAU(3,3)
d109 1
a109 1
      CNST = -REINV / NDIM
d113 1
a113 1
      DO 17 IVERT = 1, NOFVERT
d115 2
a116 2
         DT(IVERT) = DT(IVERT) - CNST / (NDIM*VOLUME) *
     +   DDOT(NDIM,VCN(1,IVERT),1,VCN(1,IVERT),1)
d118 11
a128 12
         GFLUX(1,IVERT) = ZERO
         GFLUX(2,IVERT) = CNST * DDOT(NDIM,VCN(1,IVERT),1,TAU(1,4),1)
         GFLUX(3,IVERT) = CNST * DDOT(NDIM,VCN(1,IVERT),1,TAU(1,1),1)
         GFLUX(4,IVERT) = CNST * DDOT(NDIM,VCN(1,IVERT),1,TAU(1,2),1)
         IF( NOFVAR .EQ. 5 )
     +   GFLUX(5,IVERT) = CNST * DDOT(NDIM,VCN(1,IVERT),1,TAU(1,3),1)
C
         DU(2,IVERT) = DU(2,IVERT) + GFLUX(2,IVERT)
         DU(3,IVERT) = DU(3,IVERT) + GFLUX(3,IVERT)
         DU(4,IVERT) = DU(4,IVERT) + GFLUX(4,IVERT)
         IF( NOFVAR .EQ. 5 )
     +   DU(5,IVERT) = DU(5,IVERT) + GFLUX(5,IVERT)
a131 2
     
C
d134 1
a134 1
      IF( .NOT. TIMEIMPL )RETURN
d140 3
a142 4
      CNST = - ASQR / GM1 + KINETIC
      TEMPA = MU / PRANDTL
      TEMPC = REINV/(NDIM*NDIM*VOLUME*ZAVG(1))
C
d146 1
a146 1
      DO 10 JV = 1, NOFVERT
d148 3
a150 3
         LJ = VCN(1,JV)
         MJ = VCN(2,JV)
         IF(NDIM.EQ.3)NJ = VCN(3,JV)
d152 1
a152 1
         U_DOT_Nj = UAVG(3)*LJ + UAVG(4)*MJ + UAVG(5)*NJ
d154 1
a154 1
         DO 10 IV = NOFVERT,1,-1
d157 3
a159 3
            LI = VCN(1,IV)
            MI = VCN(2,IV)
            IF(NDIM.EQ.3)NI = VCN(3,IV)
d161 1
a161 1
            U_DOT_Ni = UAVG(3)*LI + UAVG(4)*MI + UAVG(5)*NI
d163 1
a163 1
            Ni_DOT_Nj = LI*LJ + MI*MJ + NI*NJ
d165 2
a166 2
C     Be VERY careful with WORK: make sure that non zero elements 
C        are cleared (overwritten) when going from one vertex to the next 
d170 6
a175 6
            WORK(2,3) = MU * ( U_DOT_Nj * LI + Ni_DOT_Nj * UAVG(3) )
     +                + LD *   U_DOT_Ni * LJ
            WORK(2,4) = MU * ( U_DOT_Nj * MI + Ni_DOT_Nj * UAVG(4) )
     +                + LD *   U_DOT_Ni * MJ
            WORK(2,5) = MU * ( U_DOT_Nj * NI + Ni_DOT_Nj * UAVG(5) )
     +                + LD *   U_DOT_Ni * NJ
d179 24
a202 28
            WORK(3,3) = MPLUSL * LI*LJ + MU * Ni_DOT_Nj
            WORK(4,4) = MPLUSL * MI*MJ + MU * Ni_DOT_Nj
            WORK(5,5) = MPLUSL * NI*NJ + MU * Ni_DOT_Nj
C
            WORK(3,4) = MU * MI * LJ + LD * LI * MJ
            WORK(3,5) = MU * NI * LJ + LD * LI * NJ
C
            WORK(4,3) = MU * LI * MJ + LD * MI * LJ
            WORK(4,5) = MU * NI * MJ + LD * MI * NJ
C
            WORK(5,3) = MU * LI * NJ + LD * NI * LJ
            WORK(5,4) = MU * MI * NJ + LD * NI * MJ
C
C     Transform THE DIFFUSION matrix from primitive 
C         into parameter vector; note that the density^{-1/2} term is omitted
C
            WORK(2,1) = - UAVG(3) * WORK(2,3)
     +                  - UAVG(4) * WORK(2,4)
     +                  - UAVG(5) * WORK(2,5)
            WORK(3,1) = - UAVG(3) * WORK(3,3)
     +                  - UAVG(4) * WORK(3,4)
     +                  - UAVG(5) * WORK(3,5)
            WORK(4,1) = - UAVG(3) * WORK(4,3)
     +                  - UAVG(4) * WORK(4,4)
     +                  - UAVG(5) * WORK(4,5)
            WORK(5,1) = - UAVG(3) * WORK(5,3)
     +                  - UAVG(4) * WORK(5,4)
     +                  - UAVG(5) * WORK(5,5)
d209 1
a209 1
            TEMPB = Ni_DOT_Nj * TEMPA
d212 5
a216 5
            WORK(2,1) = WORK(2,1) + TEMPB * CNST
            WORK(2,2) = TEMPB
            WORK(2,3) = WORK(2,3) - TEMPB * UAVG(3)
            WORK(2,4) = WORK(2,4) - TEMPB * UAVG(4)
            WORK(2,5) = WORK(2,5) - TEMPB * UAVG(5)
d221 3
a223 2
   20    CALL DGEMM('N','N',NOFVAR,NOFVAR,NOFVAR,TWO*TEMPC,WORK,NMAX,
     +   dZdU(1,1,JV),5,ZERO,STIFD(1,1,IV,JV),NOFVAR)
d226 1
a226 1
   10 CONTINUE ! End loop over vertices
d241 1
a241 1
C     ... Debugging stuff ...
d244 1
a244 1
C     ... Compute U_i i=1,..,NOFVERT
d252 2
a253 2
C     .. The "explicitely" calculated viscous flux is compared
C        with the "implicit" one ...
d255 2
a256 2
      DO 12 IV = 1, NOFVERT
         DO 14 JV = 1, NOFVERT
d258 2
a259 2
            CALL DGEMV('N',NOFVAR,NOFVAR,ONE,STIFD(1,1,IV,JV),NOFVAR,
     +      WKSP1((JV-1)*NOFVAR+1),1,ONE,VSFLX(1,IV),1)
d264 1
a264 1
   14 CONTINUE
d266 2
a267 1
      WRITE(NOUT,*)'Element # ',IELEM,' vertex # ',IV,'  ',TEMPC
d269 4
a272 4
      DO 15 I = 2, NOFVAR
      WRITE(NOUT,"(I1,3(5X,E18.8))")I,GFLUX(I,IV),VSFLX(I,IV),
     +VSFLX(I,IV)/GFLUX(I,IV)
   15 CONTINUE
d274 2
a275 2
C     pause 
   12 CONTINUE ! End loop on IV
d280 3
@


1.3
log
@sign changed to the element diffusion matrix
@
text
@d1 1
a1 1
      SUBROUTINE VSFLX4(IELEM,ZROE,DU,DT,NOFVAR,VCN,NDIM,NOFVERT,
d4 1
a4 1
C     .. This routine computes the viscous fluxes which appear
d28 1
a28 1
      DOUBLE PRECISION DU(NOFVAR,NOFVERT),DT(NOFVERT),
d31 5
d45 1
a45 1
     +dZdU(5,5),dUdZ(5,5),WKSP1(NMAX,VMAX)
a52 2
      DATA dZdU/25*ZERO/
      DATA dUdZ/25*ZERO/
d101 1
a101 1
	 DT(IVERT) = DT(IVERT) - CNST / (NDIM*VOLUME) *
d108 1
a108 1
	 IF( NOFVAR .EQ. 5 )
d114 1
a114 1
	 IF( NOFVAR .EQ. 5 )
a132 6
C     ... Assembles the dZdU matrix ...
C
      Z1INV = ONE/ZAVG(1)
      Z1SQRINV = Z1INV*Z1INV
C
      dZdU(1,1) = HALF * Z1INV
d134 1
a134 16
      dZdU(2,1) = ( GM1 * KINETIC - HALF*Z1INV*ZAVG(2) )*Z1INV
      dZdU(2,2) = GAM * Z1INV
      dZdU(2,3) =-GM1 * ZAVG(3) * Z1SQRINV
      dZdU(2,4) =-GM1 * ZAVG(4) * Z1SQRINV
      dZdU(2,5) =-GM1 * ZAVG(5) * Z1SQRINV
C
      dZdU(3,1) =-HALF * ZAVG(3) * Z1SQRINV
      dZdU(3,3) = Z1INV
C
      dZdU(4,1) =-HALF * ZAVG(4) * Z1SQRINV
      dZdU(4,4) = Z1INV
C
      dZdU(5,1) =-HALF * ZAVG(5) * Z1SQRINV
      dZdU(5,5) = Z1INV
C
C     ... Loop over vertices ...
d155 1
a155 1
C     .. Be VERY careful with WORK: make sure that non zero elements 
d158 1
a158 1
C     ... Energy flux
d167 1
a167 1
C     ... Momentum flux
d182 1
a182 1
C     ... Transform THE STIFDUSION matrix from primitive 
d198 1
a198 1
C        ... Add now the heat flux term (which is already in
d212 1
a212 1
C        ... Transforms the diffusion matrix from parameter vector
d215 2
a216 2
   20    CALL DGEMM('N','N',NOFVAR,NOFVAR,NOFVAR,TEMPC,WORK,NMAX,
     +   dZdU,5,ZERO,STIFD(1,1,IV,JV),NOFVAR)
d236 3
a238 25
C     .. Matrix dUdZ ..
C
      dUdZ(1,1) = TWO   * ZAVG(1)
C
      dUdZ(2,1) = GINV  * ZAVG(2)
      dUdZ(2,2) = GINV  * ZAVG(1)
      dUdZ(2,3) = GM1OG * ZAVG(3)
      dUdZ(2,4) = GM1OG * ZAVG(4)
      dUdZ(2,5) = GM1OG * ZAVG(5)
C     
      dUdZ(3,1) = ZAVG(3)
      dUdZ(3,3) = ZAVG(1)
C     
      dUdZ(4,1) = ZAVG(4)
      dUdZ(4,4) = ZAVG(1)
C     
      dUdZ(5,1) = ZAVG(5)
      dUdZ(5,5) = ZAVG(1)
C
C     ... Compute U_i = dUdZ * Z_i ...
C
      DO 21 IVERT = 1, NOFVERT
         CALL DGEMV('N',NOFVAR,NOFVAR,ONE,dUdZ,5,
     &   ZROE(1,IVERT),1,ZERO,WKSP1(1,IVERT),1)
   21 CONTINUE
d242 2
a243 2
C     CALL X04CAF('General',' ',NOFVAR,NOFVERT,GFLUX,
C    +5,'Diffusion flux ',IFAIL)
d252 1
a252 1
     +      WKSP1(1,JV),1,ONE,VSFLX(1,IV),1)
d266 1
@


1.2
log
@Add bnd.h among the include files
@
text
@d128 1
a128 1
      TEMPC = - REINV/(NDIM*NDIM*VOLUME*ZAVG(1))
a235 1
C        ... D_{ji} = D_{ij}^T ...
d238 11
@


1.1
log
@Initial revision
@
text
@d11 1
@
