%!PS-Adobe-3.0
%%Creator: groff version 1.10
%%CreationDate: Fri Jul  4 16:31:09 1997
%%DocumentNeededResources: font Times-Bold
%%+ font Times-Italic
%%+ font Times-Roman
%%+ font Symbol
%%DocumentSuppliedResources: procset grops 1.10 0
%%Pages: 12
%%PageOrder: Ascend
%%Orientation: Portrait
%%EndComments
%%BeginProlog
%%BeginResource: procset grops 1.10 0
/setpacking where{
pop
currentpacking
true setpacking
}if
/grops 120 dict dup begin
/SC 32 def
/A/show load def
/B{0 SC 3 -1 roll widthshow}bind def
/C{0 exch ashow}bind def
/D{0 exch 0 SC 5 2 roll awidthshow}bind def
/E{0 rmoveto show}bind def
/F{0 rmoveto 0 SC 3 -1 roll widthshow}bind def
/G{0 rmoveto 0 exch ashow}bind def
/H{0 rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/I{0 exch rmoveto show}bind def
/J{0 exch rmoveto 0 SC 3 -1 roll widthshow}bind def
/K{0 exch rmoveto 0 exch ashow}bind def
/L{0 exch rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/M{rmoveto show}bind def
/N{rmoveto 0 SC 3 -1 roll widthshow}bind def
/O{rmoveto 0 exch ashow}bind def
/P{rmoveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/Q{moveto show}bind def
/R{moveto 0 SC 3 -1 roll widthshow}bind def
/S{moveto 0 exch ashow}bind def
/T{moveto 0 exch 0 SC 5 2 roll awidthshow}bind def
/SF{
findfont exch
[exch dup 0 exch 0 exch neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/MF{
findfont
[5 2 roll
0 3 1 roll
neg 0 0]makefont
dup setfont
[exch/setfont cvx]cvx bind def
}bind def
/level0 0 def
/RES 0 def
/PL 0 def
/LS 0 def
/MANUAL{
statusdict begin/manualfeed true store end
}bind def
/PLG{
gsave newpath clippath pathbbox grestore
exch pop add exch pop
}bind def
/BP{
/level0 save def
1 setlinecap
1 setlinejoin
72 RES div dup scale
LS{
90 rotate
}{
0 PL translate
}ifelse
1 -1 scale
}bind def
/EP{
level0 restore
showpage
}bind def
/DA{
newpath arcn stroke
}bind def
/SN{
transform
.25 sub exch .25 sub exch
round .25 add exch round .25 add exch
itransform
}bind def
/DL{
SN
moveto
SN
lineto stroke
}bind def
/DC{
newpath 0 360 arc closepath
}bind def
/TM matrix def
/DE{
TM currentmatrix pop
translate scale newpath 0 0 .5 0 360 arc closepath
TM setmatrix
}bind def
/RC/rcurveto load def
/RL/rlineto load def
/ST/stroke load def
/MT/moveto load def
/CL/closepath load def
/FL{
currentgray exch setgray fill setgray
}bind def
/BL/fill load def
/LW/setlinewidth load def
/RE{
findfont
dup maxlength 1 index/FontName known not{1 add}if dict begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
/Encoding exch def
dup/FontName exch def
currentdict end definefont pop
}bind def
/DEFS 0 def
/EBEGIN{
moveto
DEFS begin
}bind def
/EEND/end load def
/CNT 0 def
/level1 0 def
/PBEGIN{
/level1 save def
translate
div 3 1 roll div exch scale
neg exch neg exch translate
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[]0 setdash
/setstrokeadjust where{
pop
false setstrokeadjust
}if
/setoverprint where{
pop
false setoverprint
}if
newpath
/CNT countdictstack def
userdict begin
/showpage{}def
}bind def
/PEND{
clear
countdictstack CNT sub{end}repeat
level1 restore
}bind def
end def
/setpacking where{
pop
setpacking
}if
%%EndResource
%%IncludeResource: font Times-Bold
%%IncludeResource: font Times-Italic
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
grops begin/DEFS 1 dict def DEFS begin/u{.001 mul}bind def end/RES 72
def/PL 792 def/LS false def/ENC0[/asciicircum/asciitilde/Scaron/Zcaron
/scaron/zcaron/Ydieresis/trademark/quotesingle/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus/comma/hyphen
/period/slash/zero/one/two/three/four/five/six/seven/eight/nine/colon
/semicolon/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O
/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright/circumflex
/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y
/z/braceleft/bar/braceright/tilde/.notdef/quotesinglbase/guillemotleft
/guillemotright/bullet/florin/fraction/perthousand/dagger/daggerdbl
/endash/emdash/ff/fi/fl/ffi/ffl/dotlessi/dotlessj/grave/hungarumlaut
/dotaccent/breve/caron/ring/ogonek/quotedblleft/quotedblright/oe/lslash
/quotedblbase/OE/Lslash/.notdef/exclamdown/cent/sterling/currency/yen
/brokenbar/section/dieresis/copyright/ordfeminine/guilsinglleft
/logicalnot/minus/registered/macron/degree/plusminus/twosuperior
/threesuperior/acute/mu/paragraph/periodcentered/cedilla/onesuperior
/ordmasculine/guilsinglright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE
/Ccedilla/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn
/germandbls/agrave/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla
/egrave/eacute/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis
/eth/ntilde/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash
/ugrave/uacute/ucircumflex/udieresis/yacute/thorn/ydieresis]def
/Times-Roman@0 ENC0/Times-Roman RE/Times-Italic@0 ENC0/Times-Italic RE
/Times-Bold@0 ENC0/Times-Bold RE
%%EndProlog
%%Page: 1 1
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Bold@0 SF(gsize 11 delim @@)72 24 Q/F1 12/Times-Bold@0 SF
(Sparse Extensions to the F)72 36 Q(ortran)-.3 E
(Basic Linear Algebra Subpr)72 60 Q(ograms)-.216 E F0(Da)72 72 Q
(vid S. Dodson)-.275 E/F2 10/Times-Bold@0 SF(Con)72 84 Q -.1(ve)-.4 G
2.5(xC).1 G(omputer Cor)-2.5 E(poration 701 N. Plano Road Richardson, T)
-.1 E(exas 75081)-.92 E F0(Roger G. Grimes)72 96 Q F2
(Boeing Computer Ser)72 108 Q(vices, M/S 7L-21 P)-.1 E
(.O. Box 24346 Seattle, W)-1.1 E(ashington 98124-0346)-.65 E F0 -.165
(Jo)72 120 S(hn G. Lewis).165 E F2(Boeing Computer Ser)72 131 Q
(vices, M/S 7L-21 P)-.1 E(.O. Box 24346 Seattle, W)-1.1 E
(ashington 98124-0346 T)-.65 E(ypeset on .)-.74 E 2.701<8a54>90 175 S
.201(his paper describes an extension to the set of Basic Linear Algebr\
a Subpr)-2.701 F 2.7(ograms. The)-.18 F(extension)2.7 E .174(is tar)90
186 R .174(geted at sparse v)-.1 F .174
(ector operations, with the goal of pr)-.1 F -.1(ov)-.18 G .175
(iding ef\214cient, b).1 F .175(ut portable, implementa-)-.2 F
(tions of algorithms f)90 197 Q(or high perf)-.25 E(ormance computers.)
-.25 E F0(Intr)72 213 Q .615(oduction In 1973, Hanson, Kr)-.198 F .615
(ogh, and Lawson [14] described the adv)-.198 F .614
(antages of adopting a set)-.11 F .723(of basic r)72 229 R .723
(outines f)-.198 F .723(or pr)-.275 F .723(oblems in linear algebra.)
-.198 F .723(They obser)6.223 F -.11(ve)-.11 G 3.473(dt).11 G .724
(hat standardizing such a subr)-3.473 F(ou-)-.198 E .165(tine library w)
72 245 R .165(ould impr)-.11 F .385 -.11(ove p)-.198 H -.198(ro).11 G
.164(gram clarity).198 F 2.914(,p)-.605 G(ortability)-2.914 E 2.914(,m)
-.605 G(odularity)-2.914 E 2.914(,a)-.605 G .164(nd maintainability)
-2.914 F 5.664(.A)-.77 G(ddition-)-5.664 E(ally)72 261 Q 2.871(,i)-.605
G 2.871(ft)-2.871 G .121(hese r)-2.871 F .121(outines wer)-.198 F 2.871
(ec)-.198 G .121(oded in assembly language f)-2.871 F .122
(or many computers, they w)-.275 F .122(ould pr)-.11 F .122(omote ef-)
-.198 F 1.254(\214ciency without sacri\214cing portability)72 277 R
6.754(.T)-.77 G 1.253(he original basic linear algebra subpr)-6.754 F
1.253(ograms, no)-.198 F 4.003(wc)-.11 G(om-)-4.003 E 2.273(monly r)72
293 R(eferr)-.198 E 2.273(ed to as the BLAS, wer)-.198 F 5.023(ef)-.198
G 2.274(ully described in Lawson, Hanson, Kincaid, and Kr)-5.023 F(ogh)
-.198 E 3.943([15,16]. They)72 309 R(ha)3.943 E 1.413 -.11(ve b)-.275 H
1.193(een used in a wide range of softwar).11 F 1.192(e, including LINP)
-.198 F -.605(AC)-.814 G 3.942(K[).605 G 1.192(4], and ha)-3.942 F 1.412
-.11(ve b)-.275 H(e-).11 E .151(come a)72 325 R/F3 11/Times-Italic@0 SF
.151(de facto)2.901 F/F4 11/Times-Roman@0 SF .152
(standard for the elementary v)2.901 F .152(ector operations.)-.165 F
.152(The success of the BLAS has led Dong)5.652 F(ar)-.055 E(-)-.22 E
(ra,)72 341 Q F3 .25(et al.)3.001 F F4 .25([5], to propose an e)3 F .25
(xtended set of subprograms tar)-.165 F .25(geted to)-.198 F -.11(wa)
-.275 G .25(rd ef).11 F(\214cienc)-.275 E 3(yi)-.165 G 3(nd)-3 G .25
(ense linear algebra)-3 F .105(on a broader class of computers.)72 357 R
(Man)5.606 E 2.856(yc)-.165 G .106(odes no)-2.856 F 2.856(we)-.275 G
.106(xist for solving sparse linear systems, e.g., MA28 [6],)-3.021 F
1.193(the Y)72 373 R 1.193(ale Sparse Matrix P)-1.1 F 1.192
(ackage [8], SP)-.165 F(ARSP)-1.012 E 1.192
(AK [9], and ICCG/ILU preconditioning [18].)-1.012 F 1.192(It has been)
6.692 F .974(found that sparse matrix computations are useful in man)72
389 R 3.724<798c>-.165 G 3.724(elds. Furthermore,)-3.724 F .974(much ef)
3.724 F .975(fort is being e)-.275 F(x-)-.165 E .171(pended in other sp\
arse matrix computations such as sparse least squares [10,11] and eigen)
72 405 R -.275(va)-.44 G .17(lue e).275 F(xtraction)-.165 E 2.947
([12,13]. Just)72 421 R .197(as the original BLAS ha)2.947 F .528 -.165
(ve a)-.22 H .198
(lready demonstrated their utility for dense matrix computations,).165 F
1.066(further de)72 437 R -.165(ve)-.275 G 1.066
(lopment in sparse matrix algorithms will be well serv).165 F 1.066
(ed by sparse e)-.165 F 1.065(xtensions to the BLAS.)-.165 F .407
(Sparse e)72 453 R .407(xtensions will aid softw)-.165 F .407(are de)
-.11 F -.165(ve)-.275 G .407(lopers by promoting softw).165 F .408
(are portability while gi)-.11 F .408(ving the adv)-.275 F(an-)-.275 E
.735(tage of ef)72 469 R(\214cienc)-.275 E 3.485(ya)-.165 G .735
(cross v)-3.485 F .735(arious machine types via tuned \(assembly langua\
ge\) implementations [17].)-.275 F(In)6.234 E -.11(fa)72 485 S .625(ct,\
 it is precisely these tuned implementations that will ease the transfe\
r of much of the e).11 F .625(xisting sparse)-.165 F .852
(linear algebra methodology to computers with v)72 501 R .852
(ector or parallel architectures.)-.165 F 2.612 -.88(We b)6.352 H(elie)
.88 E 1.181 -.165(ve t)-.275 H .851(his is an ap-).165 F 1.006
(propriate time to standardize speci\214cations for a set of sparse e)72
517 R 1.006(xtensions to the BLAS.)-.165 F 1.006(Examination of)6.506 F
.739(the pre)72 533 R .739
(viously listed sparse linear algebra codes re)-.275 F -.165(ve)-.275 G
.739(als that a fe).165 F 3.489(wb)-.275 G .738
(asic operations occur frequently and)-3.489 F 1.078
(dominate the computations.)72 549 R 1.079(Standardization of these ope\
rations may help deter additional non-portable)6.578 F -.165(ex)72 565 S
.216(tensions to F).165 F .215(ortran such as CRA)-.165 F(Y')-1.155 E
2.965(sG)-.605 G -1.221(AT)-2.965 G .215(HER and CDC')1.221 F 2.965(sQ)
-.605 G(8GA)-2.965 E 2.965(THR. W)-1.221 F 2.965(es)-.88 G .215
(pecify here those basic op-)-2.965 F .13
(erations, along with naming con)72 581 R -.165(ve)-.44 G .131
(ntions and ar).165 F .131(gument lists.)-.198 F .131
(In [3] we present a model implementation of)5.631 F .045
(the Sparse BLAS in F)72 597 R .045(ortran 77 \(e)-.165 F .045
(xtended to include the COMPLEX*16 data type\), and also a set of rigor)
-.165 F(-)-.22 E(ous test programs.)72 613 Q .514
(Compressed Storage of Sparse V)72 645 R .514
(ectors In the original BLAS, a dense @n@ v)-1.221 F(ector)-.165 E 3.265
(,@)-.44 G .515(x@, is represented)-3.265 F .172
(by a triple \(N, X, INCX\), where X is a F)72 661 R .172
(ortran array in which the components of @x@ are stored accord-)-.165 F
(ing to the inde)72 677 Q(xing pattern: x sub i ~ roman { = ~ left {~)
-.165 E(lpile { X\(1+\(i-1\)*INCX\) abo)77.5 693 Q .33 -.165(ve X)-.165
H(\(1-\(N-i\)*INCX\) }~~~~).165 E(lpile { if abo)77.5 709 Q .33 -.165
(ve i)-.165 H 2.75(f}).165 G(~~)-2.75 E .008(lpile { INCX ~ >= ~ 0 abo)
77.5 725 R .338 -.165(ve I)-.165 H .008
(NCX ~ < ~0. } } In sparse linear algebra, lar).165 F .009(ge sa)-.198 F
.009(vings in computer time and)-.22 F .377
(memory are realized by storing and operating on only the `)72 741 R
(`interesting')-.814 E 3.126('\()-.814 G .376
(usually nonzero\) components of)-3.126 F -.165(ve)72 757 S 2.97
(ctors. The).165 F .22(most common method for representing a sparse v)
2.97 F .22(ector uses a F)-.165 F .221(ortran array just long enough)
-.165 F .606(to contain the interesting components, and a companion arr\
ay of indices that maps the stored v)72 773 R .606(alues into)-.275 F
.21(their proper positions within the v)72 789 R(ector)-.165 E 5.71(.L)
-.605 G .21(etting NZ be the number of interesting components of @x@, X)
-5.71 F .248(be the F)72 805 R .248(ortran array in which the)-.165 F
2.998(ya)-.165 G .248(re stored, and INDX be the F)-2.998 F .247
(ortran array of indices, a sparse v)-.165 F .247(ector is)-.165 F EP
%%Page: 2 2
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF .359(represented by the triple \(NZ, X, INDX\).)
72 16 R -.165(Fo)5.859 G 3.109(re).165 G .359
(xample, if x ~ roman = ~\(0,~4,~0,~0,~1,~0,~0,~0,~6,~0\) and if)-3.274
F .31(the interesting components of @x@ are the nonzero ones, then roma\
n { rpile { NZ abo)72 32 R .639 -.165(ve X a)-.165 H(bo).165 E .639
-.165(ve I)-.165 H(NDX).165 E(})72 48 Q 2.75(~c)88.5 64 S(pile { = abo)
-2.75 E .33 -.165(ve = a)-.165 H(bo).165 E .33 -.165(ve = })-.165 H 2.95
(~l)88.5 80 S .2(pile { 3, abo)-2.95 F .53 -.165(ve \()-.165 H .2
(4,~1,~6\), abo).165 F .53 -.165(ve \()-.165 H .2(2,~5,~9\) } } so that\
 x sub roman INDX\(i\) roman { ~=~ X\(i\). } As we).165 F(will sho)72 96
Q 2.75(wl)-.275 G(ater)-2.75 E 2.75(,t)-.44 G
(he generality of INCX and an increment ar)-2.75 E
(gument for INDX is not needed.)-.198 E .593(Scope of the Sparse BLAS W)
72 128 R 3.342(ef)-.88 G(ollo)-3.342 E 3.342(wt)-.275 G .592
(he naming con)-3.342 F -.165(ve)-.44 G .592(ntion gi).165 F -.165(ve)
-.275 G 3.342(ni).165 G 3.342(n[)-3.342 G .592
(15]: a subprogram name consists)-3.342 F .418
(of a pre\214x that indicates the data type in)72 144 R -.22(vo)-.44 G
(lv).22 E .418
(ed, a root that describes the operation performed, and an op-)-.165 F
.732(tional suf)72 160 R .732(\214x that indicates a v)-.275 F .732
(ariant of the basic operation.)-.275 F .731
(An underscore in the pre\214x of a subprogram)6.231 F .5
(name may be replaced with an)72 176 R 3.25(yo)-.165 G 3.25(ft)-3.25 G
.5(he follo)-3.25 F .5
(wing type speci\214cation characters: center; l l.)-.275 F 29.884(SR)6
G(EAL)-29.884 E 28.058(DD)72 192 S .141(OUBLE PRECISION C)-28.058 F .14
(COMPLEX Z)28.663 F .14(COMPLEX*16 or DOUBLE COMPLEX \(if)29.279 F -.22
(av)72 208 S .632(ailable\) Subprograms with `)-.055 F(`Z')-.814 E 3.382
('p)-.814 G(re\214x)-3.382 E .632(es may not be a)-.165 F -.275(va)-.22
G .632(ilable on all machines since COMPLEX*16 is).275 F .181
(not a standard F)72 224 R .18(ortran data type.)-.165 F(The)5.68 E 2.93
(ya)-.165 G .18
(re included in this standard for completeness and for their useful-)
-2.93 F .168(ness on those systems that support this data type.)72 240 R
.168(Certain of the subprograms are not de\214ned for comple)5.668 F(x)
-.165 E 3.498(arithmetic. These)72 256 R .747(are indicated with an `)
3.497 F(`S')-.814 E 3.497('a)-.814 G 3.497(st)-3.497 G .747
(he pre\214x; `)-3.497 F(`S')-.814 E 3.497('m)-.814 G .747
(ay be replaced only by `)-3.497 F(`D')-.814 E 3.497('. In)-.814 F
(addi-)3.497 E .34
(tion, certain subprograms are de\214ned only for comple)72 272 R 3.09
(xa)-.165 G 3.09(rithmetic. These)-3.09 F .34
(are listed with a pre\214x of `)3.09 F(`C')-.814 E(',)-.814 E .38
(which may be replaced with `)72 288 R(`Z')-.814 E 3.13('o)-.814 G 3.13
(nt)-3.13 G .38(hose machines where COMPLEX*16 is a)-3.13 F -.275(va)
-.22 G 3.129(ilable. An).275 F -.165(ex)3.129 G(amination).165 E .379
(of the original BLAS re)72 304 R -.165(ve)-.275 G .379
(als that some of them do non-v).165 F .379(ector operations.)-.165 F
.379(These BLAS are applicable to)5.879 F .315
(either dense or sparse linear algebra, so sparse v)72 320 R .314
(ariants are not needed.)-.275 F .314(The subprograms in this cate)5.814
F(gory)-.165 E 1.695(are: center; l l.)72 336 R(SR)7.195 E -.44(OT)-.44
G .822(GS).44 G 1.695(et up Gi)-.822 F -.165(ve)-.275 G 1.695
(ns rotation SR).165 F -.44(OT)-.44 G 24.293(MG Set).44 F 1.695
(up modi\214ed Gi)4.445 F -.165(ve)-.275 G 1.695(ns rotation Some).165 F
.487(original BLAS do the correct operation when presented with the com\
pressed v)72 352 R .486(alue array of a sparse v)-.275 F(ec-)-.165 E
(tor)72 368 Q 5.92(.T)-.605 G .42
(hese BLAS also do not need special sparse v)-5.92 F 3.17(ariants. The)
-.275 F 3.17(yi)-.165 G .421(nclude: center; l l.)-3.17 F 33.192
(_NRM2 Eu-)5.921 F .37(clidean norm _ASUM)72 384 R .37
(Sum of absolute v)34.721 F .369(alues _SCAL)-.275 F .369
(Constant times a v)2.384 F .369(ector I_AMAX)-.165 F(In-)29.232 E(de)72
400 Q 3.689(xo)-.165 G 3.689<668c>-3.689 G .94
(rst component of maximum absolute v)-3.689 F .94(alue \(T)-.275 F
(echnically)-.77 E 3.69(,w)-.715 G .94
(hen I_AMAX is applied to the com-)-3.69 F .194(pressed v)72 416 R .194
(alue array)-.275 F 2.944(,X)-.715 G 2.944(,o)-2.944 G 2.944(fas)-2.944
G .194(parse v)-2.944 F .193
(ector @x@ that is represented by \(NZ, X, INDX\), it returns the inde)
-.165 F(x)-.165 E .842(of the \214rst maximal element of X.)72 432 R
.842(The corresponding element of INDX gi)6.342 F -.165(ve)-.275 G 3.592
(st).165 G .842(he inde)-3.592 F 3.592(xo)-.165 G 3.593(ft)-3.592 G .843
(hat compo-)-3.593 F .511(nent of @x@.)72 448 R .511
(This might not be the inde)6.011 F 3.261(xo)-.165 G 3.261(ft)-3.261 G
(he)-3.261 E/F1 11/Times-Italic@0 SF<8c72>3.261 E(st)-.11 E F0 .511
(maximal component of @x@ if the associated ar)3.261 F(-)-.22 E 1.296
(ray of indices is not in increasing order)72 464 R 6.796(.T)-.605 G
1.296(his is probably of no signi\214cance.\))-6.796 F(Finally)6.797 E
4.047(,w)-.715 G 4.047(eo)-4.047 G 1.297(mit sparse)-4.047 F -.275(va)72
480 S .951(riants of se).275 F -.165(ve)-.275 G .951
(ral of the original BLAS because we percei).165 F 1.28 -.165(ve a l)
-.275 H .95(ack of usefulness.).165 F .95(The operations thus)6.45 F
1.789(omitted are: center; l l.)72 496 R 1.789(Sparse SR)7.289 F -.44
(OT)-.44 G 2.909(MA).44 G 1.789(pply sparse modi\214ed Gi)-2.909 F -.165
(ve)-.275 G 1.789(ns rotation Sparse _SW).165 F 2.436(AP Sw)-1.32 F(ap)
-.11 E .344(sparse v)72 512 R .344
(ectors If these operations are implemented as an e)-.165 F .343
(xtension to the Sparse BLAS, it is recommend-)-.165 F 1.28(ed that the)
72 528 R 4.03(yb)-.165 G 4.03(en)-4.03 G 1.28(amed SR)-4.03 F -.44(OT)
-.44 G 1.28(MI and _SW).44 F 1.28(API and that the)-1.32 F 4.031(yc)
-.165 G 1.281(onform to the Sparse BLAS con)-4.031 F -.165(ve)-.44 G
(ntions.).165 E 1.088(The standard BLAS operations that e)72 544 R 1.088
(vidently require sparse e)-.275 F 1.088(xtensions are _DO)-.165 F
-1.012(T-)-.44 G 3.837(,_)1.012 G(AXPY)-3.837 E 3.837(,a)-1.419 G 1.087
(nd _R)-3.837 F -.44(OT)-.44 G(.)-.374 E -1.1 -.88(Tw o)72 560 T 1.132
(practices are widely used to impro)4.761 F 1.462 -.165(ve t)-.165 H
1.132(he ef).165 F(\214cienc)-.275 E 3.882(yo)-.165 G 3.882(ft)-3.882 G
1.132(he sparse v)-3.882 F 1.132(ersions of these operations, and)-.165
F(the)72 576 Q 3.41(yb)-.165 G .659(oth are follo)-3.41 F .659
(wed in our e)-.275 F 3.409(xtensions. In)-.165 F .659
(them, the major goal is to perform the operations in O\(NZ\))3.409 F
-.11(wo)72 592 S .886(rk, independent of @n@.).11 F(Achie)6.386 E .886
(ving this goal requires eliminating all searches for interesting v)
-.275 F(alues)-.275 E .504(or matching indices.)72 608 R .503(The \214r\
st idea, adopted by the authors of all the packages mentioned abo)6.003
F -.165(ve)-.165 G 3.253(,a).165 G .503(nd de-)-3.253 F 1.063
(scribed in detail in [7], is to a)72 624 R -.22(vo)-.22 G 1.064
(id binary operations between tw).22 F 3.814(oc)-.11 G 1.064
(ompactly-stored sparse v)-3.814 F 1.064(ectors with)-.165 F(dif)72 640
Q 1.544(ferent sparsity patterns.)-.275 F -.165(Fo)7.044 G 4.294(re).165
G 1.544(xample, the dot product of tw)-4.459 F 4.294(os)-.11 G 1.544
(uch v)-4.294 F 1.544(ectors, \(NZ1, X1, INDX1\) and)-.165 F .989
(\(NZ2, X2, INDX2\) requires w)72 656 R .989
(ork at least of order NZ1 + NZ2 to determine which indices match.)-.11
F(The)6.489 E .345(standard approach is to e)72 672 R .345(xpand one v)
-.165 F .345
(ector to its full, uncompressed form and perform the numeric opera-)
-.165 F .153(tion between that uncompressed v)72 688 R .154
(ector and the remaining compressed v)-.165 F(ector)-.165 E 5.654(.A)
-.605 G .154(lthough the e)-5.654 F .154(xpansion re-)-.165 F .247
(quires O\(NZ\) w)72 704 R .246(ork, and in some cases a corresponding,\
 equally-costly compression may be required, this)-.11 F -.165(ove)72
720 S .463(rhead typically is reco).165 F -.165(ve)-.165 G .463
(red in full.).165 F .463(It is common for the uncompressed v)5.963 F
.464(ector to be in)-.165 F -.22(vo)-.44 G(lv).22 E .464(ed in a se-)
-.165 F .405(ries of such binary operations, further amortizing the e)72
736 R .405(xpansion and compression cost o)-.165 F -.165(ve)-.165 G
3.155(rs).165 G -2.365 -.275(ev e)-3.155 H .405(ral v).275 F(ector)-.165
E 2.863(operations. The)72 752 R -.165(ex)2.863 G .113
(pansion and compression operations mentioned abo).165 F .443 -.165
(ve a)-.165 H .113(re tw).165 F 2.863(os)-.11 G .114(ymmetric sparse e)
-2.863 F(xten-)-.165 E 1.321(sions of the standard BLAS routine _COPY)72
768 R 6.82(.T)-1.419 G 1.32(he \214rst e)-6.82 F 1.32
(xtension, _SCTR, e)-.165 F 1.32(xpands or)-.165 F F1(scatter)4.07 E(s)
-.11 E F0 4.07(as)4.07 G(parse)-4.07 E 2.748(compressed v)72 784 R 2.748
(ector into full or uncompressed form.)-.165 F 2.749(The second e)8.249
F 2.749(xtension is the in)-.165 F -.165(ve)-.44 G 2.749(rse operation,)
.165 F .331(_GTHR, which compresses or)72 800 R F1(gather)3.081 E(s)-.11
E F0 .33(the v)3.081 F .33
(alues from the uncompressed form into the compressed form.)-.275 F EP
%%Page: 3 3
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF .713(These sparse v)72 16 R .713
(ariants of _COPY complete our e)-.275 F .713(xtension to the BLAS.)
-.165 F .713(The second idea that contrib)6.213 F(utes)-.22 E .642
(greatly to ef)72 32 R(\214cienc)-.275 E 3.392(yo)-.165 G 3.392(fs)
-3.392 G .641(parse linear algebra computations is separating the deter\
mination of the nonzero)-3.392 F .394(structure of the sparse v)72 48 R
.394(ectors from the numeric computation.)-.165 F .394
(This separation allo)5.894 F .394(ws the symbolic deter)-.275 F(-)-.22
E .882(mination of the nonzero structure to e)72 64 R .882
(xploit the sparsity characteristics of the particular algorithm being)
-.165 F 4.31(realized. This)72 80 R 1.56(often ob)4.31 F 1.56
(viates the need for either the O\(NZ1+NZ2\) w)-.165 F 1.56(ork of mer)
-.11 F 1.561(ging inde)-.198 F 4.311(xl)-.165 G 1.561(ists or the)-4.311
F .673(O\(@n@\) w)72 96 R .673(ork of searching entire v)-.11 F .673
(ectors for their nonzero entries.)-.165 F .673(Another adv)6.173 F .672
(antage is that the inde)-.275 F(x)-.165 E 1.132
(lists are determined independently of the numeric operations.)72 112 R
1.132(The result is that the numeric operations)6.632 F .893(are implem\
ented using static data structures and can be much simpler and f)72 128
R(aster)-.11 E 3.642(,a)-.44 G .892(nd more amenable to)-3.642 F -.165
(ve)72 144 S .553(ctor or parallel processing.).165 F .553
(The Sparse BLAS are designed for use in such an en)6.053 F .553
(vironment, and there-)-.44 F
(fore do not change the data structures represented by NZ and INDX.)72
160 Q .379(Sparse BLAS Con)72 192 R -.165(ve)-.44 G .378(ntions Storage\
 Another characteristic of all the packages mentioned in \247 1 is that\
 the).165 F .398(full, uncompressed v)72 208 R .398
(ector is stored contiguously)-.165 F 3.148(,e)-.715 G .398
(.g., with the BLAS v)-3.148 F .399(ector descriptor \(N, Y)-.165 F
3.149(,1)-1.419 G 3.149(\). This)-3.149 F(is)3.149 E .649
(the form we ha)72 224 R .979 -.165(ve a)-.22 H 3.399(dopted. Because)
.165 F .649
(contiguous storage of Y is what is used in practice, INCY has been)
3.399 F 1.055(restricted to unity)72 240 R 6.555(.T)-.715 G 1.055
(he absence of a non-unit INCY is unlik)-6.555 F 1.055(ely to cause an)
-.11 F 3.805(yt)-.165 G 1.055(rouble, since the Y array)-3.805 F 1.119
(usually is a w)72 256 R 1.119(ork array whose or)-.11 F -.055(ga)-.198
G 1.119(nization is arbitrary).055 F 6.619(.F)-.715 G 1.119
(urthermore, it is not possible to allo)-6.619 F 3.869(wf)-.275 G 1.119
(or the)-3.869 F(backw)72 272 Q .64(ard inde)-.11 F .641
(xing through Y that w)-.165 F .641(ould be required by INCY)-.11 F/F1
11/Symbol SF<a3>3.391 E F0 3.391(0w)3.391 G .641(ithout kno)-3.391 F
.641(wing N, e)-.275 F -.165(ve)-.275 G 3.391(nt).165 G .641(hough the)
-3.391 F .133
(implementations of the operations are otherwise independent of N.)72
288 R .132(Thus, INCY is omitted from the ar)5.632 F(gu-)-.198 E .09
(ment list.)72 304 R(Similarly)5.59 E 2.841(,n)-.715 G 2.841(oi)-2.841 G
.091(ncrement is required for X or INDX.)-2.841 F .091
(In the speci\214cations belo)5.591 F 1.521 -.715(w, t)-.275 H .091
(he X ar).715 F(gument)-.198 E(al)72 320 Q -.11(wa)-.11 G .778
(ys represents a sparse v).11 F .778(ector in compressed storage form.)
-.165 F .778(INDX follo)6.278 F .777(ws X, replacing INCX of the)-.275 F
.844(original BLAS.)72 336 R .845
(There are no restrictions on the order of the v)6.344 F .845
(alues in the INDX array)-.275 F 6.345(.H)-.715 G -.275(ow)-6.345 G
-2.365 -.275(ev e).275 H 1.725 -.44(r, t).275 H(hose).44 E .38
(subprograms where Y is an output will gi)72 352 R .71 -.165(ve c)-.275
H .38(orrect and consistent results with v).165 F .379
(ector or parallel process-)-.165 F .013(ing only when the v)72 368 R
.013(alues in INDX are distinct.)-.275 F .013
(In the usual sparse matrix applications, distinct indices are)5.513 F
.3(the norm.)72 384 R .3(Because our goal is ef)5.8 F(\214cienc)-.275 E
1.73 -.715(y, e)-.165 H .299
(specially on high performance computers, together with porta-).715 F
(bility)72 400 Q(,)-.715 E/F2 11/Times-Italic@0 SF(we impose the r)2.75
E(estriction that the values in)-.407 E F0(INDX)2.75 E F2
(be distinct when)2.75 E F0(Y)2.75 E F2(is an output.)2.75 E F0 3.083
(Error Handling The Sparse BLAS do no e)72 432 R 3.084
(xplicit error checking or reporting.)-.165 F -1.221(Va)8.584 G 3.084
(lues of @roman)1.221 F .238(NZ~<=~0@ are le)72 448 R -.055(ga)-.165 G
.238(l, and the routines do `).055 F .238(`the right thing')-.814 F .238
('; i.e., the dot product routines return zero func-)-.814 F .681
(tion v)72 464 R .681
(alues and all of the routines neither access their v)-.275 F .682
(ector input ar)-.165 F .682(guments nor store into them.)-.198 F(Thus,)
6.182 E .192
(special case testing need not be performed in a calling program.)72 480
R .192(As mentioned abo)5.692 F -.165(ve)-.165 G 2.942(,c).165 G .192
(ertain routines re-)-2.942 F 1.776(quire that the v)72 496 R 1.777
(alues in INDX be distinct.)-.275 F 1.777(Checking this condition w)
7.277 F 1.777(ould be prohibiti)-.11 F -.165(ve)-.275 G 1.777(ly e).165
F(xpensi)-.165 E -.165(ve)-.275 G(.).165 E(Therefore, violating this co\
ndition may yield incorrect or inconsistent results without w)72 512 Q
(arning.)-.11 E .546(Naming Con)72 544 R -.165(ve)-.44 G .545
(ntion If a sparse BLAS routine is an e).165 F .545
(xtension of a dense BLAS, the subprogram name is)-.165 F .183
(formed by appending a suf)72 560 R .183(\214x character)-.275 F 2.934
(,`)-.44 G(`I')-3.748 E .184(', standing for)-.814 F F2(inde)2.934 E
(xed)-.22 E F0 2.934(,t)C 2.934(ot)-2.934 G .184(he dense name.)-2.934 F
(Ar)5.684 E .184(guments justify-)-.198 F .3(ing this minor e)72 576 R
.3(xtension of the naming con)-.165 F -.165(ve)-.44 G .299(ntion gi).165
F -.165(ve)-.275 G 3.049(ni).165 G 3.049(n[)-3.049 G .299
(15] are presented in [1].)-3.049 F -.165(Fo)5.799 G(rtunately).165 E
3.049(,c)-.715 G(urrent)-3.049 E .065(BLAS needing sparse v)72 592 R
.065(ariants ha)-.275 F .395 -.165(ve a)-.22 H 2.815(tm).165 G .065
(ost \214v)-2.815 F 2.815(ec)-.165 G .065
(haracters in their names, so a one-character suf)-2.815 F .065
(\214x can be)-.275 F .756(appended to e)72 608 R -.165(ve)-.275 G .755
(ry one.).165 F .755(If a sparse BLAS is not a direct e)6.255 F .755
(xtension of a dense BLAS, the root name is a)-.165 F(ne)72 624 Q 1.966
-.715(w, m)-.275 H .536(nemonic, four character name, and the suf).715 F
.537(\214x is reserv)-.275 F .537(ed to describe v)-.165 F 3.287
(ariants. W)-.275 F 3.287(eu)-.88 G .537(se `)-3.287 F(`Z')-.814 E 3.287
('a)-.814 G 3.287(so)-3.287 G(ne)-3.287 E .623(such v)72 640 R .623
(ariant descriptor)-.275 F 6.123(.T)-.605 G .623(he proposed a)-6.123 F
-.275(va)-.22 G .623(ilable combinations are listed in T).275 F .622
(able I belo)-.88 F 4.802 -.715(w. T)-.275 H .622(he collection).715 F
1.074(of routines can be thought of as being di)72 656 R 1.074
(vided into four separate parts, REAL, DOUBLE PRECISION,)-.275 F .476
(COMPLEX, and COMPLEX*16.)72 672 R .475
(Except for the routines that use COMPLEX*16 v)5.976 F .475
(ariables, the routines)-.275 F(can be written in standard ANSI F)72 688
Q(ortran 77.)-.165 E -.88(Ta)133.971 720 S(ble I.).88 E
(Summary of Functions and Names of the Sparse BLAS Subprograms)5.5 E/F3
10/Times-Roman@0 SF -.15(ex)72 733 S(pand, tab\(/\); l c c s s s s s s \
s l c c s s s s s s s l a a0e a0e a0e a0e a0e a0e a0e a0e.).15 E(_)5 E
(Function/Root/Pre\214x and suf)77 746 Q .833(\214x /of)-.25 F
(name/of name _)2.5 E(Dot product/-DO)77 759 Q -.92(T-)-.4 G
(/S-I/D-I/C-UI/Z-UI/C-CI/Z-CI).92 E(Scalar times a v)77 772 Q
(ector/-AXPY)-.15 E(-/S-I/D-I/C-I/Z-I)-1.11 E(added to a v)87 785 Q
(ector)-.15 E(Apply Gi)77 798 Q -.15(ve)-.25 G(ns rotation/-R).15 E -.4
(OT)-.4 G(-/S-I/D-I)-.52 E EP
%%Page: 4 4
%%BeginPageSetup
BP
%%EndPageSetup
/F0 10/Times-Roman@0 SF(Gather)77 13 Q/F1 10/Times-Italic@0 SF(y)2.5 E
F0(into)2.5 E F1(x)2.5 E F0(/-GTHR-/S-/D-/C-/Z-/S-Z/D-Z/C-Z/Z-Z)A
(Scatter)77 29 Q F1(x)2.5 E F0(into)2.5 E F1(y)2.5 E F0
(/-SCTR/S-/D-/C-/Z- _)A/F2 11/Times-Roman@0 SF .865
(Speci\214cations for the Sparse BLAS T)72 61 R .865
(ype and dimension declarations for v)-.88 F .866
(ariables occurring in the sub-)-.275 F .42
(routine speci\214cations are as follo)72 77 R .419(ws: center; c l1 l.)
-.275 F 19.192(all: INTEGER)5.919 F .419(NZ, INDX\(NZ\) S:)28.122 F(RE-)
26.826 E 7.839(AL A,)72 93 R .56(C, S, W)3.31 F 3.31(,X)-1.012 G .56
(\(NZ\), Y\(*\) D:)-3.31 F .56(DOUBLE PRECISION)25 F .561(A, C, S, W)
7.118 F 3.311(,X)-1.012 G .561(\(NZ\), Y\(*\) C:)-3.311 F(COM-)25.605 E
21.261(PLEX A,)72 109 R 3.843 -1.012(W, X)4.569 H 1.818
(\(NZ\), Y\(*\) Z:)1.012 F 4.76(COMPLEX*16 A,)26.221 F 3.842 -1.012
(W, X)4.568 H 1.818(\(NZ\), Y\(*\) T)1.012 F 1.818
(ype declarations for the)-.88 F 8.087(function names are as follo)72
125 R 8.088(ws: center; c l1 l.)-.275 F 24.076(S: REAL)13.588 F(SDO)
7.279 E 8.088(TI D:)-.44 F(DOUBLE)25 E 1.058(PRECISION DDO)72 141 R
7.447(TI C:)-.44 F 16.692(COMPLEX CDO)25.605 F 7.447(TCI, CDO)-.44 F
7.446(TUI Z:)-.44 F .192(COMPLEX*16 ZDO)26.221 F(TCI,)-.44 E(ZDO)72 157
Q .495(TUI NZ, A, C, S, and INDX are ne)-.44 F -.165(ve)-.275 G 3.245
(rc).165 G .495(hanged by the Sparse BLAS.)-3.245 F .496
(In addition, X is not changed)5.995 F .855(by _DO)72 173 R -1.012(T-)
-.44 G .855(I, _AXPYI, or _SCTR, and Y is not changed by _DO)1.012 F
-1.012(T-)-.44 G 3.604(Io)1.012 G 3.604(r_)-3.604 G 3.604(GTHR. Only)
-3.604 F .854(the elements of Y)3.604 F .684
(whose indices appear in INDX are referenced or modi\214ed.)72 189 R
(Finally)6.184 E 3.434(,f)-.715 G .684(or con)-3.434 F -.165(ve)-.44 G
.684(nience in the mathematical).165 F .118
(descriptions of the operations, we assume that an)72 205 R 2.868(yc)
-.165 G .118(omponent of @x@ whose inde)-2.868 F 2.868(xi)-.165 G 2.868
(sn)-2.868 G .118(ot listed in INDX)-2.868 F .747(is zero.)72 221 R .747
(\(The FOR)6.247 F .747(TRAN descriptions properly e)-.66 F .748
(xhibit the operations e)-.165 F -.165(ve)-.275 G 3.498(nw).165 G .748
(hen `)-3.498 F(`uninteresting')-.814 E 3.498('m)-.814 G(eans)-3.498 E
(something other than `)72 237 Q(`zero.)-.814 E -.814('')-.77 G 5.5(\)S)
.814 G(parse Dot Product W = SDO)-5.5 E(TI \(NZ, X,INDX, Y\))-.44 E 2.75
(W=C)72 253 S(DO)-2.75 E(TCI \(NZ, X,INDX, Y\))-.44 E(Conjug)11 E(ated)
-.055 E 4.059(W=C)72 269 S(DO)-4.059 E 1.309(TUI \(NZ, X,INDX, Y\))-.44
F(Unconjug)12.309 E 1.309(ated SDO)-.055 F 1.309(TI and CDO)-.44 F 1.308
(TUI compute w ~ : roman = ~ sum)-.44 F
(from {i roman = 1} to n x sub i y sub i)72 285 Q .134
(roman {~=~ sum from I=1 to NZ X\(I\)*Y\(INDX\(I\)\)} and CDO)88.5 301 R
.134(TCI computes w ~ : roman = ~ sum from)-.44 F
({i roman = 1} to n x bar sub i y sub i)72 317 Q .59(roman {~=~ sum fro\
m I=1 to NZ CONJG\(X\(I\)\)*Y\(INDX\(I\)\)} where @x bar@ is the comple)
88.5 333 R 3.34(xc)-.165 G(onju-)-3.34 E -.055(ga)72 349 S .667
(te of @x@.).055 F .667(Sparse Elementary V)6.167 F .668
(ector Operation CALL _AXPYI \(NZ, A, X,INDX, Y\) _AXPYI per)-1.221 F(-)
-.22 E .496
(forms the operation y ~ : roman = ~ ax ~ + ~ y which is the F)72 365 R
.495(ortran 77 operation roman { Y\(INDX\(I\)\) ~=~)-.165 F .118
(A*X\(I\) ~ + ~ Y\(INDX\(I\)\) ~~~~~~for~I ~=~ 1,~...,~NZ }.)72 381 R
.118(The v)5.618 F .118(alues in INDX must be distinct to allo)-.275 F
2.869(wc)-.275 G(onsis-)-2.869 E .512(tent v)72 397 R .512
(ector or parallel e)-.165 F -.165(xe)-.165 G 3.262(cution. Apply).165 F
3.262(aS)3.262 G .512
(parse Plane Rotation \(REAL and DOUBLE PRECISION on-)-3.262 F 1.333
(ly\) CALL SR)72 413 R -.44(OT)-.44 G 4.084(I\().44 G 1.334
(NZ, X,INDX, Y)-4.084 F 4.084(,C)-1.419 G 1.334(,S\) SR)-4.084 F -.44
(OT)-.44 G 4.084(Ia).44 G 1.334(pplies a Gi)-4.084 F -.165(ve)-.275 G
1.334(ns rotation to a sparse v).165 F 1.334(ector stored in)-.165 F
.577(compressed form and another v)72 429 R .577
(ector stored in full storage form.)-.165 F .576
(If all nonzero components of @y@ ap-)6.076 F(pear in INDX, then SR)72
445 Q -.44(OT)-.44 G 2.75(Ic).44 G(omputes left [ lpile { x sub i abo)
-2.75 E .33 -.165(ve y s)-.165 H(ub i } right ] ~ up 30 {: roman =}).165
E 2.75(~l)80.25 461 S(eft [ rpile { c abo)-2.75 E .33 -.165(ve -)-.165 H
2.75(s}~).165 G(~~ rpile { s abo)-2.75 E .33 -.165(ve c } ~ r)-.165 H
(ight ] ~ up 50 .).165 E 2.75(~l)80.25 477 S(eft [ lpile { x sub i abo)
-2.75 E .33 -.165(ve y s)-.165 H(ub i } right ]).165 E .136
(~~~~for~i~ roman = ~1,~...,~n.)80.25 493 R .137
(Whether or not all nonzero components of @y@ appear in INDX, the oper)
5.636 F(-)-.22 E .209(ation is described by the follo)72 509 R .209
(wing F)-.275 F .209(ortran: roman { left "" lpile { TEMP abo)-.165 F
.538 -.165(ve X)-.165 H .208(\(I\) abo).165 F .538 -.165(ve Y)-.165 H
.208(\(INDX\(I\)\) }).165 F(~)72 525 Q(cpile { = abo)94 541 Q .33 -.165
(ve = a)-.165 H(bo).165 E .33 -.165(ve = } ~)-.165 H
(rpile { X\(I\)~~~~~~~^ abo)94 557 Q .33 -.165(ve C)-.165 H(*TEMP abo)
.165 E .33 -.165(ve b)-.165 H(old - S*TEMP } ~).165 E(cpile { ~ abo)94
573 Q .33 -.165(ve + a)-.165 H(bo).165 E .33 -.165(ve + } ~)-.165 H
(rpile { ~ abo)94 589 Q .33 -.165(ve S)-.165 H(*Y\(INDX\(I\)\) abo).165
E .33 -.165(ve C)-.165 H(*Y\(INDX\(I\)\) }).165 E .397
(~~~ right } ~~~for~I ~=~ 1,~...,~NZ. } The v)94 605 R .397
(alues in INDX must be distinct to allo)-.275 F 3.147(wc)-.275 G .397
(onsistent v)-3.147 F .397(ector or)-.165 F 2.027(parallel e)72 621 R
-.165(xe)-.165 G 4.776(cution. Gather).165 F 4.776(aV)4.776 G 2.026
(ector into Compressed F)-5.997 F 2.026(orm CALL _GTHR \(NZ, Y)-.165 F
4.776(,X)-1.419 G 2.026(,INDX\) Gather)-4.776 F(\(cop)72 637 Q 1.886
(y\) the speci\214ed components of a v)-.11 F 1.887
(ector stored in full storage form into compressed form.)-.165 F 1.887
(If all)7.387 F .213(nonzero components of @y@ appear in INDX, then _GT\
HR performs x ~ : roman = ~ y which is symbol-)72 653 R .993(ized by: r\
oman { X\(I\) ~=~ Y\(INDX\(I\)\) ~~~~~~for~I~=~1,~...,~NZ. } Gather a V)
72 669 R .993(ector into Compressed F)-1.221 F(orm)-.165 E .043
(and Zero the Full-form V)72 685 R .043(ector CALL _GTHRZ \(NZ, Y)-1.221
F 2.793(,X)-1.419 G .043(,INDX\) Gather \(cop)-2.793 F .042
(y\) the speci\214ed components)-.11 F .113(of a v)72 701 R .113
(ector stored in full storage form into compressed form and zero the g)
-.165 F .114(athered components of the full-)-.055 F .7(form v)72 717 R
(ector)-.165 E 6.2(.I)-.605 G 3.45(fa)-6.2 G .7(ll nonzero components o\
f @y@ appear in INDX, a common occurrence in the use of a)-3.45 F .305
(single uncompressed scratch v)72 733 R(ector)-.165 E 3.055(,t)-.44 G
.305(hen _GTHRZ simultaneously performs left { ~ lpile {x ~ : roman = ~)
-3.055 F 3.33(ya)72 749 S(bo)-3.33 E .91 -.165(ve y ~ : r)-.165 H .579
(oman = ~ 0 . } This is speci\214ed by the follo).165 F .579
(wing: roman { left "" lpile { X\(I\) abo)-.275 F .909 -.165(ve Y)-.165
H(\(IN-).165 E(DX\(I\)\) } ~)72 765 Q(lpile { = abo)94 781 Q .33 -.165
(ve = } ~)-.165 H(lpile { Y\(INDX\(I\)\) abo)94 797 Q .33 -.165(ve 0)
-.165 H(.0 }).165 E EP
%%Page: 5 5
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF .79(~~~ right } ~~~for~I~=~1,~...,~NZ. } The v)
94 16 R .79(alues in INDX must be distinct to allo)-.275 F 3.541(wc)
-.275 G .791(onsistent v)-3.541 F .791(ector or)-.165 F 1.775
(parallel e)72 32 R -.165(xe)-.165 G 4.525(cution. Scatter).165 F 4.525
(aS)4.525 G 1.775(parse V)-4.525 F 1.775(ector from Compressed F)-1.221
F 1.774(orm CALL _SCTR \(NZ, X,INDX, Y\))-.165 F .322(Scatter \(cop)72
48 R .322(y\) the components of a sparse v)-.11 F .322
(ector stored in compressed form into speci\214ed components of)-.165 F
2.893(av)72 64 S .143(ector in full storage form.)-3.058 F .143
(If @y@ is initially the zero v)5.643 F(ector)-.165 E 2.893(,t)-.44 G
.142(hen _SCTR performs y ~ : roman = ~ x .)-2.893 F .052
(which is represented by the follo)72 80 R .052(wing F)-.275 F .052(ort\
ran: roman { Y\(INDX\(I\)\) ~=~ X\(I\) ~~~~~~for~I~=~1,~...,~NZ. } The)
-.165 F -.275(va)72 96 S(lues in INDX must be distinct to allo).275 E
2.75(wc)-.275 G(onsistent v)-2.75 E(ector or parallel e)-.165 E -.165
(xe)-.165 G(cution.).165 E(Ackno)72 128 Q .427
(wledgements A draft of this proposal w)-.275 F .427
(as discussed at the P)-.11 F(arv)-.165 E .427(ec IV W)-.165 F .427
(orkshop or)-.88 F -.055(ga)-.198 G .427(nized by John).055 F 2.98
(Rice at Purdue Uni)72 144 R -.165(ve)-.275 G 2.98
(rsity on October 29-30, 1984.).165 F(Subsequently)8.481 E 5.731(,ar)
-.715 G -.275(ev)-5.731 G 2.981(ised draft appeared in the).275 F 2.1
(SIGNUM Ne)72 160 R 2.1(wsletter [2], and w)-.275 F 2.1
(as discussed at the SIAM Conference on Applied Linear Algebra in)-.11 F
1.128(Raleigh, April 29-May 2, 1985.)72 176 R 2.888 -.88(We t)6.628 H
1.129(hank the participants at the w).88 F 1.129
(orkshop and meeting for their com-)-.11 F
(ments, discussions, and encouragement.)72 192 Q .397
(References D.S. Dodson and J.G. Le)72 224 R .396(wis, `)-.275 F .396
(`Issues Relating to Extension of the Basic Linear Algebra Sub-)-.814 F
(programs')72 240 Q(',)-.814 E/F1 11/Times-Italic@0 SF -.33(AC)3.048 G
3.048(MS).33 G .298(IGNUM Ne)-3.048 F .298(wsletter 20,)-.165 F F0 .298
(1, \(1985\), pp. 19-22.)3.048 F .298(D.S. Dodson and J.G. Le)5.798 F
.299(wis, `)-.275 F(`Proposed)-.814 E .826
(Sparse Extensions to the Basic Linear Algebra Subprograms')72 256 R(',)
-.814 E F1 -.33(AC)3.575 G 3.575(MS).33 G .825(IGNUM Ne)-3.575 F .825
(wsletter 20,)-.165 F F0 .825(1, \(1985\),)3.575 F .314(pp. 22-25.)72
272 R .315(D.S. Dodson, R.G. Grimes, and J.G. Le)5.815 F .315(wis, `)
-.275 F .315(`Model Implementation and T)-.814 F .315(est P)-.77 F .315
(ackage for the)-.165 F 1.636(Sparse Basic Linear Algebra Subprograms,)
72 288 R -.814('')-.77 G F1 1.636(this journal.)5.2 F F0 1.636
(J.J. Dong)7.136 F 1.636(arra, J.R. Bunch, C.B. Moler)-.055 F 4.386(,a)
-.44 G(nd)-4.386 E(G.W)72 304 Q 4.825(.S)-1.012 G(te)-4.825 E -.11(wa)
-.275 G(rt,).11 E F1(LINP)4.825 E -.33(AC)-.99 G 4.825(KU).33 G(ser)
-4.825 E 2.076(s' Guide)-.11 F(,)-.11 E F0 2.076
(SIAM Publications, Philadelphia, 1979.)4.826 F 2.076(J.J. Dong)7.576 F
2.076(arra, J. Du)-.055 F 2.051(Croz, S. Hammarling, and R.J. Hanson, `)
72 320 R -.88(`A)-.814 G 4.8(nE).88 G 2.05(xtended Set of F)-4.8 F 2.05
(ortran Basic Linear Algebra Subpro-)-.165 F(grams,)72 336 Q -.814('')
-.77 G F1 1.202(this journal.)4.766 F F0 1.202(I.S. Duf)6.702 F 1.202
(f, `)-.275 F 1.202(`MA28: A Set of F)-.814 F 1.203
(ortran Subroutines for Sparse Unsymmetric Linear)-.165 F(Systems,)72
352 Q 2.454 -.814('' A)-.77 H .826
(ERE Report R.8730, HMSO, London, \(1971\).).814 F .825(I.S. Duf)6.325 F
.825(f, A.M. Erisman, and J.K. Reid,)-.275 F F1(Di-)3.575 E -.407(re)72
368 S 1.004(ct Methods for Spar).407 F 1.005(se Matrices,)-.11 F F0
1.005(Oxford Uni)3.755 F -.165(ve)-.275 G 1.005(rsity Press, \(1986\).)
.165 F 1.005(S.C. Eisenstat, M.C. Gursk)6.505 F 2.435 -.715(y, M)-.165 H
(.H.).715 E .505(Schultz, and A.H. Sherman, `)72 384 R(`Y)-.814 E .505
(ale Sparse Matrix P)-1.1 F .505(ackage I.)-.165 F .505
(The Symmetric Codes,)6.005 F -.814('')-.77 G F1 .505(Int. J)4.069 F
3.254(.N)-.275 G .504(um. Math.)-3.254 F(Eng)72 400 Q 3.975(.1)-.165 G
(8,)-3.975 E F0 1.225(\(1982\), pp. 1145-1151.)3.975 F 1.226(A. Geor)
6.726 F 1.226(ge and J.W)-.198 F 3.976(.L)-1.012 G(iu,)-3.976 E F1 1.226
(Computer Solution of Lar)3.976 F 1.446 -.11(ge S)-.407 H(par).11 E
1.226(se P)-.11 F(ositive)-.88 E 1.18(De\214nite Systems,)72 416 R F0
1.18(Prentice-Hall, Inc., Engle)3.93 F -.11(wo)-.275 G 1.18(od Clif).11
F 1.18(fs, Ne)-.275 F 3.93(wJ)-.275 G(erse)-3.93 E 2.61 -.715(y, 1)-.165
H 3.93(982. A.).715 F(Geor)3.93 E 1.18(ge and M.T)-.198 F 3.929(.H)-.814
G(eath,)-3.929 E -.814(``)72 432 S .195
(Solution of Sparse Linear Least Squares Problems Using Gi).814 F -.165
(ve)-.275 G .195(ns Rotations,).165 F -.814('')-.77 G F1 .195
(Linear Alg)3.759 F(ebr)-.11 E 2.946(aa)-.165 G .196(nd Its Ap-)-2.946 F
.817(plications 34,)72 448 R F0 .817(\(1980\), pp. 69-82.)3.567 F .817
(A. Geor)6.317 F .817(ge, M.T)-.198 F 3.567(.H)-.814 G .817
(eath, and R.J. Plemmons, `)-3.567 F .816(`Solution of Lar)-.814 F
(ge-Scale)-.198 E 1.221
(Sparse Least Squares Problems Using Auxiliary Storage,)72 464 R 2.85
-.814('' R)-.77 H 1.222(eport ORNL/CSD-63, Oak Ridge National).814 F
(Laboratory)72 480 Q 3.653(,\()-.715 G .903(August, 1980\).)-3.653 F
.903(R.G. Grimes, J.G. Le)6.403 F .902(wis, and H.D. Simon, `)-.275 F
.902(`Experiences in Solving Lar)-.814 F(ge)-.198 E(Eigen)72 496 Q -.275
(va)-.44 G 2.342(lue Problems on the CRA).275 F 5.092(YX)-1.155 G(-MP)
-5.092 E -.77(,')-1.221 G(')-.044 E F1(Pr)5.092 E 2.343
(oceedings of the Eighteenth Semiannual CRA)-.495 F 5.093(YU)-.605 G
(ser)-5.093 E(s)-.11 E(Gr)72 512 Q .845(oup Meeting)-.495 F(,)-.11 E F0
.845(Garmisch, W)3.595 F .845(est German)-.88 F 2.275 -.715(y, \()-.165
H(October).715 E 3.595(,1)-.44 G 3.595(986\). R.G.)-3.595 F .845
(Grimes, J.G. Le)3.595 F .844(wis, and H.D. Simon,)-.275 F -.814(``)72
528 S(Eigen).814 E -.275(va)-.44 G 1.086
(lue Problems and Algorithms in Structural Engineering,).275 F 2.715
-.814('' i)-.77 H(n).814 E F1(Lar)3.837 E 1.307 -.11(ge S)-.407 H 1.087
(cale Eig).11 F(en)-.11 E 1.087(value Pr)-.44 F(oblems)-.495 E F0 5.17
(\(J. Cullum)72 544 R 2.42(and R. W)5.17 F(illoughby)-.44 E 5.17(,e)
-.715 G 2.42(ds.\), Else)-5.17 F 2.419
(vier North-Holland, \(1986\), pp. 81-93.)-.275 F 2.419(R.J. Hanson, F)
7.919 F(.T)-.88 E(.)-.814 E 2.474(Krogh, and C.L. La)72 560 R 2.474
(wson, `)-.165 F 4.234 -.88(`A P)-.814 H 2.475
(roposal for Standard Linear Algebra Subprograms,).88 F 4.103 -.814
('' T)-.77 H 2.475(M-33-660, Jet).814 F 1.751(Propulsion Laboratory)72
576 R 4.501(,\()-.715 G(No)-4.501 E -.165(ve)-.165 G(mber).165 E 4.501
(,1)-.44 G 4.501(973\). C.L.)-4.501 F(La)4.5 E 1.75
(wson, R.J. Hanson, D.R. Kincaid, and F)-.165 F(.T)-.88 E 4.5(.K)-.814 G
(rogh,)-4.5 E -.814(``)72 592 S .131
(Basic Linear Algebra Subprograms for F).814 F .131(ortran Usage,)-.165
F -.814('')-.77 G F1 -.33(AC)3.696 G 2.882(MT).33 G -.165(ra)-3.487 G
.132(nsactions on Mathematical Softwar).165 F 2.882(e5)-.407 G(,)-2.882
E F0 2.965(3\()72 608 S(September)-2.965 E 2.965(,1)-.44 G .215
(979\), pp. 308-323.)-2.965 F .215(C.L. La)5.715 F .215
(wson, R.J. Hanson, D.R. Kincaid, and F)-.165 F(.T)-.88 E 2.964(.K)-.814
G .214(rogh, `)-2.964 F -.88(`A)-.814 G(lgorithm).88 E 1.226
(539: Basic Linear Algebra Subprograms for F)72 624 R 1.226
(ortran Usage,)-.165 F -.814('')-.77 G F1 -.33(AC)4.79 G 3.976(MT).33 G
-.165(ra)-4.581 G 1.226(nsactions on Mathematical Soft-).165 F(war)72
640 Q 3.163(e5)-.407 G(,)-3.163 E F0 3.163(3\()3.163 G(September)-3.163
E 3.163(,1)-.44 G .413(979\), pp. 324-325.)-3.163 F .413(J.G. Le)5.913 F
.413(wis and H.D. Simon, `)-.275 F .412(`The Impact of Hardw)-.814 F
.412(are Gath-)-.11 F .518(er/Scatter on Sparse Gaussian Elimination,)72
656 R -.814('')-.77 G F1(Pr)4.082 E .518
(oceedings of the 1986 International Confer)-.495 F .519(ence on P)-.407
F(ar)-.88 E(al-)-.165 E .728(lel Pr)72 672 R(ocessing)-.495 E(,)-.11 E
F0 .728(\(K. Hw)3.478 F .728(ang, S. Jacobs, and E. Sw)-.11 F
(artzlander)-.11 E 3.478(,e)-.44 G .728(ds.\), IEEE Computer Society)
-3.478 F 3.478(,L)-.715 G .727(os Angeles,)-3.478 F 3.562
(\(1986\). H.D.)72 688 R .812(Simon, `)3.562 F .812
(`Incomplete LU Preconditioners for Conjug)-.814 F .813(ate Gradient T)
-.055 F .813(ype Iterati)-.88 F 1.143 -.165(ve M)-.275 H(ethods,).165 E
-.814('')-.77 G -.165(Pa)72 704 S .406(per SPE 13533,).165 F F1(Pr)3.156
E .406(oceedings of the Eighth SPE Symposium on Reservoir Simulation,)
-.495 F F0(\(February)3.155 E 3.155(,1)-.715 G(985\).)-3.155 E 9.199
(From con)72 736 R -.165(vex)-.44 G 9.199
(!dodson@a.cs.uiuc.edu Fri Jul 15 12:41:14 1988 Return-P).165 F 9.2
(ath: <con)-.165 F -.165(vex)-.44 G(!dod-).165 E 6.386
(son@a.cs.uiuc.edu> Recei)72 752 R -.165(ve)-.275 G 6.386
(d: from anl-mcs.ARP).165 F 9.136(Ab)-1.012 G 9.136(ya)-9.136 G 6.386
(ntares.mcs.anl \(3.2/SMI-3.2\))-9.136 F(id)45.135 E 2.611
(AA03808; Fri, 15 Jul 88 12:41:11 CDT Recei)72 768 R -.165(ve)-.275 G
2.611(d: from a.cs.uiuc.edu \(a.cs.uiuc.edu.ARP).165 F 2.611
(A\) by anl-)-1.012 F(mcs.ARP)72 784 Q 5.848(A\()-1.012 G 39.098
(4.12/4.9\) id)-5.848 F 3.097
(AA17728; Fri, 15 Jul 88 12:47:54 cdt Recei)5.847 F -.165(ve)-.275 G
3.097(d: by a.cs.uiuc.edu).165 F 36.685(\(UIUC-5.52/9.7\) id)72 800 R
.685(AA23639; Fri, 15 Jul 88 12:49:37 CDT Recei)3.435 F -.165(ve)-.275 G
.686(d: from con).165 F -.165(vex)-.44 G 3.436(1\().165 G(8003e3f8\))
-3.436 E EP
%%Page: 6 6
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF .887(by con)72 16 R 1.217 -.165(vex \()-.44 H
36.887(4.12/4.7\) id).165 F .887
(AA02211; Fri, 15 Jul 88 11:46:13 cdt Date: Fri, 15 Jul 88 11:46:05 cdt)
3.637 F 2.949(From: con)72 32 R -.165(vex)-.44 G 2.949
(!dodson@a.cs.uiuc.edu \(Da).165 F 3.279 -.165(ve D)-.22 H 2.949
(odson\) Message-Id: <8807151646.AA01545@con).165 F -.165(vex)-.44 G(1>)
.165 E -.88(To)72 48 S 3.327(:a).88 G(nl-mcs.ARP)-3.327 E(A!dong)-1.012
E .577(arra%uiucdcs.cs.uiuc.edu@a.cs.uiuc.edu Subject: trof)-.055 F
3.327(fs)-.275 G .577(ource for sparse blas pa-)-3.327 F(per Status: R)
72 64 Q(O)-.44 E/F1 11/Times-Bold@0 SF(gsize 11 delim @@)72 112 Q/F2 12
/Times-Bold@0 SF(Sparse Extensions to the FOR)72 128 Q(TRAN)-.48 E
(Basic Linear Algebra Subpr)72 160 Q(ograms)-.216 E F1(Da)72 176 Q
(vid S. Dodson)-.275 E/F3 10/Times-Bold@0 SF(Con)72 192 Q -.1(ve)-.4 G
2.5(xC).1 G(omputer Cor)-2.5 E(poration 701 N. Plano Road Richardson, T)
-.1 E(exas 75081)-.92 E F1(Roger G. Grimes)72 208 Q F3
(Boeing Computer Ser)72 224 Q(vices, M/S 7L-21 P)-.1 E
(.O. Box 24346 Seattle, W)-1.1 E(ashington 98124-0346)-.65 E F1 -.165
(Jo)72 240 S(hn G. Lewis).165 E F3(Boeing Computer Ser)72 251 Q
(vices, M/S 7L-21 P)-.1 E(.O. Box 24346 Seattle, W)-1.1 E
(ashington 98124-0346 T)-.65 E(ypeset on .)-.74 E 2.7<8a54>90 295 S .201
(his paper describes an extension to the set of Basic Linear Algebra Su\
bpr)-2.7 F 2.701(ograms. The)-.18 F(extension)2.701 E .175(is tar)90 306
R .175(geted at sparse v)-.1 F .174
(ector operations, with the goal of pr)-.1 F -.1(ov)-.18 G .174
(iding ef\214cient, b).1 F .174(ut portable, implementa-)-.2 F
(tions of algorithms f)90 317 Q(or high perf)-.25 E(ormance computers.)
-.25 E F1(Intr)72 333 Q .614(oduction In 1973, Hanson, Kr)-.198 F .615
(ogh, and Lawson [16] described the adv)-.198 F .615
(antages of adopting a set)-.11 F .724(of basic r)72 349 R .724
(outines f)-.198 F .723(or pr)-.275 F .723(oblems in linear algebra.)
-.198 F .723(They obser)6.223 F -.11(ve)-.11 G 3.473(dt).11 G .723
(hat standardizing such a subr)-3.473 F(ou-)-.198 E .164(tine library w)
72 365 R .164(ould impr)-.11 F .384 -.11(ove p)-.198 H -.198(ro).11 G
.164(gram clarity).198 F 2.914(,p)-.605 G(ortability)-2.914 E 2.915(,m)
-.605 G(odularity)-2.915 E 2.915(,a)-.605 G .165(nd maintainability)
-2.915 F 5.665(.A)-.77 G(ddition-)-5.665 E(ally)72 381 Q 2.872(,i)-.605
G 2.872(ft)-2.872 G .122(hese r)-2.872 F .122(outines wer)-.198 F 2.872
(ec)-.198 G .121(oded in assembly language f)-2.872 F .121
(or many computers, they w)-.275 F .121(ould pr)-.11 F .121(omote ef-)
-.198 F 1.253(\214ciency without sacri\214cing portability)72 397 R
6.753(.T)-.77 G 1.254(he original basic linear algebra subpr)-6.753 F
1.254(ograms, no)-.198 F 4.004(wc)-.11 G(om-)-4.004 E 2.274(monly r)72
413 R(eferr)-.198 E 2.274(ed to as the BLAS, wer)-.198 F 5.023(ef)-.198
G 2.273(ully described in Lawson, Hanson, Kincaid, and Kr)-5.023 F(ogh)
-.198 E 3.942([17,18]. They)72 429 R(ha)3.942 E 1.412 -.11(ve b)-.275 H
1.192(een used in a wide range of softwar).11 F 1.193(e, including LINP)
-.198 F -.605(AC)-.814 G 3.943(K[).605 G 1.193(5], and ha)-3.943 F 1.413
-.11(ve b)-.275 H(e-).11 E .152(come a)72 445 R/F4 11/Times-Italic@0 SF
.152(de facto)2.902 F F0 .152(standard for the elementary v)2.902 F .152
(ector operations.)-.165 F .151(The success of the BLAS has led Dong)
5.652 F(ar)-.055 E(-)-.22 E(ra)72 461 Q F4 .647(et al.)3.397 F F0 .647
([6,7] to propose e)3.397 F .647(xtended sets of subprograms tar)-.165 F
.647(geted to)-.198 F -.11(wa)-.275 G .647(rd ef).11 F(\214cienc)-.275 E
3.398(yi)-.165 G 3.398(nd)-3.398 G .648(ense linear algebra)-3.398 F
.106(on a broader class of computers.)72 477 R(Man)5.606 E 2.856(yc)
-.165 G .106(odes no)-2.856 F 2.856(we)-.275 G .106
(xist for solving sparse linear systems, e.g., MA28 [8],)-3.021 F .406
(the Y)72 493 R .406(ale Sparse Matrix P)-1.1 F .406(ackage [10], SP)
-.165 F(ARSP)-1.012 E .407(AK [11], and ICCG/ILU preconditioning [20].)
-1.012 F .407(It has been)5.907 F .974
(found that sparse matrix computations are useful in man)72 509 R 3.724
<798c>-.165 G 3.724(elds. Furthermore,)-3.724 F .974(much ef)3.724 F
.974(fort is being e)-.275 F(x-)-.165 E .171(pended in other sparse mat\
rix computations such as sparse least squares [12,13] and eigen)72 525 R
-.275(va)-.44 G .171(lue e).275 F(xtraction)-.165 E 2.948([14,15]. Just)
72 541 R .198(as the original BLAS ha)2.948 F .528 -.165(ve a)-.22 H
.197(lready demonstrated their utility for dense matrix computations,)
.165 F 1.065(further de)72 557 R -.165(ve)-.275 G 1.066
(lopment in sparse matrix algorithms will be well serv).165 F 1.066
(ed by sparse e)-.165 F 1.066(xtensions to the BLAS.)-.165 F .809
(Indeed the reasons that justi\214ed the original BLAS de)72 573 R -.165
(ve)-.275 G .808(lopment hold e).165 F -.165(ve)-.275 G 3.558(nm).165 G
.808(ore strongly for the Sparse)-3.558 F 3.244(BLAS. The)72 589 R .494
(clarity and modularity of a code are almost al)3.244 F -.11(wa)-.11 G
.495(ys impro).11 F -.165(ve)-.165 G 3.245(db).165 G 3.245(yt)-3.245 G
.495(he use of higher le)-3.245 F -.165(ve)-.275 G 3.245(lc).165 G(on-)
-3.245 E 2.76(structs. This)72 605 R .01(is certainly true in the conte)
2.76 F .009
(xt of sparse linear algebra, where the ordinary matrix algebra op-)
-.165 F .18(erations occur in a complicated frame)72 621 R -.11(wo)-.275
G .18
(rk of data structures representing the sparsity of these operations.)
.11 F 1.777(The identi\214cation of the fundamental operations eases th\
e conceptual problems of writing and under)72 637 R(-)-.22 E .279
(standing such codes.)72 653 R .279(Sparse e)5.779 F .279(xtensions ha)
-.165 F .61 -.165(ve t)-.22 H .28(heir most profound ef).165 F .28
(fect in promoting softw)-.275 F .28(are portability)-.11 F .862
(with ef)72 669 R(\214cienc)-.275 E 3.612(ya)-.165 G .862(cross v)-3.612
F .861(arious machine types via tuned implementations [19].)-.275 F .861
(This is a f)6.361 F .861(ar more impor)-.11 F(-)-.22 E .686(tant issue\
 for the Sparse BLAS than for the ordinary BLAS because three of the fu\
ndamental operations)72 685 R 1.71(cannot be written in portable FOR)72
701 R 1.709(TRAN in such a f)-.66 F 1.709
(ashion that compilers can automatically optimize)-.11 F .087
(them for high performance architectures.)72 717 R .088
(The syntactic structure of the code for these operations suggests)5.587
F .524(too much generality to permit safely e)72 733 R -.165(xe)-.165 G
.524(cuting them in v).165 F .524(ector mode or on distrib)-.165 F .523
(uted processors.)-.22 F .523(It is in)6.023 F -.11(fa)72 749 S 1.167
(ct their use in the conte).11 F 1.167(xt of the Sparse BLAS that assur\
es the implementor that the usage meets the)-.165 F .81
(conditions necessary for optimization.)72 765 R .81
(Often such tuned implementations require no more than addition)6.31 F
1.274(of machine-speci\214c compiler directi)72 781 R -.165(ve)-.275 G
4.024(s. Ho).165 F(we)-.275 E -.165(ve)-.275 G 2.154 -.44(r, i).165 H
4.025(ti).44 G 4.025(sp)-4.025 G 1.275
(recisely these tuned implementations that will)-4.025 F .86
(ease the transfer of much of the e)72 797 R .86
(xisting sparse linear algebra methodology to computers with v)-.165 F
.859(ector or)-.165 F EP
%%Page: 7 7
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF .685(parallel architectures.)72 16 R .685
(In the light of recent ef)6.185 F .685(forts [6,7] to e)-.275 F .686
(xtend the scope of the BLAS to routines in-)-.165 F -.22(vo)72 32 S
1.023(lving @n sup 2@ or @n sup 3@ operations, a proposal for standardi\
zing routines that in).22 F -.22(vo)-.44 G(lv).22 E 3.772(em)-.165 G
(uch)-3.772 E(fe)72 48 Q .144
(wer than @n@ operations may appear archaic.)-.275 F .144
(The granularity of the routines speci\214ed here is lo)5.644 F 1.574
-.715(w, b)-.275 H(ut).495 E .467
(the analogy to dense matrix operations is misleading.)72 64 R .467
(As mentioned abo)5.967 F -.165(ve)-.165 G 3.217(,t).165 G .466
(hese routines may be essen-)-3.217 F .904
(tial to obtaining high performance in a portable code.)72 80 R .905
(In such en)6.405 F .905(vironments, the o)-.44 F -.165(ve)-.165 G .905
(rhead of additional).165 F .032
(subroutine linkages is easily absorbed.)72 96 R .032(It is also the ca\
se that these routines are called less often than their)5.532 F .349
(dense counterparts.)72 112 R .349(The sparse f)5.849 F .35(actorizatio\
n of a sparse matrix results in a number of calls to single-loop)-.11 F
1.02(subroutines that is more lik)72 128 R 3.769(e@)-.11 G 1.019
(n@ than @n sup 2@.)-3.769 F(Lastly)6.519 E 3.769(,s)-.715 G 1.019
(parsity interferes with the re)-3.769 F 1.019(gularity that)-.165 F
(mak)72 144 Q .001(es the higher le)-.11 F -.165(ve)-.275 G 2.752(ld)
.165 G .002(ense BLAS possible.)-2.752 F .002
(Although the structures of certain higher le)5.502 F -.165(ve)-.275 G
2.752(ls).165 G .002(parse BLAS)-2.752 F(ha)72 160 Q .633 -.165(ve b)
-.22 H .303(een identi\214ed [1], these structures appear to ha).165 F
.632 -.165(ve l)-.22 H .302(ess generality than the single-loop k).165 F
.302(ernels speci-)-.11 F 1.111(\214ed here.)72 176 R 2.871 -.88(We b)
6.611 H(elie).88 E 1.441 -.165(ve t)-.275 H 1.111(his is an appropriate\
 time to standardize speci\214cations for a set of sparse e).165 F
(xten-)-.165 E .111(sions to the BLAS.)72 192 R .11
(Examination of the pre)5.611 F .11
(viously listed sparse linear algebra codes re)-.275 F -.165(ve)-.275 G
.11(als that a fe).165 F 2.86(wb)-.275 G(a-)-2.86 E .557
(sic operations occur frequently and dominate the computations.)72 208 R
.557(Standardization of these operations may)6.057 F 2.755
(help deter additional non-portable e)72 224 R 2.755(xtensions to FOR)
-.165 F 2.755(TRAN such as CRA)-.66 F(Y')-1.155 E 5.505(sG)-.605 G
-1.221(AT)-5.505 G 2.755(HER and CDC')1.221 F(s)-.605 E(Q8GA)72 240 Q
3.51(THR. W)-1.221 F 3.51(es)-.88 G .76
(pecify here those basic operations, along with naming con)-3.51 F -.165
(ve)-.44 G .761(ntions and ar).165 F .761(gument lists.)-.198 F .315
(In [4] we present a model implementation of the Sparse BLAS in FOR)72
256 R .315(TRAN 77 \(e)-.66 F .314(xtended to include the)-.165 F
(COMPLEX*16 data type\), and also a set of rigorous test programs.)72
272 Q .514(Compressed Storage of Sparse V)72 304 R .514
(ectors In the original BLAS, a dense @n@ v)-1.221 F(ector)-.165 E 3.265
(,@)-.44 G .515(x@, is represented)-3.265 F .227
(by a triple \(N, X, INCX\), where X is a FOR)72 320 R .226
(TRAN array in which the components of @x@ are stored ac-)-.66 F
(cording to the inde)72 336 Q
(xing pattern: x sub i ~ roman { = ~ left {~)-.165 E
(lpile { X\(1+\(i-1\)*INCX\) abo)77.5 352 Q .33 -.165(ve X)-.165 H
(\(1-\(N-i\)*INCX\) }~~~~).165 E(lpile { if abo)77.5 368 Q .33 -.165
(ve i)-.165 H 2.75(f}).165 G(~~)-2.75 E .008(lpile { INCX ~ >= ~ 0 abo)
77.5 384 R .338 -.165(ve I)-.165 H .008
(NCX ~ < ~0. } } In sparse linear algebra, lar).165 F .009(ge sa)-.198 F
.009(vings in computer time and)-.22 F 1.292
(memory are realized by storing and operating on only the)72 400 R/F1 11
/Times-Italic@0 SF(inter)4.042 E(esting)-.407 E F0 1.292
(\(usually nonzero\) components of)4.042 F -.165(ve)72 416 S 4.096
(ctors. The).165 F 1.347(most common method for representing a sparse v)
4.096 F 1.347(ector uses a FOR)-.165 F 1.347(TRAN array just long)-.66 F
.339(enough to contain the interesting components, and a companion arra\
y of indices that maps the stored v)72 432 R(al-)-.275 E .502
(ues into their proper positions within the v)72 448 R(ector)-.165 E
6.002(.L)-.605 G .502
(etting NZ be the number of interesting components of)-6.002 F .229
(@x@, X be the FOR)72 464 R .229(TRAN array in which the)-.66 F 2.979
(ya)-.165 G .229(re stored, and INDX be the FOR)-2.979 F .228
(TRAN array of indices,)-.66 F 7.589(as)72 480 S 4.839(parse v)-7.589 F
4.839(ector is represented by the triple \(NZ, X, INDX\).)-.165 F -.165
(Fo)10.34 G 7.59(re).165 G 4.84(xample, if x ~ roman =)-7.755 F .439(~\
\(0,~4,~0,~0,~1,~0,~0,~0,~6,~0\) and if the interesting components of @\
x@ are the nonzero ones, then roman)72 496 R 2.75({r)72 512 S
(pile { NZ abo)-2.75 E .33 -.165(ve X a)-.165 H(bo).165 E .33 -.165
(ve I)-.165 H(NDX }).165 E 2.75(~c)88.5 528 S(pile { = abo)-2.75 E .33
-.165(ve = a)-.165 H(bo).165 E .33 -.165(ve = })-.165 H 2.95(~l)88.5 544
S .2(pile { 3, abo)-2.95 F .53 -.165(ve \()-.165 H .2(4,~1,~6\), abo)
.165 F .53 -.165(ve \()-.165 H .2(2,~5,~9\) } } so that x sub roman IND\
X\(i\) roman { ~=~ X\(i\). } As we).165 F(will sho)72 560 Q 2.75(wl)
-.275 G(ater)-2.75 E 2.75(,t)-.44 G
(he generality of INCX and an increment ar)-2.75 E
(gument for INDX is not needed.)-.198 E .593(Scope of the Sparse BLAS W)
72 592 R 3.342(ef)-.88 G(ollo)-3.342 E 3.342(wt)-.275 G .592
(he naming con)-3.342 F -.165(ve)-.44 G .592(ntion gi).165 F -.165(ve)
-.275 G 3.342(ni).165 G 3.342(n[)-3.342 G .592
(17]: a subprogram name consists)-3.342 F .418
(of a pre\214x that indicates the data type in)72 608 R -.22(vo)-.44 G
(lv).22 E .418
(ed, a root that describes the operation performed, and an op-)-.165 F
.758(tional suf)72 624 R .758(\214x that indicates a v)-.275 F .758
(ariant of the basic operation.)-.275 F .758
(The Sparse BLAS operations are de\214ned for)6.258 F(se)72 640 Q -.165
(ve)-.275 G .872(ral data types, so we represent the pre\214x generical\
ly with an underscore character).165 F 6.373(.U)-.605 G(sually)-6.373 E
3.623(,t)-.715 G .873(he un-)-3.623 F 1.416
(derscore character may be replaced with an)72 656 R 4.166(yo)-.165 G
4.166(ft)-4.166 G 1.416(he follo)-4.166 F 1.415
(wing type speci\214cation characters: center; l l.)-.275 F 29.884(SR)72
672 S .325(EAL D)-29.884 F .325(DOUBLE PRECISION C)28.058 F .326
(COMPLEX Z)28.663 F .326(COMPLEX*16 or DOUBLE)29.279 F .337
(COMPLEX \(if a)72 688 R -.275(va)-.22 G .337
(ilable\) Since a standard for a COMPLEX analog of SR).275 F 1.217 -.44
(OT w)-.44 H .336(as not speci\214ed in [8], we).33 F(pro)72 704 Q .161
(vide only real plane rotations; therefore, the underscore character in\
 _R)-.165 F -.44(OT)-.44 G 2.911(Im).44 G .162(ay be replaced only by S)
-2.911 F .88(or D.)72 720 R .88(Subprograms with Z pre\214x)6.38 F .88
(es may not be a)-.165 F -.275(va)-.22 G .879
(ilable on all machines since COMPLEX*16 is not a).275 F .603
(standard FOR)72 736 R .603(TRAN data type.)-.66 F(The)6.103 E 3.353(ya)
-.165 G .603
(re included in this standard for completeness and for their useful-)
-3.353 F .121(ness on those systems that support this data type.)72 752
R .121(An e)5.621 F .12(xamination of the original BLAS re)-.165 F -.165
(ve)-.275 G .12(als that some).165 F .219(of them do non-v)72 768 R .219
(ector operations.)-.165 F .22
(These BLAS are applicable to both dense and sparse linear algebra, so)
5.719 F .745(sparse v)72 784 R .745(ariants are not needed.)-.275 F .744
(The subprograms in this cate)6.245 F .744(gory are: center; l l.)-.165
F(_R)6.244 E -.44(OT)-.44 G 1.438(GS).44 G .744(et up Gi)-1.438 F -.165
(ve)-.275 G(ns).165 E 1.311(rotation _R)72 800 R -.44(OT)-.44 G 24.909
(MG Set).44 F 1.311(up modi\214ed Gi)4.061 F -.165(ve)-.275 G 1.312
(ns rotation Some original BLAS do the correct operation).165 F EP
%%Page: 8 8
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF .602(when presented with the compressed v)72 16
R .602(alue array)-.275 F 3.352(,X)-.715 G 3.352(,o)-3.352 G 3.352(fas)
-3.352 G .602(parse v)-3.352 F .602
(ector @x@ that is represented by \(NZ,)-.165 F 4.447(X, INDX\).)72 32 R
4.447(These BLAS also do not need special sparse v)9.947 F 7.197
(ariants. The)-.275 F 7.198(yi)-.165 G 4.448(nclude: center; l l.)-7.198
F 33.192(_NRM2 Euclidean)72 48 R .784(norm _ASUM)3.534 F .783
(Sum of absolute v)34.721 F .783(alues _SCAL)-.275 F .783
(Constant times a v)2.384 F(ector)-.165 E 26.482(I_AMAX Inde)72 64 R
3.093(xo)-.165 G 3.093<668c>-3.093 G .344
(rst component of maximum absolute v)-3.093 F .344(alue \(T)-.275 F
(echnically)-.77 E 3.094(,w)-.715 G .344(hen I_AMAX is ap-)-3.094 F .873
(plied to X, it returns the inde)72 80 R 3.622(xo)-.165 G 3.622(ft)
-3.622 G .872(he \214rst maximal element of X.)-3.622 F .872
(The corresponding element of INDX)6.372 F(gi)72 96 Q -.165(ve)-.275 G
3.23(st).165 G .48(he inde)-3.23 F 3.23(xo)-.165 G 3.23(ft)-3.23 G .48
(hat component of @x@.)-3.23 F .48(This might not be the inde)5.98 F
3.23(xo)-.165 G 3.23(ft)-3.23 G(he)-3.23 E/F1 11/Times-Italic@0 SF<8c72>
3.23 E(st)-.11 E F0 .48(maximal component)3.23 F .383
(of @x@ if the associated array of indices is not in increasing order)72
112 R 5.883(.T)-.605 G .382(his is probably of no signi\214cance.\))
-5.883 F(Finally)72 128 Q 2.913(,w)-.715 G 2.913(eo)-2.913 G .163
(mit sparse v)-2.913 F .163(ariants of se)-.275 F -.165(ve)-.275 G .163
(ral of the original BLAS because we percei).165 F .494 -.165(ve a l)
-.275 H .164(ack of usefulness.).165 F 2.387
(The operations thus omitted are: center; l l.)72 144 R 2.387(Sparse _R)
7.887 F -.44(OT)-.44 G 3.525(MA).44 G 2.387(pply sparse modi\214ed Gi)
-3.525 F -.165(ve)-.275 G 2.387(ns rotation).165 F .686(Sparse _SW)72
160 R 10.155(AP Sw)-1.32 F .686(ap sparse v)-.11 F .686
(ectors If these operations are implemented as an e)-.165 F .687
(xtension to the Sparse)-.165 F .325(BLAS, it is recommended that the)72
176 R 3.075(yb)-.165 G 3.075(en)-3.075 G .325(amed _R)-3.075 F -.44(OT)
-.44 G .325(MI and _SW).44 F .325(API and that the)-1.32 F 3.075(yc)
-.165 G .325(onform to the Sparse)-3.075 F 1.282(BLAS con)72 192 R -.165
(ve)-.44 G 4.032(ntions. The).165 F 1.283
(standard BLAS operations that e)4.033 F 1.283
(vidently require sparse e)-.275 F 1.283(xtensions are _DO)-.165 F -.814
(T,)-.44 G(_AXPY)72 208 Q 4.076(,a)-1.419 G 1.326(nd _R)-4.076 F -.44
(OT)-.44 G 6.826(.T)-.374 G 1.546 -.11(wo p)-7.706 H 1.326
(ractices are widely used to impro).11 F 1.656 -.165(ve t)-.165 H 1.326
(he ef).165 F(\214cienc)-.275 E 4.076(yo)-.165 G 4.076(ft)-4.076 G 1.325
(he sparse v)-4.076 F 1.325(ersions of)-.165 F .506
(these operations, and the)72 224 R 3.256(yb)-.165 G .506(oth are follo)
-3.256 F .506(wed in our e)-.275 F 3.256(xtensions. In)-.165 F .507
(them, the major goal is to perform the)3.256 F 1.101
(operations in O\(NZ\) w)72 240 R 1.101(ork, independent of @n@.)-.11 F
(Achie)6.6 E 1.1(ving this goal requires eliminating all searches)-.275
F .23(for interesting v)72 256 R .23(alues or matching indices.)-.275 F
.23(The \214rst idea, adopted by the authors of all the packages men-)
5.73 F .81(tioned abo)72 272 R -.165(ve)-.165 G 3.56(,a).165 G .81
(nd described in detail in [9], is to a)-3.56 F -.22(vo)-.22 G .81
(id binary operations between tw).22 F 3.559(oc)-.11 G(ompactly-stored)
-3.559 E .882(sparse v)72 288 R .882(ectors with dif)-.165 F .882
(ferent sparsity patterns.)-.275 F -.165(Fo)6.382 G 3.632(re).165 G .883
(xample, the dot product of tw)-3.797 F 3.633(os)-.11 G .883(uch v)
-3.633 F .883(ectors, \(NZ1,)-.165 F .765
(X1, INDX1\) and \(NZ2, X2, INDX2\) requires w)72 304 R .765
(ork at least of order NZ1 + NZ2 to determine which in-)-.11 F .687
(dices match.)72 320 R .688(The standard approach is to e)6.187 F .688
(xpand one v)-.165 F .688
(ector to its full, uncompressed form and perform)-.165 F 1.656
(the numerical operation between that uncompressed v)72 336 R 1.656
(ector and the remaining compressed v)-.165 F(ector)-.165 E 7.155(.A)
-.605 G(l-)-7.155 E .791(though the e)72 352 R .791
(xpansion requires O\(NZ\) w)-.165 F .792
(ork, and in some cases a corresponding compression may be re-)-.11 F
.945(quired, this o)72 368 R -.165(ve)-.165 G .945
(rhead typically is reco).165 F -.165(ve)-.165 G .945(red in full.).165
F .945(It is common for the uncompressed v)6.445 F .945(ector to be in-)
-.165 F -.22(vo)72 384 S(lv).22 E .586
(ed in a series of such binary operations, further amortizing the e)
-.165 F .587(xpansion and compression cost o)-.165 F -.165(ve)-.165 G(r)
.165 E(se)72 400 Q -.165(ve)-.275 G .431(ral v).165 F .431
(ector operations.)-.165 F .431(There also are situations, such as form\
ing the product of a sparse matrix and a)5.931 F -.165(ve)72 416 S(ctor)
.165 E 2.953(,i)-.44 G 2.953(nw)-2.953 G .204
(hich it is natural for one of the v)-2.953 F .204
(ector operands to be uncompressed.)-.165 F .204(The e)5.704 F .204
(xpansion and com-)-.165 F .631(pression operations mentioned abo)72 432
R .961 -.165(ve a)-.165 H .631(re tw).165 F 3.381(os)-.11 G .631
(ymmetric sparse e)-3.381 F .63(xtensions of the standard BLAS routine)
-.165 F(_COPY)72 448 Q 5.977(.T)-1.419 G .477(he \214rst e)-5.977 F .477
(xtension, _SCTR, e)-.165 F .477(xpands or)-.165 F F1(scatter)3.227 E(s)
-.11 E F0 3.227(as)3.227 G .477(parse compressed v)-3.227 F .477
(ector into full or uncom-)-.165 F .89(pressed form.)72 464 R .89
(The second e)6.39 F .89(xtension is the in)-.165 F -.165(ve)-.44 G .89
(rse operation, _GTHR, which compresses or).165 F F1(gather)3.639 E(s)
-.11 E F0(the)3.639 E -.275(va)72 480 S .037
(lues from the uncompressed form into the compressed form.).275 F .037
(These sparse v)5.537 F .038(ariants of _COPY complete)-.275 F .533
(our e)72 496 R .533(xtension to the BLAS.)-.165 F .532
(The second idea that contrib)6.032 F .532(utes greatly to the ef)-.22 F
(\214cienc)-.275 E 3.282(yo)-.165 G 3.282(fs)-3.282 G .532
(parse linear al-)-3.282 F .193(gebra computations is separating the de\
termination of the nonzero structure of the sparse v)72 512 R .194
(ectors from the)-.165 F 1.412(numerical computation.)72 528 R 1.412
(Ignoring fortuitous cancellation, performing an elementary ro)6.912 F
4.161(wo)-.275 G 1.411(peration or a)-4.161 F(Gi)72 544 Q -.165(ve)-.275
G .895(ns rotation on tw).165 F 3.645(os)-.11 G .896(parse v)-3.645 F
.896(ectors results in output v)-.165 F .896(ector\(s\) ha)-.165 F .896
(ving nonzeros where)-.22 F -.165(ve)-.275 G 3.646(re).165 G .896
(ither of the)-3.646 F .566(inputs had nonzeros.)72 560 R .566
(While it is possible to determine the locations of the mer)6.066 F .565
(ged nonzero entries at the)-.198 F .813(same time as their v)72 576 R
.814(alues are computed, it typically is more ef)-.275 F .814
(\214cient to perform this symbolic operation)-.275 F(independently)72
592 Q 6.125(.T)-.715 G .625(his separation allo)-6.125 F .625
(ws the symbolic determination of the nonzero structure to e)-.275 F
.624(xploit the)-.165 F .307
(sparsity characteristics of the particular algorithm being realized.)72
608 R -.165(Fo)5.807 G 3.057(re).165 G .307
(xample, chapter 5 of [11] discuss-)-3.222 F .221(es a number of repres\
entations for the process of symmetric Gaussian elimination that permit\
 the symbol-)72 624 R .393(ic operations to be performed ef)72 640 R
.393(\214ciently in a form that is much more compact than the sparse re\
presenta-)-.275 F 1.052(tion of the numerical entries.)72 656 R 1.052
(In this and se)6.552 F -.165(ve)-.275 G 1.051
(ral other important applications, the indices can be deter).165 F(-)
-.22 E .986(mined without kno)72 672 R .986(wing the v)-.275 F .986
(alues of the nonzero entries, b)-.275 F .987(ut only that the)-.22 F
3.737(ya)-.165 G .987(re nonzero.)-3.737 F .987(This leads to)6.487 F
.461(dramatic sa)72 688 R .461(vings in computation when se)-.22 F -.165
(ve)-.275 G .461(ral problems with common sparsity patterns, b).165 F
.46(ut dif)-.22 F .46(ferent nu-)-.275 F .706(merical v)72 704 R .706
(alues, are solv)-.275 F 3.456(ed. Only)-.165 F .707
(the numerical process, not the symbolic operations, need be performed)
3.457 F .605(more than once.)72 720 R .605
(Chapters 5 and 9 of [9] point out the sa)6.105 F .604
(vings to be found by the separation of the sym-)-.22 F .06
(bolic and numerical processes, e)72 736 R -.165(ve)-.275 G 2.81(ni).165
G 2.81(nt)-2.81 G .061
(he case of sparse Gaussian elimination with partial pi)-2.81 F -.22(vo)
-.275 G .061(ting where).22 F .566(the actual numerical entries must af)
72 752 R .566(fect the algorithm.)-.275 F .565
(The result of making the symbolic and numerical)6.066 F .348(algorithm\
s distinct is that the numerical operations are implemented using stati\
c data structures.)72 768 R(Because)5.849 E .483
(the data structures are kno)72 784 R .482(wn in adv)-.275 F .482
(ance of the numerical operations, the numerical code can be simpler)
-.275 F(,)-.44 E -.11(fa)72 800 S(ster).11 E 3.449(,a)-.44 G .699
(nd more amenable to v)-3.449 F .699(ector or parallel processing.)-.165
F .7(As observ)6.2 F .7(ed in [9], the o)-.165 F -.165(ve)-.165 G .7
(rhead of mer).165 F(ging)-.198 E EP
%%Page: 9 9
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 1.923(sparse v)72 16 R 1.923
(ectors is reduced to `)-.165 F 1.923(`the dif)-.814 F 1.922
(ference between the use of direct and indirect addressing.)-.275 F 6.3
-.814('' T)-.77 H(he).814 E .025
(Sparse BLAS are designed for use in such an en)72 32 R .026
(vironment, and therefore do not change the data structures)-.44 F .954
(represented by NZ and INDX.)72 48 R .954(It is assumed that these data\
 structures correctly mirror the sparsity that)6.454 F -2.42 -.275(ev o)
72 64 T(lv).275 E 3.227(es. No)-.165 F .477(determination is e)3.227 F
-.165(ve)-.275 G 3.227(rm).165 G .477(ade in these codes that all the i\
nteresting entries are processed or al-)-3.227 F(located storage.)72 80
Q(That is the responsibility of the symbolic analysis.)5.5 E .587
(Sparse BLAS Con)72 112 R -.165(ve)-.44 G .587(ntions Storage Another c\
haracteristic of all the packages mentioned in \2471 is that the).165 F
.398(full, uncompressed v)72 128 R .398(ector is stored contiguously)
-.165 F 3.148(,e)-.715 G .398(.g., with the BLAS v)-3.148 F .399
(ector descriptor \(N, Y)-.165 F 3.149(,1)-1.419 G 3.149(\). This)-3.149
F(is)3.149 E .649(the form we ha)72 144 R .979 -.165(ve a)-.22 H 3.399
(dopted. Because).165 F .649
(contiguous storage of Y is what is used in practice, INCY has been)
3.399 F 1.055(restricted to unity)72 160 R 6.555(.T)-.715 G 1.055
(he absence of a non-unit INCY is unlik)-6.555 F 1.055(ely to cause an)
-.11 F 3.805(yt)-.165 G 1.055(rouble, since the Y array)-3.805 F 1.119
(usually is a w)72 176 R 1.119(ork array whose or)-.11 F -.055(ga)-.198
G 1.119(nization is arbitrary).055 F 6.619(.F)-.715 G 1.119
(urthermore, it is not possible to allo)-6.619 F 3.869(wf)-.275 G 1.119
(or the)-3.869 F(backw)72 192 Q .64(ard inde)-.11 F .641
(xing through Y that w)-.165 F .641(ould be required by INCY)-.11 F/F1
11/Symbol SF<a3>3.391 E F0 3.391(0w)3.391 G .641(ithout kno)-3.391 F
.641(wing N, e)-.275 F -.165(ve)-.275 G 3.391(nt).165 G .641(hough the)
-3.391 F .133
(implementations of the operations are otherwise independent of N.)72
208 R .132(Thus, INCY is omitted from the ar)5.632 F(gu-)-.198 E .09
(ment list.)72 224 R(Similarly)5.59 E 2.841(,n)-.715 G 2.841(oi)-2.841 G
.091(ncrement is required for X or INDX.)-2.841 F .091
(In the speci\214cations belo)5.591 F 1.521 -.715(w, t)-.275 H .091
(he X ar).715 F(gument)-.198 E .782(represents the compressed v)72 240 R
.782(alue array of a sparse v)-.275 F .782
(ector in compressed storage form.)-.165 F .782(INDX follo)6.282 F .782
(ws X,)-.275 F .761(replacing INCX of the original BLAS.)72 256 R .761
(There are no restrictions on the order of the v)6.261 F .762
(alues in the INDX)-.275 F(array)72 272 Q 5.544(.H)-.715 G -.275(ow)
-5.544 G -2.365 -.275(ev e).275 H .924 -.44(r, t).275 H .044
(hose subprograms where Y is an output ar).44 F .043(gument will gi)
-.198 F .373 -.165(ve c)-.275 H .043(orrect and consistent results).165
F .653(with v)72 288 R .653
(ector or parallel processing only when the v)-.165 F .653
(alues in INDX are distinct.)-.275 F .654(In the usual sparse matrix)
6.153 F .125(applications, distinct indices are the norm.)72 304 R .124
(Because our goal is ef)5.625 F(\214cienc)-.275 E 1.554 -.715(y, e)-.165
H .124(specially on high performance).715 F .065
(computers, together with portability)72 320 R(,)-.715 E/F2 11
/Times-Italic@0 SF .065(we impose the r)2.815 F .065
(estriction that the values in)-.407 F F0(INDX)2.815 E F2 .065
(be distinct when)2.815 F F0(Y)2.815 E F2(is an output ar)72 336 Q
(gument)-.407 E F0(\()2.75 E F2(that is, in subr)A(outines)-.495 E F0
(_AXPYI)2.75 E F2(,)A F0(_R)2.75 E -.44(OT)-.44 G(I).44 E F2(,)A F0
(_SCTR)2.75 E F2(and)2.75 E F0(_GTHRZ\).)2.75 E 3.084
(Error Handling The Sparse BLAS do no e)72 368 R 3.083
(xplicit error checking or reporting.)-.165 F -1.221(Va)8.583 G 3.083
(lues of @roman)1.221 F .237(NZ~<=~0@ are le)72 384 R -.055(ga)-.165 G
.238(l, and the routines do `).055 F .238(`the right thing')-.814 F .238
('; i.e., the dot product routines return zero func-)-.814 F .043
(tion v)72 400 R .043(alues and all of the routines mak)-.275 F 2.793
(en)-.11 G 2.793(or)-2.793 G .043(eferences to their v)-2.793 F .043
(ector ar)-.165 F 2.793(guments. Thus,)-.198 F .043
(special case testing)2.793 F .323
(need not be performed in a calling program.)72 416 R .323
(As mentioned abo)5.823 F -.165(ve)-.165 G 3.074(,c).165 G .324
(ertain routines require that the v)-3.074 F(alues)-.275 E .961
(in INDX be distinct.)72 432 R .961(Checking this condition w)6.461 F
.96(ould ha)-.11 F 1.29 -.165(ve g)-.22 H .96(reater comple).165 F .96
(xity than the numerical opera-)-.165 F .003(tions, since testing a lis\
t for duplicates requires more than O\(NZ\) w)72 448 R .004
(ork if the v)-.11 F .004(alues are not sorted.)-.275 F(There-)5.504 E
.332(fore, compliance with the restriction is not v)72 464 R .331
(eri\214ed and violating it may yield incorrect or inconsistent re-)
-.165 F .756(sults without w)72 480 R 3.506(arning. Naming)-.11 F(Con)
3.506 E -.165(ve)-.44 G .757(ntion If a Sparse BLAS routine is an e).165
F .757(xtension of a dense BLAS,)-.165 F .759
(the subprogram name is formed by appending a suf)72 496 R .759
(\214x character)-.275 F 3.509(,I)-.44 G 3.508(,s)-3.509 G .758
(tanding for `)-3.508 F(`inde)-.814 E -.165(xe)-.165 G(d').165 E .758
(', to the dense)-.814 F 2.982(name. Ar)72 512 R .232
(guments justifying this minor e)-.198 F .232
(xtension of the naming con)-.165 F -.165(ve)-.44 G .232(ntion gi).165 F
-.165(ve)-.275 G 2.982(ni).165 G 2.982(n[)-2.982 G .232
(17] are presented in)-2.982 F 3.505([2]. F)72 528 R(ortunately)-.165 E
3.505(,c)-.715 G .755(urrent BLAS needing sparse v)-3.505 F .755
(ariants ha)-.275 F 1.085 -.165(ve a)-.22 H 3.504(tm).165 G .754
(ost \214v)-3.504 F 3.504(ec)-.165 G .754
(haracters in their names, so a)-3.504 F .384(one-character suf)72 544 R
.384(\214x can be appended to e)-.275 F -.165(ve)-.275 G .385(ry one.)
.165 F .385(If a Sparse BLAS is not a direct e)5.885 F .385
(xtension of a dense)-.165 F .095(BLAS, the root name is a ne)72 560 R
1.525 -.715(w, m)-.275 H .094(nemonic, four character name, and the suf)
.715 F .094(\214x is reserv)-.275 F .094(ed to describe v)-.165 F(ari-)
-.275 E 3.6(ants. _GTHR)72 576 R .85(and _SCTR are ne)3.6 F 3.6(wr)-.275
G .851(oot names, and Z is a v)-3.6 F .851(ariant descriptor for _GTHR.)
-.275 F .851(The a)6.351 F -.275(va)-.22 G(ilable).275 E .265
(combinations are listed in T)72 592 R .265(able I.)-.88 F .265
(The collection of routines can be thought of as being di)5.765 F .264
(vided into four)-.275 F .355
(separate parts, REAL, DOUBLE PRECISION, COMPLEX, and COMPLEX*16.)72 608
R .356(Except for the routines)5.856 F(that use COMPLEX*16 v)72 624 Q
(ariables, the routines can be written in standard ANSI FOR)-.275 E
(TRAN 77.)-.66 E -.88(Ta)133.971 656 S(ble I.).88 E
(Summary of Functions and Names of the Sparse BLAS Subprograms)5.5 E/F3
10/Times-Roman@0 SF -.15(ex)72 669 S(pand, tab\(/\); l c c s s s s s s \
s l c c s s s s s s s l a a0e a0e a0e a0e a0e a0e a0e a0e.).15 E(_)5 E
(Function/Root/Pre\214x and suf)77 682 Q .833(\214x /of)-.25 F
(name/of name _)2.5 E(Dot product/-DO)77 695 Q -.92(T-)-.4 G
(/S-I/D-I/C-UI/Z-UI/C-CI/Z-CI).92 E(Scalar times a v)77 708 Q
(ector/-AXPY)-.15 E(-/S-I/D-I/C-I/Z-I)-1.11 E(added to a v)87 721 Q
(ector)-.15 E(Apply Gi)77 734 Q -.15(ve)-.25 G(ns rotation/-R).15 E -.4
(OT)-.4 G(-/S-I/D-I)-.52 E(Gather)77 747 Q/F4 10/Times-Italic@0 SF(y)2.5
E F3(into)2.5 E F4(x)2.5 E F3(/-GTHR-/S-/D-/C-/Z-/S-Z/D-Z/C-Z/Z-Z)A
(Scatter)77 763 Q F4(x)2.5 E F3(into)2.5 E F4(y)2.5 E F3
(/-SCTR/S-/D-/C-/Z- _)A F0 .866(Speci\214cations for the Sparse BLAS T)
72 795 R .865(ype and dimension declarations for v)-.88 F .865
(ariables occurring in the sub-)-.275 F EP
%%Page: 10 10
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF .419(routine speci\214cations are as follo)72 16
R .419(ws: center; c l1 l.)-.275 F 19.192(all: INTEGER)5.92 F .42
(NZ, INDX\(NZ\) S:)28.123 F(RE-)26.826 E 7.84(AL A,)72 32 R .561
(C, S, W)3.311 F 3.311(,X)-1.012 G .56(\(NZ\), Y\(*\) D:)-3.311 F .56
(DOUBLE PRECISION)25 F .56(A, C, S, W)7.118 F 3.31(,X)-1.012 G .56
(\(NZ\), Y\(*\) C:)-3.31 F(COM-)25.605 E 21.26(PLEX A,)72 48 R 3.842
-1.012(W, X)4.568 H 1.818(\(NZ\), Y\(*\) Z:)1.012 F 4.76(COMPLEX*16 A,)
26.221 F 3.842 -1.012(W, X)4.568 H 1.818(\(NZ\), Y\(*\) T)1.012 F 1.819
(ype declarations for the)-.88 F 8.088(function names are as follo)72 64
R 8.087(ws: center; c l1 l.)-.275 F 24.076(S: REAL)13.587 F(SDO)7.279 E
8.087(TI D:)-.44 F(DOUBLE)25 E 1.058(PRECISION DDO)72 80 R 7.446(TI C:)
-.44 F 16.692(COMPLEX CDO)25.605 F 7.447(TCI, CDO)-.44 F 7.447(TUI Z:)
-.44 F .192(COMPLEX*16 ZDO)26.221 F(TCI,)-.44 E(ZDO)72 96 Q .496
(TUI NZ, A, C, S, and INDX are ne)-.44 F -.165(ve)-.275 G 3.245(rc).165
G .495(hanged by the Sparse BLAS.)-3.245 F .495
(In addition, X is not changed)5.995 F .854(by _DO)72 112 R -1.012(T-)
-.44 G .854(I, _AXPYI, or _SCTR, and Y is not changed by _DO)1.012 F
-1.012(T-)-.44 G 3.605(Io)1.012 G 3.605(r_)-3.605 G 3.605(GTHR. Only)
-3.605 F .855(the elements of Y)3.605 F .574
(whose indices appear in INDX are referenced or modi\214ed.)72 128 R
.573(In the descriptions the initial character S can)6.074 F .119
(be replaced by D to obtain the description of the double precision v)72
144 R .119(ersion; similarly an initial C can be re-)-.165 F .473
(placed by Z.)72 160 R(Finally)5.973 E 3.223(,f)-.715 G .473(or con)
-3.223 F -.165(ve)-.44 G .472(nience in the mathematical descriptions o\
f the operations, we assume that).165 F(an)72 176 Q 2.801(yc)-.165 G
.052(omponent of @x@ whose inde)-2.801 F 2.802(xi)-.165 G 2.802(sn)
-2.802 G .052(ot listed in INDX is zero.)-2.802 F .052(The FOR)5.552 F
.052(TRAN descriptions properly)-.66 F .266
(describe the operations performed e)72 192 R -.165(ve)-.275 G 3.015(nw)
.165 G(hen)-3.015 E/F1 11/Times-Italic@0 SF(uninter)3.015 E(esting)-.407
E F0 .265(means something other than)3.015 F F1(zer)3.015 E(o)-.495 E F0
5.765(.S)C .265(parse Dot)-5.765 F(Product W = SDO)72 208 Q
(TI \(NZ, X,INDX, Y\))-.44 E 2.75(W=D)72 224 S(DO)-2.75 E
(TI \(NZ, X,INDX, Y\))-.44 E 2.75(W=C)72 240 S(DO)-2.75 E
(TCI \(NZ, X,INDX, Y\))-.44 E(Conjug)11 E(ated)-.055 E 2.75(W=C)72 256 S
(DO)-2.75 E(TUI \(NZ, X,INDX, Y\))-.44 E(Unconjug)11 E(ated)-.055 E 2.75
(W=Z)72 272 S(DO)-2.75 E(TCI \(NZ, X,INDX, Y\))-.44 E(Conjug)11 E(ated)
-.055 E 3.077(W=Z)72 288 S(DO)-3.077 E .327(TUI \(NZ, X,INDX, Y\))-.44 F
(Unconjug)11.327 E .327(ated SDO)-.055 F .327(TI, DDO)-.44 F .327
(TI, CDO)-.44 F .328(TUI and ZDO)-.44 F .328(TUI compute w ~ :)-.44 F
(roman = ~ roman sum from {i roman = 1} to n x sub i y sub i)72 304 Q
.796(roman {~=~ sum from I=1 to NZ X\(I\)*Y\(INDX\(I\)\)} while CDO)88.5
320 R .796(TCI and ZDO)-.44 F .795(TCI compute w ~ : ro-)-.44 F
(man = ~ roman sum from {i roman = 1} to n x bar sub i y sub i)72 336 Q
.59(roman {~=~ sum from I=1 to NZ CONJG\(X\(I\)\)*Y\(INDX\(I\)\)} where\
 @x bar@ is the comple)88.5 352 R 3.341(xc)-.165 G(onju-)-3.341 E -.055
(ga)72 368 S(te of @x@.).055 E(Sparse Elementary V)5.5 E
(ector Operation CALL SAXPYI \(NZ, A, X,INDX, Y\))-1.221 E(CALL D)72 384
Q(AXPYI \(NZ, A, X,INDX, Y\))-.44 E(CALL CAXPYI \(NZ, A, X,INDX, Y\))72
400 Q .296(CALL ZAXPYI \(NZ, A, X,INDX, Y\) _AXPYI performs the operati\
on y ~ : roman = ~ ax ~ + ~ y which is)72 416 R .13(the FOR)72 432 R
.131(TRAN 77 operation roman { Y\(INDX\(I\)\) ~=~ A*X\(I\) ~ + ~ Y\(IND\
X\(I\)\) ~~~~~~for~I ~=~ 1,~...,~NZ }.)-.66 F 1.438(The v)72 448 R 1.437
(alues in INDX must be distinct to allo)-.275 F 4.187(wc)-.275 G 1.437
(onsistent v)-4.187 F 1.437(ector or parallel e)-.165 F -.165(xe)-.165 G
4.187(cution. Apply).165 F 4.187(aS)4.187 G(parse)-4.187 E
(Plane Rotation \(REAL and DOUBLE PRECISION only\) CALL SR)72 464 Q -.44
(OT)-.44 G 2.75(I\().44 G(NZ, X,INDX, Y)-2.75 E 2.75(,C)-1.419 G(,S\))
-2.75 E .651(CALL DR)72 480 R -.44(OT)-.44 G 3.401(I\().44 G .652
(NZ, X,INDX, Y)-3.401 F 3.402(,C)-1.419 G .652(,S\) _R)-3.402 F -.44(OT)
-.44 G 3.402(Ia).44 G .652(pplies a Gi)-3.402 F -.165(ve)-.275 G .652
(ns rotation to a sparse v).165 F .652(ector stored in com-)-.165 F .094
(pressed form and another v)72 496 R .094
(ector stored in full storage form.)-.165 F .093
(If all nonzero components of @y@ appear in)5.593 F(INDX, then _R)72 512
Q -.44(OT)-.44 G 2.75(Ic).44 G(omputes)-2.75 E EP
%%Page: 11 11
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF(left [ lpile { x sub i abo)72 16 Q .33 -.165
(ve y s)-.165 H(ub i } right ] ~ up 30 {: roman =}).165 E 2.75(~l)80.25
32 S(eft [ rpile { c abo)-2.75 E .33 -.165(ve -)-.165 H 2.75(s}~).165 G
(~~ rpile { s abo)-2.75 E .33 -.165(ve c } ~ r)-.165 H(ight ] ~ up 50 .)
.165 E 2.75(~l)80.25 48 S(eft [ lpile { x sub i abo)-2.75 E .33 -.165
(ve y s)-.165 H(ub i } right ]).165 E .136
(~~~~for~i~ roman = ~1,~...,~n.)80.25 64 R .137
(Whether or not all nonzero components of @y@ appear in INDX, the oper)
5.636 F(-)-.22 E 1.189(ation is described by the follo)72 80 R 1.188
(wing FOR)-.275 F 1.188(TRAN: roman { left "" lpile { TEMP abo)-.66 F
1.518 -.165(ve X)-.165 H 1.188(\(I\) abo).165 F 1.518 -.165(ve Y)-.165 H
(\(IN-).165 E(DX\(I\)\) } ~)72 96 Q(cpile { = abo)94 112 Q .33 -.165
(ve = a)-.165 H(bo).165 E .33 -.165(ve = } ~)-.165 H
(rpile { X\(I\)~~~~~~~^ abo)94 128 Q .33 -.165(ve C)-.165 H(*TEMP abo)
.165 E .33 -.165(ve b)-.165 H(old - S*TEMP } ~).165 E(cpile { ~ abo)94
144 Q .33 -.165(ve + a)-.165 H(bo).165 E .33 -.165(ve + } ~)-.165 H
(rpile { ~ abo)94 160 Q .33 -.165(ve S)-.165 H(*Y\(INDX\(I\)\) abo).165
E .33 -.165(ve C)-.165 H(*Y\(INDX\(I\)\) }).165 E .397
(~~~ right } ~~~for~I ~=~ 1,~...,~NZ. } The v)94 176 R .397
(alues in INDX must be distinct to allo)-.275 F 3.147(wc)-.275 G .397
(onsistent v)-3.147 F .397(ector or)-.165 F .76(parallel e)72 192 R
-.165(xe)-.165 G 3.51(cution. Since).165 F 3.51(as)3.51 G .759
(tandard for a COMPLEX analog of _R)-3.51 F 1.639 -.44(OT w)-.44 H .759
(as not speci\214ed in [8], we pro-).33 F
(vide only real plane rotations.)72 208 Q(Gather a V)5.5 E
(ector into Compressed F)-1.221 E(orm CALL SGTHR \(NZ, Y)-.165 E 2.75
(,X)-1.419 G(,INDX\))-2.75 E(CALL DGTHR \(NZ, Y)72 224 Q 2.75(,X)-1.419
G(,INDX\))-2.75 E(CALL CGTHR \(NZ, Y)72 240 Q 2.75(,X)-1.419 G(,INDX\))
-2.75 E .634(CALL ZGTHR \(NZ, Y)72 256 R 3.384(,X)-1.419 G .634
(,INDX\) Gather \(cop)-3.384 F .634
(y\) the speci\214ed components of a v)-.11 F .635
(ector stored in full stor)-.165 F(-)-.22 E .6
(age form into compressed form.)72 272 R .599
(If all nonzero components of @y@ appear in INDX, then _GTHR per)6.099 F
(-)-.22 E .927(forms x ~ : roman = ~ y which is symbolized by roman { X\
\(I\) ~=~ Y\(INDX\(I\)\) ~~~~~~for~I~=~1,~...,~NZ. })72 288 R
(Gather a V)72 304 Q(ector into Compressed F)-1.221 E
(orm and Zero the Full-form V)-.165 E(ector CALL SGTHRZ \(NZ, Y)-1.221 E
2.75(,X)-1.419 G(,INDX\))-2.75 E(CALL DGTHRZ \(NZ, Y)72 320 Q 2.75(,X)
-1.419 G(,INDX\))-2.75 E(CALL CGTHRZ \(NZ, Y)72 336 Q 2.75(,X)-1.419 G
(,INDX\))-2.75 E .215(CALL ZGTHRZ \(NZ, Y)72 352 R 2.964(,X)-1.419 G
.214(,INDX\) Gather \(cop)-2.964 F .214
(y\) the speci\214ed components of a v)-.11 F .214
(ector stored in full stor)-.165 F(-)-.22 E .548
(age form into compressed form and zero the g)72 368 R .548
(athered components of the full-form v)-.055 F(ector)-.165 E 6.049(.I)
-.605 G 3.299(fa)-6.049 G .549(ll nonzero)-3.299 F .319(components of @\
y@ appear in INDX, a common occurrence in the use of a single uncompres\
sed scratch)72 384 R -.165(ve)72 400 S(ctor).165 E 3.085(,t)-.44 G .335
(hen _GTHRZ simultaneously performs left { ~ lpile {x ~ : roman = ~ y a\
bo)-3.085 F .666 -.165(ve y ~ : r)-.165 H .336(oman = ~ 0 . }).165 F
(This is speci\214ed by the follo)72 416 Q
(wing: roman { left "" lpile { X\(I\) abo)-.275 E .33 -.165(ve Y)-.165 H
(\(INDX\(I\)\) } ~).165 E(lpile { = abo)94 432 Q .33 -.165(ve = } ~)
-.165 H(lpile { Y\(INDX\(I\)\) abo)94 448 Q .33 -.165(ve 0)-.165 H(.0 })
.165 E .574(~~~ right } ~~~for~I~=~1,~...,~NZ. } In typical use of full\
-form temporary v)94 464 R .574(ectors, the v)-.165 F .573
(ector is initially)-.165 F .732(set to zero.)72 480 R .733
(_SCTR is used to initialize the interesting entries for processing.)
6.232 F .733(At the completion of pro-)6.233 F .436
(cessing, _GTHRZ is used to mo)72 496 R .766 -.165(ve t)-.165 H .436
(he interesting v).165 F .435
(alues back into the sparse data structures and simulta-)-.275 F .455
(neously reset the full-form v)72 512 R .455
(ector to its initial, zero, state for later use.)-.165 F .456(The v)
5.955 F .456(alues in INDX must be dis-)-.275 F .402(tinct to allo)72
528 R 3.151(wc)-.275 G .401(onsistent v)-3.151 F .401
(ector or parallel e)-.165 F -.165(xe)-.165 G .401
(cution since otherwise the indeterminac).165 F 3.151(yi)-.165 G 3.151
(nt)-3.151 G .401(he order of ac-)-3.151 F 1.724
(cessing elements of Y and resetting them to zero mak)72 544 R 1.724
(es X ambiguous.)-.11 F 1.724(Scatter a Sparse V)7.224 F 1.724
(ector from)-1.221 F(Compressed F)72 560 Q
(orm CALL SSCTR \(NZ, X,INDX, Y\))-.165 E(CALL DSCTR \(NZ, X,INDX, Y\))
72 576 Q(CALL CSCTR \(NZ, X,INDX, Y\))72 592 Q .547
(CALL ZSCTR \(NZ, X,INDX, Y\) Scatter \(cop)72 608 R .547
(y\) the components of a sparse v)-.11 F .546
(ector stored in compressed)-.165 F .459
(form into speci\214ed components of a v)72 624 R .459
(ector in full storage form.)-.165 F .459
(If @y@ is initially the zero v)5.959 F(ector)-.165 E 3.21(,t)-.44 G
(hen)-3.21 E .841(_SCTR performs y ~ : roman = ~ x .)72 640 R .841
(which is represented by the follo)6.341 F .841(wing FOR)-.275 F .84
(TRAN: roman { Y\(IN-)-.66 F .641
(DX\(I\)\) ~=~ X\(I\) ~~~~~~for~I~=~1,~...,~NZ. } The v)72 656 R .641
(alues in INDX must be distinct to allo)-.275 F 3.392(wc)-.275 G .642
(onsistent v)-3.392 F(ector)-.165 E(or parallel e)72 672 Q -.165(xe)
-.165 G(cution.).165 E(Ackno)72 704 Q .427
(wledgements A draft of this proposal w)-.275 F .427
(as discussed at the P)-.11 F(arv)-.165 E .427(ec IV W)-.165 F .427
(orkshop or)-.88 F -.055(ga)-.198 G .427(nized by John).055 F 2.98
(Rice at Purdue Uni)72 720 R -.165(ve)-.275 G 2.98
(rsity on October 29-30, 1984.).165 F(Subsequently)8.481 E 5.731(,ar)
-.715 G -.275(ev)-5.731 G 2.981(ised draft appeared in the).275 F 2.1
(SIGNUM Ne)72 736 R 2.1(wsletter [3], and w)-.275 F 2.1
(as discussed at the SIAM Conference on Applied Linear Algebra in)-.11 F
1.128(Raleigh, April 29-May 2, 1985.)72 752 R 2.888 -.88(We t)6.628 H
1.129(hank the participants at the w).88 F 1.129
(orkshop and meeting for their com-)-.11 F
(ments, discussions, and encouragement.)72 768 Q .944
(References C.C. Ashcraft, R.G. Grimes, J.G. Le)72 800 R .944(wis, B.W)
-.275 F 3.694(.P)-1.012 G -.165(ey)-3.694 G .944(ton and H.D. Simon, `)
.165 F .944(`Progress in Sparse)-.814 F EP
%%Page: 12 12
%%BeginPageSetup
BP
%%EndPageSetup
/F0 11/Times-Roman@0 SF 1.297(Matrix Methods for Lar)72 16 R 1.297
(ge Linear Systems on V)-.198 F 1.298(ector Supercomputers')-1.221 F
1.298(', International Journal of Super)-.814 F(-)-.22 E .237
(computer Applications 1,)72 32 R 2.987(4\()5.737 G(December)-2.987 E
2.987(,1)-.44 G .237(987\), pp. 10-30.)-2.987 F .237
(D.S. Dodson and J.G. Le)5.737 F .236(wis, `)-.275 F .236
(`Issues Relating)-.814 F 1.333
(to Extension of the Basic Linear Algebra Subprograms')72 48 R(',)-.814
E/F1 11/Times-Italic@0 SF -.33(AC)4.084 G 4.084(MS).33 G 1.334(IGNUM Ne)
-4.084 F 1.334(wsletter 20,)-.165 F F0 1.334(1, \(1985\), pp.)4.084 F
3.501(19-22. D.S.)72 64 R .751(Dodson and J.G. Le)3.501 F .751(wis, `)
-.275 F .751
(`Proposed Sparse Extensions to the Basic Linear Algebra Subpro-)-.814 F
(grams')72 80 Q(',)-.814 E F1 -.33(AC)3.075 G 3.075(MS).33 G .325
(IGNUM Ne)-3.075 F .325(wsletter 20,)-.165 F F0 .325
(1, \(1985\), pp. 22-25.)3.075 F .325
(D.S. Dodson, R.G. Grimes, and J.G. Le)5.825 F(wis,)-.275 E -.814(``)72
96 S .601(Model Implementation and T).814 F .601(est P)-.77 F .6
(ackage for the Sparse Basic Linear Algebra Subprograms,)-.165 F -.814
('')-.77 G F1 .6(this jour)4.164 F(-)-.22 E(nal.)72 112 Q F0 .872
(J.J. Dong)6.372 F .872(arra, J.R. Bunch, C.B. Moler)-.055 F 3.622(,a)
-.44 G .873(nd G.W)-3.622 F 3.623(.S)-1.012 G(te)-3.623 E -.11(wa)-.275
G(rt,).11 E F1(LINP)3.623 E -.33(AC)-.99 G 3.623(KU).33 G(ser)-3.623 E
.873(s' Guide)-.11 F(,)-.11 E F0 .873(SIAM Publica-)3.623 F .214
(tions, Philadelphia, 1979.)72 128 R .214(J.J. Dong)5.714 F .214
(arra, J. Du Croz, S. Hammarling, and R.J. Hanson, `)-.055 F -.88(`A)
-.814 G 2.963(nE).88 G .213(xtended Set)-2.963 F .815(of FOR)72 144 R
.815(TRAN Basic Linear Algebra Subprograms,)-.66 F -.814('')-.77 G F1
-.33(AC)4.379 G 3.565(MT).33 G -.165(ra)-4.17 G .816
(nsactions on Mathematical Softwar).165 F 3.566(e1)-.407 G(4,)-3.566 E
F0(1)3.566 E .4(\(March, 1988\), pp. 1-17.)72 160 R .4(J.J. Dong)5.9 F
.399(arra, J. Du Croz, I.S. Duf)-.055 F .399(f, and S. Hammarling, `)
-.275 F 2.159 -.88(`A P)-.814 H .399(roposal for a Set).88 F .776(of Le)
72 176 R -.165(ve)-.275 G 3.526(l3B).165 G .776
(asic Linear Algebra Subprograms,)-3.526 F -.814('')-.77 G F1 -.33(AC)
4.34 G 3.526(MS).33 G .776(IGNUM Ne)-3.526 F .776(wsletter 22,)-.165 F
F0 .777(3, \(1987\), pp. 2-14.)3.526 F(I.S.)6.277 E(Duf)72 192 Q .135
(f, `)-.275 F .134(`MA28: A Set of FOR)-.814 F .134
(TRAN Subroutines for Sparse Unsymmetric Linear Systems,)-.66 F 1.762
-.814('' A)-.77 H .134(ERE Report).814 F .048
(R.8730, HMSO, London, \(1971\).)72 208 R .048(I.S. Duf)5.548 F .048
(f, A.M. Erisman, and J.K. Reid,)-.275 F F1(Dir)2.798 E .048
(ect Methods for Spar)-.407 F .048(se Ma-)-.11 F(trices,)72 224 Q F0
.778(Oxford Uni)3.528 F -.165(ve)-.275 G .777(rsity Press, \(1986\).)
.165 F .777(S.C. Eisenstat, M.C. Gursk)6.277 F 2.207 -.715(y, M)-.165 H
.777(.H. Schultz, and A.H. Sherman,).715 F -.814(``)72 240 S -1.1(Ya)
.814 G 2.837(le Sparse Matrix P)1.1 F 2.837(ackage I.)-.165 F 2.837
(The Symmetric Codes,)8.337 F -.814('')-.77 G F1 2.838(Int. J)6.402 F
5.588(.N)-.275 G 2.838(um. Math. Eng)-5.588 F 5.588(.1)-.165 G(8,)-5.588
E F0 2.838(\(1982\), pp.)5.588 F 3.093(1145-1151. A.)72 256 R(Geor)3.093
E .342(ge and J.W)-.198 F 3.092(.L)-1.012 G(iu,)-3.092 E F1 .342
(Computer Solution of Lar)3.092 F .562 -.11(ge S)-.407 H(par).11 E .342
(se P)-.11 F .342(ositive De\214nite Systems,)-.88 F F0(Pren-)3.092 E
.078(tice-Hall, Inc., Engle)72 272 R -.11(wo)-.275 G .078(od Clif).11 F
.078(fs, Ne)-.275 F 2.828(wJ)-.275 G(erse)-2.828 E 1.508 -.715(y, 1)
-.165 H 2.828(982. A.).715 F(Geor)2.828 E .078(ge and M.T)-.198 F 2.828
(.H)-.814 G .078(eath, `)-2.828 F .078(`Solution of Sparse Lin-)-.814 F
.071(ear Least Squares Problems Using Gi)72 288 R -.165(ve)-.275 G .071
(ns Rotations,).165 F -.814('')-.77 G F1 .071(Linear Alg)3.635 F(ebr)
-.11 E 2.821(aa)-.165 G .071(nd Its Applications 34,)-2.821 F F0 .071
(\(1980\), pp.)2.821 F 2.891(69-82. A.)72 304 R(Geor)2.891 E .141
(ge, M.T)-.198 F 2.892(.H)-.814 G .142(eath, and R.J. Plemmons, `)-2.892
F .142(`Solution of Lar)-.814 F .142
(ge-Scale Sparse Least Squares Prob-)-.198 F .426
(lems Using Auxiliary Storage,)72 320 R 2.054 -.814('' R)-.77 H .425
(eport ORNL/CSD-63, Oak Ridge National Laboratory).814 F 3.175(,\()-.715
G .425(August, 1980\).)-3.175 F 1.033(R.G. Grimes, J.G. Le)72 336 R
1.033(wis, and H.D. Simon, `)-.275 F 1.034(`Experiences in Solving Lar)
-.814 F 1.034(ge Eigen)-.198 F -.275(va)-.44 G 1.034
(lue Problems on the).275 F(CRA)72 352 Q 3.478(YX)-1.155 G(-MP)-3.478 E
-.77(,')-1.221 G(')-.044 E F1(Pr)3.478 E .727
(oceedings of the Eighteenth Semiannual CRA)-.495 F 3.477(YU)-.605 G
(ser)-3.477 E 3.477(sG)-.11 G -.495(ro)-3.477 G .727(up Meeting).495 F
(,)-.11 E F0 .727(Garmisch, W)3.477 F(est)-.88 E(German)72 368 Q 1.949
-.715(y, \()-.165 H(October).715 E 3.269(,1)-.44 G 3.269(986\). R.G.)
-3.269 F .519(Grimes, J.G. Le)3.269 F .519(wis, and H.D. Simon, `)-.275
F(`Eigen)-.814 E -.275(va)-.44 G .519(lue Problems and Algo-).275 F
1.124(rithms in Structural Engineering,)72 384 R 2.751 -.814('' i)-.77 H
(n).814 E F1(Lar)3.873 E 1.343 -.11(ge S)-.407 H 1.123(cale Eig).11 F
(en)-.11 E 1.123(value Pr)-.44 F(oblems)-.495 E F0 3.873(\(J. Cullum)
3.873 F 1.123(and R. W)3.873 F(illoughby)-.44 E(,)-.715 E .269
(eds.\), Else)72 400 R .27(vier North-Holland, \(1986\), pp. 81-93.)
-.275 F .27(R.J. Hanson, F)5.77 F(.T)-.88 E 3.02(.K)-.814 G .27
(rogh, and C.L. La)-3.02 F .27(wson, `)-.165 F 2.03 -.88(`A P)-.814 H
(ropos-).88 E .68(al for Standard Linear Algebra Subprograms,)72 416 R
-.814('')-.77 G F1 -.33(AC)4.244 G 3.43(MS).33 G .68(IGNUM Ne)-3.43 F
.68(wsletter 8)-.165 F F0 .68(\(1973\), pp. 16f)3.43 F 3.43(f. C.L.)
-.275 F(La)3.43 E(w-)-.165 E .222(son, R.J. Hanson, D.R. Kincaid, and F)
72 432 R(.T)-.88 E 2.973(.K)-.814 G .223(rogh, `)-2.973 F .223
(`Basic Linear Algebra Subprograms for FOR)-.814 F .223(TRAN Us-)-.66 F
(age,)72 448 Q -.814('')-.77 G F1 -.33(AC)4.337 G 3.522(MT).33 G -.165
(ra)-4.127 G .772(nsactions on Mathematical Softwar).165 F 3.522(e5)
-.407 G(,)-3.522 E F0 3.522(3\()3.522 G(September)-3.522 E 3.522(,1)-.44
G .772(979\), pp. 308-323.)-3.522 F .772(C.L. La)6.272 F(wson,)-.165 E
1.995(R.J. Hanson, D.R. Kincaid, and F)72 464 R(.T)-.88 E 4.746(.K)-.814
G 1.996(rogh, `)-4.746 F -.88(`A)-.814 G 1.996
(lgorithm 539: Basic Linear Algebra Subprograms for).88 F(FOR)72 480 Q
.801(TRAN Usage,)-.66 F -.814('')-.77 G F1 -.33(AC)4.365 G 3.551(MT).33
G -.165(ra)-4.156 G .801(nsactions on Mathematical Softwar).165 F 3.551
(e5)-.407 G(,)-3.551 E F0 3.55(3\()3.551 G(September)-3.55 E 3.55(,1)
-.44 G .8(979\), pp. 324-325.)-3.55 F .612(J.G. Le)72 496 R .612
(wis and H.D. Simon, `)-.275 F .612(`The Impact of Hardw)-.814 F .612
(are Gather/Scatter on Sparse Gaussian Elimination,)-.11 F -.814('')-.77
G F1(Pr)72 512 Q .753(oceedings of the 1986 International Confer)-.495 F
.753(ence on P)-.407 F(ar)-.88 E .753(allel Pr)-.165 F(ocessing)-.495 E
(,)-.11 E F0 .753(\(K. Hw)3.503 F .753(ang, S. Jacobs, and E.)-.11 F(Sw)
72 528 Q(artzlander)-.11 E 2.767(,e)-.44 G .018
(ds.\), IEEE Computer Society)-2.767 F 2.768(,L)-.715 G .018
(os Angeles, \(1986\).)-2.768 F .018(H.D. Simon, `)5.518 F .018
(`Incomplete LU Precon-)-.814 F .956(ditioners for Conjug)72 544 R .956
(ate Gradient T)-.055 F .956(ype Iterati)-.88 F 1.286 -.165(ve M)-.275 H
(ethods,).165 E 2.584 -.814('' P)-.77 H .956(aper SPE 13533,).649 F F1
(Pr)3.705 E .955(oceedings of the Eighth)-.495 F
(SPE Symposium on Reservoir Simulation,)72 560 Q F0(\(February)2.75 E
2.75(,1)-.715 G(985\).)-2.75 E EP
%%Trailer
end
%%EOF
